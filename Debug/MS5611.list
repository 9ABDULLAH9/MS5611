
MS5611.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009034  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08009208  08009208  0000a208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a0  080096a0  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a8  080096a8  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a8  080096a8  0000a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096ac  080096ac  0000a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080096b0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e8  08009898  0000b1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08009898  0000b3cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008702  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7d  00000000  00000000  0001391a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00015398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000665  00000000  00000000  00015c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022499  00000000  00000000  00016275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7df  00000000  00000000  0003870e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caae5  00000000  00000000  00044eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f9d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003990  00000000  00000000  0010fa18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001133a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091ec 	.word	0x080091ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080091ec 	.word	0x080091ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_GPIO_Init+0x68>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a16      	ldr	r2, [pc, #88]	@ (800108c <MX_GPIO_Init+0x68>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_GPIO_Init+0x68>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_GPIO_Init+0x68>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <MX_GPIO_Init+0x68>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_GPIO_Init+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_GPIO_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <MX_GPIO_Init+0x68>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_GPIO_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_I2C1_Init+0x50>)
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <MX_I2C1_Init+0x54>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_I2C1_Init+0x50>)
 800109c:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <MX_I2C1_Init+0x58>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010ce:	f000 ffc9 	bl	8002064 <HAL_I2C_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d8:	f000 f90c 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000204 	.word	0x20000204
 80010e4:	40005400 	.word	0x40005400
 80010e8:	000186a0 	.word	0x000186a0

080010ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_I2C_MspInit+0x84>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12b      	bne.n	8001166 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800112a:	23c0      	movs	r3, #192	@ 0xc0
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112e:	2312      	movs	r3, #18
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113a:	2304      	movs	r3, #4
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <HAL_I2C_MspInit+0x8c>)
 8001146:	f000 fdf9 	bl	8001d3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001154:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40005400 	.word	0x40005400
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 fc5f 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f847 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f7ff ff4b 	bl	8001024 <MX_GPIO_Init>
  MX_I2C1_Init();
 800118e:	f7ff ff7f 	bl	8001090 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	hms5611.hi2c = &hi2c1;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <main+0x80>)
 8001194:	4a1a      	ldr	r2, [pc, #104]	@ (8001200 <main+0x84>)
 8001196:	601a      	str	r2, [r3, #0]
    if (MS5611_Init(&hms5611) == HAL_OK) 
 8001198:	4818      	ldr	r0, [pc, #96]	@ (80011fc <main+0x80>)
 800119a:	f000 f92d 	bl	80013f8 <MS5611_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <main+0x2e>
    	printf("ok");
 80011a4:	4817      	ldr	r0, [pc, #92]	@ (8001204 <main+0x88>)
 80011a6:	f003 fc73 	bl	8004a90 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  while (1)
  {
	if (MS5611_ReadTemperature(&hms5611, &temperature) == HAL_OK) 
 80011aa:	4917      	ldr	r1, [pc, #92]	@ (8001208 <main+0x8c>)
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <main+0x80>)
 80011ae:	f000 f93a 	bl	8001426 <MS5611_ReadTemperature>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <main+0x42>
		printf("ok");
 80011b8:	4812      	ldr	r0, [pc, #72]	@ (8001204 <main+0x88>)
 80011ba:	f003 fc69 	bl	8004a90 <iprintf>

    if (MS5611_ReadPressure(&hms5611, &pressure) == HAL_OK) 
 80011be:	4913      	ldr	r1, [pc, #76]	@ (800120c <main+0x90>)
 80011c0:	480e      	ldr	r0, [pc, #56]	@ (80011fc <main+0x80>)
 80011c2:	f000 f983 	bl	80014cc <MS5611_ReadPressure>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <main+0x56>
    	printf("ok");
 80011cc:	480d      	ldr	r0, [pc, #52]	@ (8001204 <main+0x88>)
 80011ce:	f003 fc5f 	bl	8004a90 <iprintf>

	calculateAltitude(&altitude, pressure);
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <main+0x90>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <main+0x94>)
 80011da:	f000 fa85 	bl	80016e8 <calculateAltitude>

	printf("tm: %d, prs: %d alt: %.2f \n",temperature, pressure, altitude);
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <main+0x8c>)
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <main+0x90>)
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <main+0x94>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	e9cd 2300 	strd	r2, r3, [sp]
 80011f0:	4602      	mov	r2, r0
 80011f2:	4808      	ldr	r0, [pc, #32]	@ (8001214 <main+0x98>)
 80011f4:	f003 fc4c 	bl	8004a90 <iprintf>
	if (MS5611_ReadTemperature(&hms5611, &temperature) == HAL_OK) 
 80011f8:	e7d7      	b.n	80011aa <main+0x2e>
 80011fa:	bf00      	nop
 80011fc:	20000258 	.word	0x20000258
 8001200:	20000204 	.word	0x20000204
 8001204:	08009208 	.word	0x08009208
 8001208:	20000268 	.word	0x20000268
 800120c:	2000026c 	.word	0x2000026c
 8001210:	20000270 	.word	0x20000270
 8001214:	0800920c 	.word	0x0800920c

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	@ 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2234      	movs	r2, #52	@ 0x34
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fca7 	bl	8004b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <SystemClock_Config+0xd4>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a29      	ldr	r2, [pc, #164]	@ (80012ec <SystemClock_Config+0xd4>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <SystemClock_Config+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <SystemClock_Config+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001264:	4a22      	ldr	r2, [pc, #136]	@ (80012f0 <SystemClock_Config+0xd8>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <SystemClock_Config+0xd8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800128c:	2308      	movs	r3, #8
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001290:	23b4      	movs	r3, #180	@ 0xb4
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fa27 	bl	80036f8 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012b0:	f000 f820 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80012b8:	2303      	movs	r3, #3
 80012ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 feda 	bl	800308c <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012de:	f000 f809 	bl	80012f4 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	@ 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <MS5611_Reset>:
 * @author Abdullah Mert Genç
 * */

#include "ms5611.h"

static HAL_StatusTypeDef MS5611_Reset(MS5611_HandleTypeDef *ms5611) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	6078      	str	r0, [r7, #4]
    uint8_t cmd = MS5611_RESET;
 8001308:	231e      	movs	r3, #30
 800130a:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Master_Transmit(ms5611->hi2c, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f107 020f 	add.w	r2, r7, #15
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	21ee      	movs	r1, #238	@ 0xee
 800131e:	f000 ffe5 	bl	80022ec <HAL_I2C_Master_Transmit>
 8001322:	4603      	mov	r3, r0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <MS5611_ReadPROM>:

static HAL_StatusTypeDef MS5611_ReadPROM(MS5611_HandleTypeDef *ms5611) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af04      	add	r7, sp, #16
 8001332:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e02c      	b.n	8001394 <MS5611_ReadPROM+0x68>
        uint8_t addr = MS5611_PROM_READ + (i * 2);
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	3351      	adds	r3, #81	@ 0x51
 800133e:	b2db      	uxtb	r3, r3
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	73bb      	strb	r3, [r7, #14]
        uint8_t data[2];
        HAL_StatusTypeDef res = HAL_I2C_Mem_Read(ms5611->hi2c, MS5611_ADDR, addr, 1, data, 2, HAL_MAX_DELAY);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	b29a      	uxth	r2, r3
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2302      	movs	r3, #2
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	21ee      	movs	r1, #238	@ 0xee
 8001360:	f001 f8c2 	bl	80024e8 <HAL_I2C_Mem_Read>
 8001364:	4603      	mov	r3, r0
 8001366:	737b      	strb	r3, [r7, #13]

        if (res != HAL_OK) 
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MS5611_ReadPROM+0x46>
			return res;
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	e014      	b.n	800139c <MS5611_ReadPROM+0x70>

        ms5611->C[i] = convert8bitto16bit(data[0], data[1]);
 8001372:	7a3b      	ldrb	r3, [r7, #8]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21a      	sxth	r2, r3
 8001378:	7a7b      	ldrb	r3, [r7, #9]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21a      	sxth	r2, r3
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	b291      	uxth	r1, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	460a      	mov	r2, r1
 800138c:	809a      	strh	r2, [r3, #4]
    for (uint8_t i = 0; i < 6; i++) {
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3301      	adds	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d9cf      	bls.n	800133a <MS5611_ReadPROM+0xe>
    }
    return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MS5611_ReadADC>:

static HAL_StatusTypeDef MS5611_ReadADC(MS5611_HandleTypeDef *ms5611, uint32_t *adc_value) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    uint8_t data[3];

    HAL_StatusTypeDef res = HAL_I2C_Mem_Read(ms5611->hi2c, MS5611_ADDR, MS5611_ADC_READ, 1, data, 3, HAL_MAX_DELAY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	2303      	movs	r3, #3
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2200      	movs	r2, #0
 80013c6:	21ee      	movs	r1, #238	@ 0xee
 80013c8:	f001 f88e 	bl	80024e8 <HAL_I2C_Mem_Read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
    if (res != HAL_OK) 
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MS5611_ReadADC+0x36>
		return res;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	e00a      	b.n	80013f0 <MS5611_ReadADC+0x4c>

    *adc_value = (data[0] << 16) | (data[1] << 8) | data[2];
 80013da:	7b3b      	ldrb	r3, [r7, #12]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	7b7b      	ldrb	r3, [r7, #13]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4313      	orrs	r3, r2
 80013e4:	7bba      	ldrb	r2, [r7, #14]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <MS5611_Init>:

HAL_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *ms5611) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    if (MS5611_Reset(ms5611) != HAL_OK) 
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff7d 	bl	8001300 <MS5611_Reset>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MS5611_Init+0x18>
		return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e006      	b.n	800141e <MS5611_Init+0x26>
    HAL_Delay(10);  // Wait for reset to complete
 8001410:	200a      	movs	r0, #10
 8001412:	f000 fb89 	bl	8001b28 <HAL_Delay>
    return MS5611_ReadPROM(ms5611);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff88 	bl	800132c <MS5611_ReadPROM>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <MS5611_ReadTemperature>:

HAL_StatusTypeDef MS5611_ReadTemperature(MS5611_HandleTypeDef *ms5611, int32_t *temperature) {
 8001426:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    uint8_t cmd = MS5611_CONVERT_D2;
 8001432:	2358      	movs	r3, #88	@ 0x58
 8001434:	74fb      	strb	r3, [r7, #19]
    if (HAL_I2C_Master_Transmit(ms5611->hi2c, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK) 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	f107 0213 	add.w	r2, r7, #19
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	21ee      	movs	r1, #238	@ 0xee
 8001448:	f000 ff50 	bl	80022ec <HAL_I2C_Master_Transmit>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MS5611_ReadTemperature+0x30>
		return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e035      	b.n	80014c2 <MS5611_ReadTemperature+0x9c>
    HAL_Delay(10);  // Wait for conversion to complete
 8001456:	200a      	movs	r0, #10
 8001458:	f000 fb66 	bl	8001b28 <HAL_Delay>

    uint32_t D2;
    if (MS5611_ReadADC(ms5611, &D2) != HAL_OK) 
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff9e 	bl	80013a4 <MS5611_ReadADC>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MS5611_ReadTemperature+0x4c>
		return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e027      	b.n	80014c2 <MS5611_ReadTemperature+0x9c>

    int32_t dT = D2 - ((int32_t)ms5611->C[4] << 8);
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	899b      	ldrh	r3, [r3, #12]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    *temperature = 2000 + ((dT * (int64_t)ms5611->C[5]) >> 23);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	17da      	asrs	r2, r3, #31
 8001482:	469a      	mov	sl, r3
 8001484:	4693      	mov	fp, r2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	89db      	ldrh	r3, [r3, #14]
 800148a:	b29b      	uxth	r3, r3
 800148c:	2200      	movs	r2, #0
 800148e:	4698      	mov	r8, r3
 8001490:	4691      	mov	r9, r2
 8001492:	fb08 f20b 	mul.w	r2, r8, fp
 8001496:	fb0a f309 	mul.w	r3, sl, r9
 800149a:	4413      	add	r3, r2
 800149c:	fbaa 4508 	umull	r4, r5, sl, r8
 80014a0:	442b      	add	r3, r5
 80014a2:	461d      	mov	r5, r3
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	0de2      	lsrs	r2, r4, #23
 80014ae:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80014b2:	15eb      	asrs	r3, r5, #23
 80014b4:	4613      	mov	r3, r2
 80014b6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80014ba:	461a      	mov	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080014cc <MS5611_ReadPressure>:

HAL_StatusTypeDef MS5611_ReadPressure(MS5611_HandleTypeDef *ms5611, int32_t *pressure) {
 80014cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d0:	b0a5      	sub	sp, #148	@ 0x94
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80014d6:	65b9      	str	r1, [r7, #88]	@ 0x58
    uint8_t cmd = MS5611_CONVERT_D2;
 80014d8:	2358      	movs	r3, #88	@ 0x58
 80014da:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (HAL_I2C_Master_Transmit(ms5611->hi2c, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK) 
 80014de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	f107 026f 	add.w	r2, r7, #111	@ 0x6f
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2301      	movs	r3, #1
 80014ee:	21ee      	movs	r1, #238	@ 0xee
 80014f0:	f000 fefc 	bl	80022ec <HAL_I2C_Master_Transmit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MS5611_ReadPressure+0x32>
		return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0ee      	b.n	80016dc <MS5611_ReadPressure+0x210>
    HAL_Delay(10);  // Wait for conversion to complete
 80014fe:	200a      	movs	r0, #10
 8001500:	f000 fb12 	bl	8001b28 <HAL_Delay>

    uint32_t D2;
    if (MS5611_ReadADC(ms5611, &D2) != HAL_OK) 
 8001504:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001508:	4619      	mov	r1, r3
 800150a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800150c:	f7ff ff4a 	bl	80013a4 <MS5611_ReadADC>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MS5611_ReadPressure+0x4e>
		return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0e0      	b.n	80016dc <MS5611_ReadPressure+0x210>

    int32_t dT = D2 - ((int32_t)ms5611->C[4] << 8);
 800151a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800151c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800151e:	899b      	ldrh	r3, [r3, #12]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	
	cmd = MS5611_CONVERT_D1;
 8001528:	2348      	movs	r3, #72	@ 0x48
 800152a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    if (HAL_I2C_Master_Transmit(ms5611->hi2c, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
 800152e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	f107 026f 	add.w	r2, r7, #111	@ 0x6f
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	21ee      	movs	r1, #238	@ 0xee
 8001540:	f000 fed4 	bl	80022ec <HAL_I2C_Master_Transmit>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MS5611_ReadPressure+0x82>
		return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0c6      	b.n	80016dc <MS5611_ReadPressure+0x210>
    HAL_Delay(10);  // Wait for conversion to complete
 800154e:	200a      	movs	r0, #10
 8001550:	f000 faea 	bl	8001b28 <HAL_Delay>

    uint32_t D1;
    if (MS5611_ReadADC(ms5611, &D1) != HAL_OK)
 8001554:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001558:	4619      	mov	r1, r3
 800155a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800155c:	f7ff ff22 	bl	80013a4 <MS5611_ReadADC>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MS5611_ReadPressure+0x9e>
		return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0b8      	b.n	80016dc <MS5611_ReadPressure+0x210>

    int64_t OFF = ((int64_t)ms5611->C[1] << 16) + (((int64_t)ms5611->C[3] * dT) >> 7);
 800156a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800156c:	88db      	ldrh	r3, [r3, #6]
 800156e:	b29b      	uxth	r3, r3
 8001570:	2200      	movs	r2, #0
 8001572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001574:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001576:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800157a:	460b      	mov	r3, r1
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001580:	460b      	mov	r3, r1
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
 8001586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001588:	895b      	ldrh	r3, [r3, #10]
 800158a:	b29b      	uxth	r3, r3
 800158c:	2200      	movs	r2, #0
 800158e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001590:	657a      	str	r2, [r7, #84]	@ 0x54
 8001592:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001596:	17da      	asrs	r2, r3, #31
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800159a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800159c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80015a0:	460b      	mov	r3, r1
 80015a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015a4:	fb02 f203 	mul.w	r2, r2, r3
 80015a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015aa:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 80015ae:	4601      	mov	r1, r0
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80015b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80015ba:	fba2 4501 	umull	r4, r5, r2, r1
 80015be:	442b      	add	r3, r5
 80015c0:	461d      	mov	r5, r3
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	09e2      	lsrs	r2, r4, #7
 80015cc:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80015d0:	11eb      	asrs	r3, r5, #7
 80015d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015d6:	4621      	mov	r1, r4
 80015d8:	1889      	adds	r1, r1, r2
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	4629      	mov	r1, r5
 80015de:	eb43 0101 	adc.w	r1, r3, r1
 80015e2:	60f9      	str	r1, [r7, #12]
 80015e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    int64_t SENS = ((int64_t)ms5611->C[0] << 15) + (((int64_t)ms5611->C[2] * dT) >> 8);
 80015ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	2200      	movs	r2, #0
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	f04f 0100 	mov.w	r1, #0
 8001600:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001604:	462b      	mov	r3, r5
 8001606:	03d9      	lsls	r1, r3, #15
 8001608:	4623      	mov	r3, r4
 800160a:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 800160e:	4623      	mov	r3, r4
 8001610:	03d8      	lsls	r0, r3, #15
 8001612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001614:	891b      	ldrh	r3, [r3, #8]
 8001616:	b29b      	uxth	r3, r3
 8001618:	2200      	movs	r2, #0
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	627a      	str	r2, [r7, #36]	@ 0x24
 800161e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001622:	17da      	asrs	r2, r3, #31
 8001624:	643b      	str	r3, [r7, #64]	@ 0x40
 8001626:	647a      	str	r2, [r7, #68]	@ 0x44
 8001628:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800162c:	4633      	mov	r3, r6
 800162e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001630:	fb02 f203 	mul.w	r2, r2, r3
 8001634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001636:	462c      	mov	r4, r5
 8001638:	fb04 f303 	mul.w	r3, r4, r3
 800163c:	4413      	add	r3, r2
 800163e:	462a      	mov	r2, r5
 8001640:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001642:	fba2 ab04 	umull	sl, fp, r2, r4
 8001646:	445b      	add	r3, fp
 8001648:	469b      	mov	fp, r3
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8001656:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
 800165a:	ea4f 232b 	mov.w	r3, fp, asr #8
 800165e:	1884      	adds	r4, r0, r2
 8001660:	603c      	str	r4, [r7, #0]
 8001662:	eb41 0303 	adc.w	r3, r1, r3
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	e9d7 3400 	ldrd	r3, r4, [r7]
 800166c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    *pressure = (((D1 * SENS) >> 21) - OFF) >> 15;
 8001670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001672:	2200      	movs	r2, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	61fa      	str	r2, [r7, #28]
 8001678:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800167a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800167e:	462a      	mov	r2, r5
 8001680:	fb02 f203 	mul.w	r2, r2, r3
 8001684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001686:	4621      	mov	r1, r4
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001690:	4621      	mov	r1, r4
 8001692:	fba2 8901 	umull	r8, r9, r2, r1
 8001696:	444b      	add	r3, r9
 8001698:	4699      	mov	r9, r3
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	ea4f 5258 	mov.w	r2, r8, lsr #21
 80016a6:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
 80016aa:	ea4f 5369 	mov.w	r3, r9, asr #21
 80016ae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016b2:	1a14      	subs	r4, r2, r0
 80016b4:	613c      	str	r4, [r7, #16]
 80016b6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016c8:	4621      	mov	r1, r4
 80016ca:	0bca      	lsrs	r2, r1, #15
 80016cc:	4629      	mov	r1, r5
 80016ce:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80016d2:	4629      	mov	r1, r5
 80016d4:	13cb      	asrs	r3, r1, #15
 80016d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016d8:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	378c      	adds	r7, #140	@ 0x8c
 80016e0:	46bd      	mov	sp, r7
 80016e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080016e8 <calculateAltitude>:

HAL_StatusTypeDef calculateAltitude(double *altitude, int32_t pressure) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	if(pressure <= 0)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dc01      	bgt.n	80016fc <calculateAltitude+0x14>
		return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <calculateAltitude+0x7a>

    *altitude = (T0 / L) * (1 - pow(((double)pressure / 100.0) / P0, (L * R) / (g * M)));
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f7fe ff31 	bl	8000564 <__aeabi_i2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <calculateAltitude+0xa0>)
 8001708:	f7ff f8c0 	bl	800088c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a316      	add	r3, pc, #88	@ (adr r3, 8001770 <calculateAltitude+0x88>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7ff f8b7 	bl	800088c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	ec43 2b17 	vmov	d7, r2, r3
 8001726:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8001778 <calculateAltitude+0x90>
 800172a:	eeb0 0a47 	vmov.f32	s0, s14
 800172e:	eef0 0a67 	vmov.f32	s1, s15
 8001732:	f006 fdfb 	bl	800832c <pow>
 8001736:	ec53 2b10 	vmov	r2, r3, d0
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	4913      	ldr	r1, [pc, #76]	@ (800178c <calculateAltitude+0xa4>)
 8001740:	f7fe fdc2 	bl	80002c8 <__aeabi_dsub>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001780 <calculateAltitude+0x98>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ff71 	bl	8000638 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	e9c1 2300 	strd	r2, r3, [r1]
    return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	f3af 8000 	nop.w
 8001770:	00000000 	.word	0x00000000
 8001774:	408faa00 	.word	0x408faa00
 8001778:	8b59e239 	.word	0x8b59e239
 800177c:	3fc85aa6 	.word	0x3fc85aa6
 8001780:	9d89d89d 	.word	0x9d89d89d
 8001784:	40e5a558 	.word	0x40e5a558
 8001788:	40590000 	.word	0x40590000
 800178c:	3ff00000 	.word	0x3ff00000

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <NMI_Handler+0x4>

080017e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <UsageFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f957 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}

0800183e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_kill>:

int _kill(int pid, int sig)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001858:	f003 f9e2 	bl	8004c20 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	2216      	movs	r2, #22
 8001860:	601a      	str	r2, [r3, #0]
  return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_exit>:

void _exit (int status)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001876:	f04f 31ff 	mov.w	r1, #4294967295
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffe7 	bl	800184e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <_exit+0x12>

08001884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e00a      	b.n	80018ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	4601      	mov	r1, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbf0      	blt.n	8001896 <_read+0x12>
  }

  return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e009      	b.n	80018e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf1      	blt.n	80018d0 <_write+0x12>
  }
  return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_close>:

int _close(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800191e:	605a      	str	r2, [r3, #4]
  return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_isatty>:

int _isatty(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f003 f946 	bl	8004c20 <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20020000 	.word	0x20020000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	20000278 	.word	0x20000278
 80019c8:	200003d0 	.word	0x200003d0

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019f4:	f7ff ffea 	bl	80019cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	@ (8001a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	@ (8001a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f003 f905 	bl	8004c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7ff fbab 	bl	800117c <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a34:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 8001a38:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a3c:	200003cc 	.word	0x200003cc

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	@ (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f931 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	200f      	movs	r0, #15
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fe8a 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f93b 	bl	8001d22 <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f911 	bl	8001cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	@ (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	2000027c 	.word	0x2000027c

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	2000027c 	.word	0x2000027c

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca0:	d301      	bcc.n	8001ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <SysTick_Config+0x40>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cae:	210f      	movs	r1, #15
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f7ff ff8e 	bl	8001bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <SysTick_Config+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cbe:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <SysTick_Config+0x40>)
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	e000e010 	.word	0xe000e010

08001cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff47 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff5c 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff8e 	bl	8001c28 <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5d 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffb0 	bl	8001c90 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e165      	b.n	8002024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8154 	bne.w	800201e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d005      	beq.n	8001d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d130      	bne.n	8001df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 0201 	and.w	r2, r3, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d017      	beq.n	8001e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80ae 	beq.w	800201e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800203c <HAL_GPIO_Init+0x300>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	4a5c      	ldr	r2, [pc, #368]	@ (800203c <HAL_GPIO_Init+0x300>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800203c <HAL_GPIO_Init+0x300>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_GPIO_Init+0x304>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4f      	ldr	r2, [pc, #316]	@ (8002044 <HAL_GPIO_Init+0x308>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d025      	beq.n	8001f56 <HAL_GPIO_Init+0x21a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002048 <HAL_GPIO_Init+0x30c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x216>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	@ (800204c <HAL_GPIO_Init+0x310>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x212>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002050 <HAL_GPIO_Init+0x314>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x20e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	@ (8002054 <HAL_GPIO_Init+0x318>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x20a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002058 <HAL_GPIO_Init+0x31c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x206>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a49      	ldr	r2, [pc, #292]	@ (800205c <HAL_GPIO_Init+0x320>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x202>
 8001f3a:	2306      	movs	r3, #6
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	@ (8002040 <HAL_GPIO_Init+0x304>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a31      	ldr	r2, [pc, #196]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a26      	ldr	r2, [pc, #152]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_GPIO_Init+0x324>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae96 	bls.w	8001d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e12b      	b.n	80022ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff f82e 	bl	80010ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2224      	movs	r2, #36	@ 0x24
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020c8:	f001 f8d2 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80020cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a81      	ldr	r2, [pc, #516]	@ (80022d8 <HAL_I2C_Init+0x274>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d807      	bhi.n	80020e8 <HAL_I2C_Init+0x84>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4a80      	ldr	r2, [pc, #512]	@ (80022dc <HAL_I2C_Init+0x278>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	bf94      	ite	ls
 80020e0:	2301      	movls	r3, #1
 80020e2:	2300      	movhi	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e006      	b.n	80020f6 <HAL_I2C_Init+0x92>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a7d      	ldr	r2, [pc, #500]	@ (80022e0 <HAL_I2C_Init+0x27c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	bf94      	ite	ls
 80020f0:	2301      	movls	r3, #1
 80020f2:	2300      	movhi	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0e7      	b.n	80022ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a78      	ldr	r2, [pc, #480]	@ (80022e4 <HAL_I2C_Init+0x280>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a6a      	ldr	r2, [pc, #424]	@ (80022d8 <HAL_I2C_Init+0x274>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d802      	bhi.n	8002138 <HAL_I2C_Init+0xd4>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3301      	adds	r3, #1
 8002136:	e009      	b.n	800214c <HAL_I2C_Init+0xe8>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	4a69      	ldr	r2, [pc, #420]	@ (80022e8 <HAL_I2C_Init+0x284>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	3301      	adds	r3, #1
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800215e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	495c      	ldr	r1, [pc, #368]	@ (80022d8 <HAL_I2C_Init+0x274>)
 8002168:	428b      	cmp	r3, r1
 800216a:	d819      	bhi.n	80021a0 <HAL_I2C_Init+0x13c>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e59      	subs	r1, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fbb1 f3f3 	udiv	r3, r1, r3
 800217a:	1c59      	adds	r1, r3, #1
 800217c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002180:	400b      	ands	r3, r1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_I2C_Init+0x138>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e59      	subs	r1, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fbb1 f3f3 	udiv	r3, r1, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219a:	e051      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 800219c:	2304      	movs	r3, #4
 800219e:	e04f      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d111      	bne.n	80021cc <HAL_I2C_Init+0x168>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e58      	subs	r0, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	440b      	add	r3, r1
 80021b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e012      	b.n	80021f2 <HAL_I2C_Init+0x18e>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	0099      	lsls	r1, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Init+0x196>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e022      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10e      	bne.n	8002220 <HAL_I2C_Init+0x1bc>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e58      	subs	r0, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6859      	ldr	r1, [r3, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	440b      	add	r3, r1
 8002210:	fbb0 f3f3 	udiv	r3, r0, r3
 8002214:	3301      	adds	r3, #1
 8002216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800221e:	e00f      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1e58      	subs	r0, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	0099      	lsls	r1, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	fbb0 f3f3 	udiv	r3, r0, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	6809      	ldr	r1, [r1, #0]
 8002244:	4313      	orrs	r3, r2
 8002246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800226e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6911      	ldr	r1, [r2, #16]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68d2      	ldr	r2, [r2, #12]
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	430b      	orrs	r3, r1
 8002282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	000186a0 	.word	0x000186a0
 80022dc:	001e847f 	.word	0x001e847f
 80022e0:	003d08ff 	.word	0x003d08ff
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	10624dd3 	.word	0x10624dd3

080022ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	461a      	mov	r2, r3
 80022f8:	460b      	mov	r3, r1
 80022fa:	817b      	strh	r3, [r7, #10]
 80022fc:	4613      	mov	r3, r2
 80022fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fc06 	bl	8001b10 <HAL_GetTick>
 8002304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	f040 80e0 	bne.w	80024d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2319      	movs	r3, #25
 800231a:	2201      	movs	r2, #1
 800231c:	4970      	ldr	r1, [pc, #448]	@ (80024e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fc7e 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	e0d3      	b.n	80024d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_I2C_Master_Transmit+0x50>
 8002338:	2302      	movs	r3, #2
 800233a:	e0cc      	b.n	80024d6 <HAL_I2C_Master_Transmit+0x1ea>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d007      	beq.n	8002362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2221      	movs	r2, #33	@ 0x21
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2210      	movs	r2, #16
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	893a      	ldrh	r2, [r7, #8]
 8002392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4a50      	ldr	r2, [pc, #320]	@ (80024e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80023a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6a3a      	ldr	r2, [r7, #32]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 face 	bl	800294c <I2C_MasterRequestWrite>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e08d      	b.n	80024d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023d0:	e066      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	6a39      	ldr	r1, [r7, #32]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fd3c 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00d      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d107      	bne.n	80023fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06b      	b.n	80024d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b04      	cmp	r3, #4
 800243a:	d11b      	bne.n	8002474 <HAL_I2C_Master_Transmit+0x188>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	d017      	beq.n	8002474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	6a39      	ldr	r1, [r7, #32]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fd33 	bl	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	2b04      	cmp	r3, #4
 800248a:	d107      	bne.n	800249c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e01a      	b.n	80024d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d194      	bne.n	80023d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	00100002 	.word	0x00100002
 80024e4:	ffff0000 	.word	0xffff0000

080024e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	@ 0x30
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	460b      	mov	r3, r1
 80024fc:	813b      	strh	r3, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002502:	f7ff fb05 	bl	8001b10 <HAL_GetTick>
 8002506:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b20      	cmp	r3, #32
 8002512:	f040 8214 	bne.w	800293e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2319      	movs	r3, #25
 800251c:	2201      	movs	r2, #1
 800251e:	497b      	ldr	r1, [pc, #492]	@ (800270c <HAL_I2C_Mem_Read+0x224>)
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fb7d 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
 800252e:	e207      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_I2C_Mem_Read+0x56>
 800253a:	2302      	movs	r3, #2
 800253c:	e200      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d007      	beq.n	8002564 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2222      	movs	r2, #34	@ 0x22
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2240      	movs	r2, #64	@ 0x40
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002710 <HAL_I2C_Mem_Read+0x228>)
 80025a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a6:	88f8      	ldrh	r0, [r7, #6]
 80025a8:	893a      	ldrh	r2, [r7, #8]
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4603      	mov	r3, r0
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa4a 	bl	8002a50 <I2C_RequestMemoryRead>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1bc      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d113      	bne.n	80025f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	623b      	str	r3, [r7, #32]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e190      	b.n	8002918 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d11b      	bne.n	8002636 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e170      	b.n	8002918 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263a:	2b02      	cmp	r3, #2
 800263c:	d11b      	bne.n	8002676 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800264c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800265c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	e150      	b.n	8002918 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800268c:	e144      	b.n	8002918 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	2b03      	cmp	r3, #3
 8002694:	f200 80f1 	bhi.w	800287a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	2b01      	cmp	r3, #1
 800269e:	d123      	bne.n	80026e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fc65 	bl	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e145      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026e6:	e117      	b.n	8002918 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d14e      	bne.n	800278e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f6:	2200      	movs	r2, #0
 80026f8:	4906      	ldr	r1, [pc, #24]	@ (8002714 <HAL_I2C_Mem_Read+0x22c>)
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa90 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e11a      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
 800270a:	bf00      	nop
 800270c:	00100002 	.word	0x00100002
 8002710:	ffff0000 	.word	0xffff0000
 8002714:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800278c:	e0c4      	b.n	8002918 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002794:	2200      	movs	r2, #0
 8002796:	496c      	ldr	r1, [pc, #432]	@ (8002948 <HAL_I2C_Mem_Read+0x460>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fa41 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cb      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	2200      	movs	r2, #0
 80027f2:	4955      	ldr	r1, [pc, #340]	@ (8002948 <HAL_I2C_Mem_Read+0x460>)
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fa13 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e09d      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002878:	e04e      	b.n	8002918 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fb78 	bl	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e058      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d124      	bne.n	8002918 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f aeb6 	bne.w	800268e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3728      	adds	r7, #40	@ 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	00010004 	.word	0x00010004

0800294c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d006      	beq.n	8002976 <I2C_MasterRequestWrite+0x2a>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d003      	beq.n	8002976 <I2C_MasterRequestWrite+0x2a>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002974:	d108      	bne.n	8002988 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e00b      	b.n	80029a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	2b12      	cmp	r3, #18
 800298e:	d107      	bne.n	80029a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f937 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c6:	d103      	bne.n	80029d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e035      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029dc:	d108      	bne.n	80029f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029ec:	611a      	str	r2, [r3, #16]
 80029ee:	e01b      	b.n	8002a28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029f0:	897b      	ldrh	r3, [r7, #10]
 80029f2:	11db      	asrs	r3, r3, #7
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f003 0306 	and.w	r3, r3, #6
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f063 030f 	orn	r3, r3, #15
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	490e      	ldr	r1, [pc, #56]	@ (8002a48 <I2C_MasterRequestWrite+0xfc>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f980 	bl	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e010      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4907      	ldr	r1, [pc, #28]	@ (8002a4c <I2C_MasterRequestWrite+0x100>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f970 	bl	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	00010008 	.word	0x00010008
 8002a4c:	00010002 	.word	0x00010002

08002a50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	460b      	mov	r3, r1
 8002a64:	813b      	strh	r3, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f8c2 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab0:	d103      	bne.n	8002aba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0aa      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002acc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	4952      	ldr	r1, [pc, #328]	@ (8002c1c <I2C_RequestMemoryRead+0x1cc>)
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f91d 	bl	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e097      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f9a8 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d107      	bne.n	8002b22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e076      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2c:	893b      	ldrh	r3, [r7, #8]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	e021      	b.n	8002b7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b48:	6a39      	ldr	r1, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f982 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d107      	bne.n	8002b6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e050      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7e:	6a39      	ldr	r1, [r7, #32]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f967 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d107      	bne.n	8002ba4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e035      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f82b 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bde:	d103      	bne.n	8002be8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e013      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bec:	897b      	ldrh	r3, [r7, #10]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	4906      	ldr	r1, [pc, #24]	@ (8002c1c <I2C_RequestMemoryRead+0x1cc>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f886 	bl	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	00010002 	.word	0x00010002

08002c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c30:	e048      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d044      	beq.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7fe ff69 	bl	8001b10 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d139      	bne.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d10d      	bne.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	e00c      	b.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d116      	bne.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e023      	b.n	8002d0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	0c1b      	lsrs	r3, r3, #16
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10d      	bne.n	8002cea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	e00c      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d093      	beq.n	8002c32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d22:	e071      	b.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d32:	d123      	bne.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e067      	b.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d041      	beq.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7fe fec4 	bl	8001b10 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d136      	bne.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10c      	bne.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e00b      	b.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e021      	b.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	0c1b      	lsrs	r3, r3, #16
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10c      	bne.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e00b      	b.n	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f af6d 	bne.w	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e60:	e034      	b.n	8002ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f8e3 	bl	800302e <I2C_IsAcknowledgeFailed>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e034      	b.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d028      	beq.n	8002ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7fe fe49 	bl	8001b10 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11d      	bne.n	8002ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b80      	cmp	r3, #128	@ 0x80
 8002e9c:	d016      	beq.n	8002ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e007      	b.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed6:	2b80      	cmp	r3, #128	@ 0x80
 8002ed8:	d1c3      	bne.n	8002e62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef0:	e034      	b.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f89b 	bl	800302e <I2C_IsAcknowledgeFailed>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e034      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d028      	beq.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fe01 	bl	8001b10 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11d      	bne.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d016      	beq.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e007      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d1c3      	bne.n	8002ef2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f80:	e049      	b.n	8003016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d119      	bne.n	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0210 	mvn.w	r2, #16
 8002f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e030      	b.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc4:	f7fe fda4 	bl	8001b10 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11d      	bne.n	8003016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	d016      	beq.n	8003016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d1ae      	bne.n	8002f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003044:	d11b      	bne.n	800307e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800304e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f043 0204 	orr.w	r2, r3, #4
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0cc      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b68      	ldr	r3, [pc, #416]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d90c      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b65      	ldr	r3, [pc, #404]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a58      	ldr	r2, [pc, #352]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a52      	ldr	r2, [pc, #328]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d119      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d003      	beq.n	800314a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	2b03      	cmp	r3, #3
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e067      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4934      	ldr	r1, [pc, #208]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe fcc8 	bl	8001b10 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe fcc4 	bl	8001b10 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d20c      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f841 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490a      	ldr	r1, [pc, #40]	@ (800324c <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fc28 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023c00 	.word	0x40023c00
 8003248:	40023800 	.word	0x40023800
 800324c:	08009228 	.word	0x08009228
 8003250:	20000000 	.word	0x20000000
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	@ (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	08009238 	.word	0x08009238

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b0ae      	sub	sp, #184	@ 0xb8
 800329e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032be:	4bcb      	ldr	r3, [pc, #812]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	f200 8206 	bhi.w	80036d8 <HAL_RCC_GetSysClockFreq+0x440>
 80032cc:	a201      	add	r2, pc, #4	@ (adr r2, 80032d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	08003309 	.word	0x08003309
 80032d8:	080036d9 	.word	0x080036d9
 80032dc:	080036d9 	.word	0x080036d9
 80032e0:	080036d9 	.word	0x080036d9
 80032e4:	08003311 	.word	0x08003311
 80032e8:	080036d9 	.word	0x080036d9
 80032ec:	080036d9 	.word	0x080036d9
 80032f0:	080036d9 	.word	0x080036d9
 80032f4:	08003319 	.word	0x08003319
 80032f8:	080036d9 	.word	0x080036d9
 80032fc:	080036d9 	.word	0x080036d9
 8003300:	080036d9 	.word	0x080036d9
 8003304:	08003509 	.word	0x08003509
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4bb9      	ldr	r3, [pc, #740]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800330a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800330e:	e1e7      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003310:	4bb8      	ldr	r3, [pc, #736]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003316:	e1e3      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003318:	4bb4      	ldr	r3, [pc, #720]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003324:	4bb1      	ldr	r3, [pc, #708]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d071      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003330:	4bae      	ldr	r3, [pc, #696]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800333c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003348:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003356:	4622      	mov	r2, r4
 8003358:	462b      	mov	r3, r5
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	0159      	lsls	r1, r3, #5
 8003364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003368:	0150      	lsls	r0, r2, #5
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4621      	mov	r1, r4
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	6439      	str	r1, [r7, #64]	@ 0x40
 8003374:	4629      	mov	r1, r5
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	647b      	str	r3, [r7, #68]	@ 0x44
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003388:	4649      	mov	r1, r9
 800338a:	018b      	lsls	r3, r1, #6
 800338c:	4641      	mov	r1, r8
 800338e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003392:	4641      	mov	r1, r8
 8003394:	018a      	lsls	r2, r1, #6
 8003396:	4641      	mov	r1, r8
 8003398:	1a51      	subs	r1, r2, r1
 800339a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800339c:	4649      	mov	r1, r9
 800339e:	eb63 0301 	sbc.w	r3, r3, r1
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80033b0:	4649      	mov	r1, r9
 80033b2:	00cb      	lsls	r3, r1, #3
 80033b4:	4641      	mov	r1, r8
 80033b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ba:	4641      	mov	r1, r8
 80033bc:	00ca      	lsls	r2, r1, #3
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	4622      	mov	r2, r4
 80033c6:	189b      	adds	r3, r3, r2
 80033c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ca:	462b      	mov	r3, r5
 80033cc:	460a      	mov	r2, r1
 80033ce:	eb42 0303 	adc.w	r3, r2, r3
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033e0:	4629      	mov	r1, r5
 80033e2:	024b      	lsls	r3, r1, #9
 80033e4:	4621      	mov	r1, r4
 80033e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033ea:	4621      	mov	r1, r4
 80033ec:	024a      	lsls	r2, r1, #9
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003400:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003404:	f7fd fc60 	bl	8000cc8 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4613      	mov	r3, r2
 800340e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003412:	e067      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003414:	4b75      	ldr	r3, [pc, #468]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003420:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003424:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800342e:	2300      	movs	r3, #0
 8003430:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003432:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4621      	mov	r1, r4
 8003450:	1a51      	subs	r1, r2, r1
 8003452:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003454:	4629      	mov	r1, r5
 8003456:	eb63 0301 	sbc.w	r3, r3, r1
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003468:	4649      	mov	r1, r9
 800346a:	018b      	lsls	r3, r1, #6
 800346c:	4641      	mov	r1, r8
 800346e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003472:	4641      	mov	r1, r8
 8003474:	018a      	lsls	r2, r1, #6
 8003476:	4641      	mov	r1, r8
 8003478:	ebb2 0a01 	subs.w	sl, r2, r1
 800347c:	4649      	mov	r1, r9
 800347e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800348e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003492:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003496:	4692      	mov	sl, r2
 8003498:	469b      	mov	fp, r3
 800349a:	4623      	mov	r3, r4
 800349c:	eb1a 0303 	adds.w	r3, sl, r3
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	462b      	mov	r3, r5
 80034a4:	eb4b 0303 	adc.w	r3, fp, r3
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034b6:	4629      	mov	r1, r5
 80034b8:	028b      	lsls	r3, r1, #10
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c0:	4621      	mov	r1, r4
 80034c2:	028a      	lsls	r2, r1, #10
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034cc:	2200      	movs	r2, #0
 80034ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80034d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80034d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034d6:	f7fd fbf7 	bl	8000cc8 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4613      	mov	r3, r2
 80034e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e4:	4b41      	ldr	r3, [pc, #260]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	3301      	adds	r3, #1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80034f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003506:	e0eb      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003508:	4b38      	ldr	r3, [pc, #224]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003514:	4b35      	ldr	r3, [pc, #212]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d06b      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003520:	4b32      	ldr	r3, [pc, #200]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	2200      	movs	r2, #0
 8003528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800352a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800352c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003532:	663b      	str	r3, [r7, #96]	@ 0x60
 8003534:	2300      	movs	r3, #0
 8003536:	667b      	str	r3, [r7, #100]	@ 0x64
 8003538:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800353c:	4622      	mov	r2, r4
 800353e:	462b      	mov	r3, r5
 8003540:	f04f 0000 	mov.w	r0, #0
 8003544:	f04f 0100 	mov.w	r1, #0
 8003548:	0159      	lsls	r1, r3, #5
 800354a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354e:	0150      	lsls	r0, r2, #5
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4621      	mov	r1, r4
 8003556:	1a51      	subs	r1, r2, r1
 8003558:	61b9      	str	r1, [r7, #24]
 800355a:	4629      	mov	r1, r5
 800355c:	eb63 0301 	sbc.w	r3, r3, r1
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800356e:	4659      	mov	r1, fp
 8003570:	018b      	lsls	r3, r1, #6
 8003572:	4651      	mov	r1, sl
 8003574:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003578:	4651      	mov	r1, sl
 800357a:	018a      	lsls	r2, r1, #6
 800357c:	4651      	mov	r1, sl
 800357e:	ebb2 0801 	subs.w	r8, r2, r1
 8003582:	4659      	mov	r1, fp
 8003584:	eb63 0901 	sbc.w	r9, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003594:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003598:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359c:	4690      	mov	r8, r2
 800359e:	4699      	mov	r9, r3
 80035a0:	4623      	mov	r3, r4
 80035a2:	eb18 0303 	adds.w	r3, r8, r3
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	462b      	mov	r3, r5
 80035aa:	eb49 0303 	adc.w	r3, r9, r3
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035bc:	4629      	mov	r1, r5
 80035be:	024b      	lsls	r3, r1, #9
 80035c0:	4621      	mov	r1, r4
 80035c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035c6:	4621      	mov	r1, r4
 80035c8:	024a      	lsls	r2, r1, #9
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035d2:	2200      	movs	r2, #0
 80035d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80035d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035dc:	f7fd fb74 	bl	8000cc8 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ea:	e065      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x420>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f8:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	2200      	movs	r2, #0
 8003600:	4618      	mov	r0, r3
 8003602:	4611      	mov	r1, r2
 8003604:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003608:	653b      	str	r3, [r7, #80]	@ 0x50
 800360a:	2300      	movs	r3, #0
 800360c:	657b      	str	r3, [r7, #84]	@ 0x54
 800360e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003612:	4642      	mov	r2, r8
 8003614:	464b      	mov	r3, r9
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4641      	mov	r1, r8
 800362c:	1a51      	subs	r1, r2, r1
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	4649      	mov	r1, r9
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003644:	4659      	mov	r1, fp
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	4651      	mov	r1, sl
 800364a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364e:	4651      	mov	r1, sl
 8003650:	018a      	lsls	r2, r1, #6
 8003652:	4651      	mov	r1, sl
 8003654:	1a54      	subs	r4, r2, r1
 8003656:	4659      	mov	r1, fp
 8003658:	eb63 0501 	sbc.w	r5, r3, r1
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	00eb      	lsls	r3, r5, #3
 8003666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366a:	00e2      	lsls	r2, r4, #3
 800366c:	4614      	mov	r4, r2
 800366e:	461d      	mov	r5, r3
 8003670:	4643      	mov	r3, r8
 8003672:	18e3      	adds	r3, r4, r3
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	464b      	mov	r3, r9
 8003678:	eb45 0303 	adc.w	r3, r5, r3
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800368a:	4629      	mov	r1, r5
 800368c:	028b      	lsls	r3, r1, #10
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003694:	4621      	mov	r1, r4
 8003696:	028a      	lsls	r2, r1, #10
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036a0:	2200      	movs	r2, #0
 80036a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036aa:	f7fd fb0d 	bl	8000cc8 <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4613      	mov	r3, r2
 80036b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0f1b      	lsrs	r3, r3, #28
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80036c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036d6:	e003      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80036da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	37b8      	adds	r7, #184	@ 0xb8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400

080036f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e28d      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8083 	beq.w	800381e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003718:	4b94      	ldr	r3, [pc, #592]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b04      	cmp	r3, #4
 8003722:	d019      	beq.n	8003758 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003724:	4b91      	ldr	r3, [pc, #580]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800372c:	2b08      	cmp	r3, #8
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003730:	4b8e      	ldr	r3, [pc, #568]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800373c:	d00c      	beq.n	8003758 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373e:	4b8b      	ldr	r3, [pc, #556]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d112      	bne.n	8003770 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003756:	d10b      	bne.n	8003770 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b84      	ldr	r3, [pc, #528]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05b      	beq.n	800381c <HAL_RCC_OscConfig+0x124>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d157      	bne.n	800381c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e25a      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x90>
 800377a:	4b7c      	ldr	r3, [pc, #496]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7b      	ldr	r2, [pc, #492]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0xcc>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0xb4>
 8003792:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a75      	ldr	r2, [pc, #468]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b73      	ldr	r3, [pc, #460]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a72      	ldr	r2, [pc, #456]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0xcc>
 80037ac:	4b6f      	ldr	r3, [pc, #444]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a6e      	ldr	r2, [pc, #440]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b6c      	ldr	r3, [pc, #432]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a6b      	ldr	r2, [pc, #428]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe f9a0 	bl	8001b10 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe f99c 	bl	8001b10 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	@ 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e21f      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b61      	ldr	r3, [pc, #388]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0xdc>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe f98c 	bl	8001b10 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fe f988 	bl	8001b10 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	@ 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e20b      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	4b57      	ldr	r3, [pc, #348]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x104>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d06f      	beq.n	800390a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800382a:	4b50      	ldr	r3, [pc, #320]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b00      	cmp	r3, #0
 8003834:	d017      	beq.n	8003866 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003836:	4b4d      	ldr	r3, [pc, #308]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800383e:	2b08      	cmp	r3, #8
 8003840:	d105      	bne.n	800384e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b44      	ldr	r3, [pc, #272]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x186>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1d3      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3b      	ldr	r3, [pc, #236]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4937      	ldr	r1, [pc, #220]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b34      	ldr	r3, [pc, #208]	@ (8003970 <HAL_RCC_OscConfig+0x278>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe f935 	bl	8001b10 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe f931 	bl	8001b10 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1b4      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4925      	ldr	r1, [pc, #148]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <HAL_RCC_OscConfig+0x278>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe f914 	bl	8001b10 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fe f910 	bl	8001b10 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e193      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d036      	beq.n	8003984 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <HAL_RCC_OscConfig+0x27c>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fe f8f4 	bl	8001b10 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe f8f0 	bl	8001b10 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e173      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x234>
 800394a:	e01b      	b.n	8003984 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_OscConfig+0x27c>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fe f8dd 	bl	8001b10 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e00e      	b.n	8003978 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe f8d9 	bl	8001b10 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d907      	bls.n	8003978 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e15c      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
 800396c:	40023800 	.word	0x40023800
 8003970:	42470000 	.word	0x42470000
 8003974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b8a      	ldr	r3, [pc, #552]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ea      	bne.n	800395a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8097 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b83      	ldr	r3, [pc, #524]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a7e      	ldr	r2, [pc, #504]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b79      	ldr	r3, [pc, #484]	@ (8003ba8 <HAL_RCC_OscConfig+0x4b0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b76      	ldr	r3, [pc, #472]	@ (8003ba8 <HAL_RCC_OscConfig+0x4b0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	@ (8003ba8 <HAL_RCC_OscConfig+0x4b0>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fe f899 	bl	8001b10 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fe f895 	bl	8001b10 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e118      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba8 <HAL_RCC_OscConfig+0x4b0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x31e>
 8003a08:	4b66      	ldr	r3, [pc, #408]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a65      	ldr	r2, [pc, #404]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x358>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x340>
 8003a1e:	4b61      	ldr	r3, [pc, #388]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a60      	ldr	r2, [pc, #384]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x358>
 8003a38:	4b5a      	ldr	r3, [pc, #360]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	4a59      	ldr	r2, [pc, #356]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a44:	4b57      	ldr	r3, [pc, #348]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a56      	ldr	r2, [pc, #344]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fe f85a 	bl	8001b10 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe f856 	bl	8001b10 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0d7      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b4b      	ldr	r3, [pc, #300]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x368>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fe f844 	bl	8001b10 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fe f840 	bl	8001b10 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0c1      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	4b40      	ldr	r3, [pc, #256]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ee      	bne.n	8003a8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80ad 	beq.w	8003c24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aca:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d060      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d145      	bne.n	8003b6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b33      	ldr	r3, [pc, #204]	@ (8003bac <HAL_RCC_OscConfig+0x4b4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f814 	bl	8001b10 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fe f810 	bl	8001b10 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e093      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b29      	ldr	r3, [pc, #164]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	3b01      	subs	r3, #1
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	491b      	ldr	r1, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_RCC_OscConfig+0x4b4>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd ffe5 	bl	8001b10 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fd ffe1 	bl	8001b10 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e064      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x452>
 8003b68:	e05c      	b.n	8003c24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <HAL_RCC_OscConfig+0x4b4>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd ffce 	bl	8001b10 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fd ffca 	bl	8001b10 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04d      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x480>
 8003b96:	e045      	b.n	8003c24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e040      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c30 <HAL_RCC_OscConfig+0x538>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d030      	beq.n	8003c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d129      	bne.n	8003c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d122      	bne.n	8003c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d119      	bne.n	8003c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d10f      	bne.n	8003c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800

08003c34 <__cvt>:
 8003c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	ec57 6b10 	vmov	r6, r7, d0
 8003c3c:	2f00      	cmp	r7, #0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4619      	mov	r1, r3
 8003c42:	463b      	mov	r3, r7
 8003c44:	bfbb      	ittet	lt
 8003c46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c4a:	461f      	movlt	r7, r3
 8003c4c:	2300      	movge	r3, #0
 8003c4e:	232d      	movlt	r3, #45	@ 0x2d
 8003c50:	700b      	strb	r3, [r1, #0]
 8003c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c58:	4691      	mov	r9, r2
 8003c5a:	f023 0820 	bic.w	r8, r3, #32
 8003c5e:	bfbc      	itt	lt
 8003c60:	4632      	movlt	r2, r6
 8003c62:	4616      	movlt	r6, r2
 8003c64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c68:	d005      	beq.n	8003c76 <__cvt+0x42>
 8003c6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c6e:	d100      	bne.n	8003c72 <__cvt+0x3e>
 8003c70:	3401      	adds	r4, #1
 8003c72:	2102      	movs	r1, #2
 8003c74:	e000      	b.n	8003c78 <__cvt+0x44>
 8003c76:	2103      	movs	r1, #3
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	ab02      	add	r3, sp, #8
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	ec47 6b10 	vmov	d0, r6, r7
 8003c84:	4653      	mov	r3, sl
 8003c86:	4622      	mov	r2, r4
 8003c88:	f001 f886 	bl	8004d98 <_dtoa_r>
 8003c8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c90:	4605      	mov	r5, r0
 8003c92:	d119      	bne.n	8003cc8 <__cvt+0x94>
 8003c94:	f019 0f01 	tst.w	r9, #1
 8003c98:	d00e      	beq.n	8003cb8 <__cvt+0x84>
 8003c9a:	eb00 0904 	add.w	r9, r0, r4
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	4639      	mov	r1, r7
 8003ca6:	f7fc ff2f 	bl	8000b08 <__aeabi_dcmpeq>
 8003caa:	b108      	cbz	r0, 8003cb0 <__cvt+0x7c>
 8003cac:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cb0:	2230      	movs	r2, #48	@ 0x30
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	454b      	cmp	r3, r9
 8003cb6:	d31e      	bcc.n	8003cf6 <__cvt+0xc2>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cbc:	1b5b      	subs	r3, r3, r5
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	b004      	add	sp, #16
 8003cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ccc:	eb00 0904 	add.w	r9, r0, r4
 8003cd0:	d1e5      	bne.n	8003c9e <__cvt+0x6a>
 8003cd2:	7803      	ldrb	r3, [r0, #0]
 8003cd4:	2b30      	cmp	r3, #48	@ 0x30
 8003cd6:	d10a      	bne.n	8003cee <__cvt+0xba>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2300      	movs	r3, #0
 8003cdc:	4630      	mov	r0, r6
 8003cde:	4639      	mov	r1, r7
 8003ce0:	f7fc ff12 	bl	8000b08 <__aeabi_dcmpeq>
 8003ce4:	b918      	cbnz	r0, 8003cee <__cvt+0xba>
 8003ce6:	f1c4 0401 	rsb	r4, r4, #1
 8003cea:	f8ca 4000 	str.w	r4, [sl]
 8003cee:	f8da 3000 	ldr.w	r3, [sl]
 8003cf2:	4499      	add	r9, r3
 8003cf4:	e7d3      	b.n	8003c9e <__cvt+0x6a>
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	9103      	str	r1, [sp, #12]
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e7d9      	b.n	8003cb2 <__cvt+0x7e>

08003cfe <__exponent>:
 8003cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d00:	2900      	cmp	r1, #0
 8003d02:	bfba      	itte	lt
 8003d04:	4249      	neglt	r1, r1
 8003d06:	232d      	movlt	r3, #45	@ 0x2d
 8003d08:	232b      	movge	r3, #43	@ 0x2b
 8003d0a:	2909      	cmp	r1, #9
 8003d0c:	7002      	strb	r2, [r0, #0]
 8003d0e:	7043      	strb	r3, [r0, #1]
 8003d10:	dd29      	ble.n	8003d66 <__exponent+0x68>
 8003d12:	f10d 0307 	add.w	r3, sp, #7
 8003d16:	461d      	mov	r5, r3
 8003d18:	270a      	movs	r7, #10
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d20:	fb07 1416 	mls	r4, r7, r6, r1
 8003d24:	3430      	adds	r4, #48	@ 0x30
 8003d26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	2c63      	cmp	r4, #99	@ 0x63
 8003d2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d32:	4631      	mov	r1, r6
 8003d34:	dcf1      	bgt.n	8003d1a <__exponent+0x1c>
 8003d36:	3130      	adds	r1, #48	@ 0x30
 8003d38:	1e94      	subs	r4, r2, #2
 8003d3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d3e:	1c41      	adds	r1, r0, #1
 8003d40:	4623      	mov	r3, r4
 8003d42:	42ab      	cmp	r3, r5
 8003d44:	d30a      	bcc.n	8003d5c <__exponent+0x5e>
 8003d46:	f10d 0309 	add.w	r3, sp, #9
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	42ac      	cmp	r4, r5
 8003d4e:	bf88      	it	hi
 8003d50:	2300      	movhi	r3, #0
 8003d52:	3302      	adds	r3, #2
 8003d54:	4403      	add	r3, r0
 8003d56:	1a18      	subs	r0, r3, r0
 8003d58:	b003      	add	sp, #12
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d64:	e7ed      	b.n	8003d42 <__exponent+0x44>
 8003d66:	2330      	movs	r3, #48	@ 0x30
 8003d68:	3130      	adds	r1, #48	@ 0x30
 8003d6a:	7083      	strb	r3, [r0, #2]
 8003d6c:	70c1      	strb	r1, [r0, #3]
 8003d6e:	1d03      	adds	r3, r0, #4
 8003d70:	e7f1      	b.n	8003d56 <__exponent+0x58>
	...

08003d74 <_printf_float>:
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	b08d      	sub	sp, #52	@ 0x34
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d80:	4616      	mov	r6, r2
 8003d82:	461f      	mov	r7, r3
 8003d84:	4605      	mov	r5, r0
 8003d86:	f000 ff01 	bl	8004b8c <_localeconv_r>
 8003d8a:	6803      	ldr	r3, [r0, #0]
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc fa8e 	bl	80002b0 <strlen>
 8003d94:	2300      	movs	r3, #0
 8003d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d98:	f8d8 3000 	ldr.w	r3, [r8]
 8003d9c:	9005      	str	r0, [sp, #20]
 8003d9e:	3307      	adds	r3, #7
 8003da0:	f023 0307 	bic.w	r3, r3, #7
 8003da4:	f103 0208 	add.w	r2, r3, #8
 8003da8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003dac:	f8d4 b000 	ldr.w	fp, [r4]
 8003db0:	f8c8 2000 	str.w	r2, [r8]
 8003db4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003db8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003dbc:	9307      	str	r3, [sp, #28]
 8003dbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dca:	4b9c      	ldr	r3, [pc, #624]	@ (800403c <_printf_float+0x2c8>)
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	f7fc fecc 	bl	8000b6c <__aeabi_dcmpun>
 8003dd4:	bb70      	cbnz	r0, 8003e34 <_printf_float+0xc0>
 8003dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dda:	4b98      	ldr	r3, [pc, #608]	@ (800403c <_printf_float+0x2c8>)
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	f7fc fea6 	bl	8000b30 <__aeabi_dcmple>
 8003de4:	bb30      	cbnz	r0, 8003e34 <_printf_float+0xc0>
 8003de6:	2200      	movs	r2, #0
 8003de8:	2300      	movs	r3, #0
 8003dea:	4640      	mov	r0, r8
 8003dec:	4649      	mov	r1, r9
 8003dee:	f7fc fe95 	bl	8000b1c <__aeabi_dcmplt>
 8003df2:	b110      	cbz	r0, 8003dfa <_printf_float+0x86>
 8003df4:	232d      	movs	r3, #45	@ 0x2d
 8003df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dfa:	4a91      	ldr	r2, [pc, #580]	@ (8004040 <_printf_float+0x2cc>)
 8003dfc:	4b91      	ldr	r3, [pc, #580]	@ (8004044 <_printf_float+0x2d0>)
 8003dfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e02:	bf94      	ite	ls
 8003e04:	4690      	movls	r8, r2
 8003e06:	4698      	movhi	r8, r3
 8003e08:	2303      	movs	r3, #3
 8003e0a:	6123      	str	r3, [r4, #16]
 8003e0c:	f02b 0304 	bic.w	r3, fp, #4
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	f04f 0900 	mov.w	r9, #0
 8003e16:	9700      	str	r7, [sp, #0]
 8003e18:	4633      	mov	r3, r6
 8003e1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 f9d2 	bl	80041c8 <_printf_common>
 8003e24:	3001      	adds	r0, #1
 8003e26:	f040 808d 	bne.w	8003f44 <_printf_float+0x1d0>
 8003e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2e:	b00d      	add	sp, #52	@ 0x34
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	f7fc fe96 	bl	8000b6c <__aeabi_dcmpun>
 8003e40:	b140      	cbz	r0, 8003e54 <_printf_float+0xe0>
 8003e42:	464b      	mov	r3, r9
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bfbc      	itt	lt
 8003e48:	232d      	movlt	r3, #45	@ 0x2d
 8003e4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8004048 <_printf_float+0x2d4>)
 8003e50:	4b7e      	ldr	r3, [pc, #504]	@ (800404c <_printf_float+0x2d8>)
 8003e52:	e7d4      	b.n	8003dfe <_printf_float+0x8a>
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e5a:	9206      	str	r2, [sp, #24]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	d13b      	bne.n	8003ed8 <_printf_float+0x164>
 8003e60:	2306      	movs	r3, #6
 8003e62:	6063      	str	r3, [r4, #4]
 8003e64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	9303      	str	r3, [sp, #12]
 8003e6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e74:	ab09      	add	r3, sp, #36	@ 0x24
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	6861      	ldr	r1, [r4, #4]
 8003e7a:	ec49 8b10 	vmov	d0, r8, r9
 8003e7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e82:	4628      	mov	r0, r5
 8003e84:	f7ff fed6 	bl	8003c34 <__cvt>
 8003e88:	9b06      	ldr	r3, [sp, #24]
 8003e8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e8c:	2b47      	cmp	r3, #71	@ 0x47
 8003e8e:	4680      	mov	r8, r0
 8003e90:	d129      	bne.n	8003ee6 <_printf_float+0x172>
 8003e92:	1cc8      	adds	r0, r1, #3
 8003e94:	db02      	blt.n	8003e9c <_printf_float+0x128>
 8003e96:	6863      	ldr	r3, [r4, #4]
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	dd41      	ble.n	8003f20 <_printf_float+0x1ac>
 8003e9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ea0:	fa5f fa8a 	uxtb.w	sl, sl
 8003ea4:	3901      	subs	r1, #1
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003eac:	9109      	str	r1, [sp, #36]	@ 0x24
 8003eae:	f7ff ff26 	bl	8003cfe <__exponent>
 8003eb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003eb4:	1813      	adds	r3, r2, r0
 8003eb6:	2a01      	cmp	r2, #1
 8003eb8:	4681      	mov	r9, r0
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	dc02      	bgt.n	8003ec4 <_printf_float+0x150>
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	07d2      	lsls	r2, r2, #31
 8003ec2:	d501      	bpl.n	8003ec8 <_printf_float+0x154>
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0a2      	beq.n	8003e16 <_printf_float+0xa2>
 8003ed0:	232d      	movs	r3, #45	@ 0x2d
 8003ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed6:	e79e      	b.n	8003e16 <_printf_float+0xa2>
 8003ed8:	9a06      	ldr	r2, [sp, #24]
 8003eda:	2a47      	cmp	r2, #71	@ 0x47
 8003edc:	d1c2      	bne.n	8003e64 <_printf_float+0xf0>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1c0      	bne.n	8003e64 <_printf_float+0xf0>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e7bd      	b.n	8003e62 <_printf_float+0xee>
 8003ee6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003eea:	d9db      	bls.n	8003ea4 <_printf_float+0x130>
 8003eec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ef0:	d118      	bne.n	8003f24 <_printf_float+0x1b0>
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	dd0b      	ble.n	8003f10 <_printf_float+0x19c>
 8003ef8:	6121      	str	r1, [r4, #16]
 8003efa:	b913      	cbnz	r3, 8003f02 <_printf_float+0x18e>
 8003efc:	6822      	ldr	r2, [r4, #0]
 8003efe:	07d0      	lsls	r0, r2, #31
 8003f00:	d502      	bpl.n	8003f08 <_printf_float+0x194>
 8003f02:	3301      	adds	r3, #1
 8003f04:	440b      	add	r3, r1
 8003f06:	6123      	str	r3, [r4, #16]
 8003f08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f0a:	f04f 0900 	mov.w	r9, #0
 8003f0e:	e7db      	b.n	8003ec8 <_printf_float+0x154>
 8003f10:	b913      	cbnz	r3, 8003f18 <_printf_float+0x1a4>
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	07d2      	lsls	r2, r2, #31
 8003f16:	d501      	bpl.n	8003f1c <_printf_float+0x1a8>
 8003f18:	3302      	adds	r3, #2
 8003f1a:	e7f4      	b.n	8003f06 <_printf_float+0x192>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e7f2      	b.n	8003f06 <_printf_float+0x192>
 8003f20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f26:	4299      	cmp	r1, r3
 8003f28:	db05      	blt.n	8003f36 <_printf_float+0x1c2>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	6121      	str	r1, [r4, #16]
 8003f2e:	07d8      	lsls	r0, r3, #31
 8003f30:	d5ea      	bpl.n	8003f08 <_printf_float+0x194>
 8003f32:	1c4b      	adds	r3, r1, #1
 8003f34:	e7e7      	b.n	8003f06 <_printf_float+0x192>
 8003f36:	2900      	cmp	r1, #0
 8003f38:	bfd4      	ite	le
 8003f3a:	f1c1 0202 	rsble	r2, r1, #2
 8003f3e:	2201      	movgt	r2, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	e7e0      	b.n	8003f06 <_printf_float+0x192>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	055a      	lsls	r2, r3, #21
 8003f48:	d407      	bmi.n	8003f5a <_printf_float+0x1e6>
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b8      	blx	r7
 8003f54:	3001      	adds	r0, #1
 8003f56:	d12b      	bne.n	8003fb0 <_printf_float+0x23c>
 8003f58:	e767      	b.n	8003e2a <_printf_float+0xb6>
 8003f5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f5e:	f240 80dd 	bls.w	800411c <_printf_float+0x3a8>
 8003f62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f66:	2200      	movs	r2, #0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f7fc fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d033      	beq.n	8003fda <_printf_float+0x266>
 8003f72:	4a37      	ldr	r2, [pc, #220]	@ (8004050 <_printf_float+0x2dc>)
 8003f74:	2301      	movs	r3, #1
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	f43f af54 	beq.w	8003e2a <_printf_float+0xb6>
 8003f82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f86:	4543      	cmp	r3, r8
 8003f88:	db02      	blt.n	8003f90 <_printf_float+0x21c>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	07d8      	lsls	r0, r3, #31
 8003f8e:	d50f      	bpl.n	8003fb0 <_printf_float+0x23c>
 8003f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f94:	4631      	mov	r1, r6
 8003f96:	4628      	mov	r0, r5
 8003f98:	47b8      	blx	r7
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	f43f af45 	beq.w	8003e2a <_printf_float+0xb6>
 8003fa0:	f04f 0900 	mov.w	r9, #0
 8003fa4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003fa8:	f104 0a1a 	add.w	sl, r4, #26
 8003fac:	45c8      	cmp	r8, r9
 8003fae:	dc09      	bgt.n	8003fc4 <_printf_float+0x250>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	079b      	lsls	r3, r3, #30
 8003fb4:	f100 8103 	bmi.w	80041be <_printf_float+0x44a>
 8003fb8:	68e0      	ldr	r0, [r4, #12]
 8003fba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fbc:	4298      	cmp	r0, r3
 8003fbe:	bfb8      	it	lt
 8003fc0:	4618      	movlt	r0, r3
 8003fc2:	e734      	b.n	8003e2e <_printf_float+0xba>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4652      	mov	r2, sl
 8003fc8:	4631      	mov	r1, r6
 8003fca:	4628      	mov	r0, r5
 8003fcc:	47b8      	blx	r7
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f43f af2b 	beq.w	8003e2a <_printf_float+0xb6>
 8003fd4:	f109 0901 	add.w	r9, r9, #1
 8003fd8:	e7e8      	b.n	8003fac <_printf_float+0x238>
 8003fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dc39      	bgt.n	8004054 <_printf_float+0x2e0>
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <_printf_float+0x2dc>)
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	f43f af1d 	beq.w	8003e2a <_printf_float+0xb6>
 8003ff0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003ff4:	ea59 0303 	orrs.w	r3, r9, r3
 8003ff8:	d102      	bne.n	8004000 <_printf_float+0x28c>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	07d9      	lsls	r1, r3, #31
 8003ffe:	d5d7      	bpl.n	8003fb0 <_printf_float+0x23c>
 8004000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004004:	4631      	mov	r1, r6
 8004006:	4628      	mov	r0, r5
 8004008:	47b8      	blx	r7
 800400a:	3001      	adds	r0, #1
 800400c:	f43f af0d 	beq.w	8003e2a <_printf_float+0xb6>
 8004010:	f04f 0a00 	mov.w	sl, #0
 8004014:	f104 0b1a 	add.w	fp, r4, #26
 8004018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800401a:	425b      	negs	r3, r3
 800401c:	4553      	cmp	r3, sl
 800401e:	dc01      	bgt.n	8004024 <_printf_float+0x2b0>
 8004020:	464b      	mov	r3, r9
 8004022:	e793      	b.n	8003f4c <_printf_float+0x1d8>
 8004024:	2301      	movs	r3, #1
 8004026:	465a      	mov	r2, fp
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	f43f aefb 	beq.w	8003e2a <_printf_float+0xb6>
 8004034:	f10a 0a01 	add.w	sl, sl, #1
 8004038:	e7ee      	b.n	8004018 <_printf_float+0x2a4>
 800403a:	bf00      	nop
 800403c:	7fefffff 	.word	0x7fefffff
 8004040:	08009240 	.word	0x08009240
 8004044:	08009244 	.word	0x08009244
 8004048:	08009248 	.word	0x08009248
 800404c:	0800924c 	.word	0x0800924c
 8004050:	08009250 	.word	0x08009250
 8004054:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004056:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800405a:	4553      	cmp	r3, sl
 800405c:	bfa8      	it	ge
 800405e:	4653      	movge	r3, sl
 8004060:	2b00      	cmp	r3, #0
 8004062:	4699      	mov	r9, r3
 8004064:	dc36      	bgt.n	80040d4 <_printf_float+0x360>
 8004066:	f04f 0b00 	mov.w	fp, #0
 800406a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800406e:	f104 021a 	add.w	r2, r4, #26
 8004072:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004074:	9306      	str	r3, [sp, #24]
 8004076:	eba3 0309 	sub.w	r3, r3, r9
 800407a:	455b      	cmp	r3, fp
 800407c:	dc31      	bgt.n	80040e2 <_printf_float+0x36e>
 800407e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004080:	459a      	cmp	sl, r3
 8004082:	dc3a      	bgt.n	80040fa <_printf_float+0x386>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	07da      	lsls	r2, r3, #31
 8004088:	d437      	bmi.n	80040fa <_printf_float+0x386>
 800408a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800408c:	ebaa 0903 	sub.w	r9, sl, r3
 8004090:	9b06      	ldr	r3, [sp, #24]
 8004092:	ebaa 0303 	sub.w	r3, sl, r3
 8004096:	4599      	cmp	r9, r3
 8004098:	bfa8      	it	ge
 800409a:	4699      	movge	r9, r3
 800409c:	f1b9 0f00 	cmp.w	r9, #0
 80040a0:	dc33      	bgt.n	800410a <_printf_float+0x396>
 80040a2:	f04f 0800 	mov.w	r8, #0
 80040a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040aa:	f104 0b1a 	add.w	fp, r4, #26
 80040ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b0:	ebaa 0303 	sub.w	r3, sl, r3
 80040b4:	eba3 0309 	sub.w	r3, r3, r9
 80040b8:	4543      	cmp	r3, r8
 80040ba:	f77f af79 	ble.w	8003fb0 <_printf_float+0x23c>
 80040be:	2301      	movs	r3, #1
 80040c0:	465a      	mov	r2, fp
 80040c2:	4631      	mov	r1, r6
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	f43f aeae 	beq.w	8003e2a <_printf_float+0xb6>
 80040ce:	f108 0801 	add.w	r8, r8, #1
 80040d2:	e7ec      	b.n	80040ae <_printf_float+0x33a>
 80040d4:	4642      	mov	r2, r8
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	d1c2      	bne.n	8004066 <_printf_float+0x2f2>
 80040e0:	e6a3      	b.n	8003e2a <_printf_float+0xb6>
 80040e2:	2301      	movs	r3, #1
 80040e4:	4631      	mov	r1, r6
 80040e6:	4628      	mov	r0, r5
 80040e8:	9206      	str	r2, [sp, #24]
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	f43f ae9c 	beq.w	8003e2a <_printf_float+0xb6>
 80040f2:	9a06      	ldr	r2, [sp, #24]
 80040f4:	f10b 0b01 	add.w	fp, fp, #1
 80040f8:	e7bb      	b.n	8004072 <_printf_float+0x2fe>
 80040fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040fe:	4631      	mov	r1, r6
 8004100:	4628      	mov	r0, r5
 8004102:	47b8      	blx	r7
 8004104:	3001      	adds	r0, #1
 8004106:	d1c0      	bne.n	800408a <_printf_float+0x316>
 8004108:	e68f      	b.n	8003e2a <_printf_float+0xb6>
 800410a:	9a06      	ldr	r2, [sp, #24]
 800410c:	464b      	mov	r3, r9
 800410e:	4442      	add	r2, r8
 8004110:	4631      	mov	r1, r6
 8004112:	4628      	mov	r0, r5
 8004114:	47b8      	blx	r7
 8004116:	3001      	adds	r0, #1
 8004118:	d1c3      	bne.n	80040a2 <_printf_float+0x32e>
 800411a:	e686      	b.n	8003e2a <_printf_float+0xb6>
 800411c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004120:	f1ba 0f01 	cmp.w	sl, #1
 8004124:	dc01      	bgt.n	800412a <_printf_float+0x3b6>
 8004126:	07db      	lsls	r3, r3, #31
 8004128:	d536      	bpl.n	8004198 <_printf_float+0x424>
 800412a:	2301      	movs	r3, #1
 800412c:	4642      	mov	r2, r8
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	f43f ae78 	beq.w	8003e2a <_printf_float+0xb6>
 800413a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	f43f ae70 	beq.w	8003e2a <_printf_float+0xb6>
 800414a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800414e:	2200      	movs	r2, #0
 8004150:	2300      	movs	r3, #0
 8004152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004156:	f7fc fcd7 	bl	8000b08 <__aeabi_dcmpeq>
 800415a:	b9c0      	cbnz	r0, 800418e <_printf_float+0x41a>
 800415c:	4653      	mov	r3, sl
 800415e:	f108 0201 	add.w	r2, r8, #1
 8004162:	4631      	mov	r1, r6
 8004164:	4628      	mov	r0, r5
 8004166:	47b8      	blx	r7
 8004168:	3001      	adds	r0, #1
 800416a:	d10c      	bne.n	8004186 <_printf_float+0x412>
 800416c:	e65d      	b.n	8003e2a <_printf_float+0xb6>
 800416e:	2301      	movs	r3, #1
 8004170:	465a      	mov	r2, fp
 8004172:	4631      	mov	r1, r6
 8004174:	4628      	mov	r0, r5
 8004176:	47b8      	blx	r7
 8004178:	3001      	adds	r0, #1
 800417a:	f43f ae56 	beq.w	8003e2a <_printf_float+0xb6>
 800417e:	f108 0801 	add.w	r8, r8, #1
 8004182:	45d0      	cmp	r8, sl
 8004184:	dbf3      	blt.n	800416e <_printf_float+0x3fa>
 8004186:	464b      	mov	r3, r9
 8004188:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800418c:	e6df      	b.n	8003f4e <_printf_float+0x1da>
 800418e:	f04f 0800 	mov.w	r8, #0
 8004192:	f104 0b1a 	add.w	fp, r4, #26
 8004196:	e7f4      	b.n	8004182 <_printf_float+0x40e>
 8004198:	2301      	movs	r3, #1
 800419a:	4642      	mov	r2, r8
 800419c:	e7e1      	b.n	8004162 <_printf_float+0x3ee>
 800419e:	2301      	movs	r3, #1
 80041a0:	464a      	mov	r2, r9
 80041a2:	4631      	mov	r1, r6
 80041a4:	4628      	mov	r0, r5
 80041a6:	47b8      	blx	r7
 80041a8:	3001      	adds	r0, #1
 80041aa:	f43f ae3e 	beq.w	8003e2a <_printf_float+0xb6>
 80041ae:	f108 0801 	add.w	r8, r8, #1
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041b6:	1a5b      	subs	r3, r3, r1
 80041b8:	4543      	cmp	r3, r8
 80041ba:	dcf0      	bgt.n	800419e <_printf_float+0x42a>
 80041bc:	e6fc      	b.n	8003fb8 <_printf_float+0x244>
 80041be:	f04f 0800 	mov.w	r8, #0
 80041c2:	f104 0919 	add.w	r9, r4, #25
 80041c6:	e7f4      	b.n	80041b2 <_printf_float+0x43e>

080041c8 <_printf_common>:
 80041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	4616      	mov	r6, r2
 80041ce:	4698      	mov	r8, r3
 80041d0:	688a      	ldr	r2, [r1, #8]
 80041d2:	690b      	ldr	r3, [r1, #16]
 80041d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041d8:	4293      	cmp	r3, r2
 80041da:	bfb8      	it	lt
 80041dc:	4613      	movlt	r3, r2
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041e4:	4607      	mov	r7, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	b10a      	cbz	r2, 80041ee <_printf_common+0x26>
 80041ea:	3301      	adds	r3, #1
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	0699      	lsls	r1, r3, #26
 80041f2:	bf42      	ittt	mi
 80041f4:	6833      	ldrmi	r3, [r6, #0]
 80041f6:	3302      	addmi	r3, #2
 80041f8:	6033      	strmi	r3, [r6, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	f015 0506 	ands.w	r5, r5, #6
 8004200:	d106      	bne.n	8004210 <_printf_common+0x48>
 8004202:	f104 0a19 	add.w	sl, r4, #25
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	6832      	ldr	r2, [r6, #0]
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	42ab      	cmp	r3, r5
 800420e:	dc26      	bgt.n	800425e <_printf_common+0x96>
 8004210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	3b00      	subs	r3, #0
 8004218:	bf18      	it	ne
 800421a:	2301      	movne	r3, #1
 800421c:	0692      	lsls	r2, r2, #26
 800421e:	d42b      	bmi.n	8004278 <_printf_common+0xb0>
 8004220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004224:	4641      	mov	r1, r8
 8004226:	4638      	mov	r0, r7
 8004228:	47c8      	blx	r9
 800422a:	3001      	adds	r0, #1
 800422c:	d01e      	beq.n	800426c <_printf_common+0xa4>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	6922      	ldr	r2, [r4, #16]
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf02      	ittt	eq
 800423a:	68e5      	ldreq	r5, [r4, #12]
 800423c:	6833      	ldreq	r3, [r6, #0]
 800423e:	1aed      	subeq	r5, r5, r3
 8004240:	68a3      	ldr	r3, [r4, #8]
 8004242:	bf0c      	ite	eq
 8004244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004248:	2500      	movne	r5, #0
 800424a:	4293      	cmp	r3, r2
 800424c:	bfc4      	itt	gt
 800424e:	1a9b      	subgt	r3, r3, r2
 8004250:	18ed      	addgt	r5, r5, r3
 8004252:	2600      	movs	r6, #0
 8004254:	341a      	adds	r4, #26
 8004256:	42b5      	cmp	r5, r6
 8004258:	d11a      	bne.n	8004290 <_printf_common+0xc8>
 800425a:	2000      	movs	r0, #0
 800425c:	e008      	b.n	8004270 <_printf_common+0xa8>
 800425e:	2301      	movs	r3, #1
 8004260:	4652      	mov	r2, sl
 8004262:	4641      	mov	r1, r8
 8004264:	4638      	mov	r0, r7
 8004266:	47c8      	blx	r9
 8004268:	3001      	adds	r0, #1
 800426a:	d103      	bne.n	8004274 <_printf_common+0xac>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	3501      	adds	r5, #1
 8004276:	e7c6      	b.n	8004206 <_printf_common+0x3e>
 8004278:	18e1      	adds	r1, r4, r3
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	2030      	movs	r0, #48	@ 0x30
 800427e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004282:	4422      	add	r2, r4
 8004284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800428c:	3302      	adds	r3, #2
 800428e:	e7c7      	b.n	8004220 <_printf_common+0x58>
 8004290:	2301      	movs	r3, #1
 8004292:	4622      	mov	r2, r4
 8004294:	4641      	mov	r1, r8
 8004296:	4638      	mov	r0, r7
 8004298:	47c8      	blx	r9
 800429a:	3001      	adds	r0, #1
 800429c:	d0e6      	beq.n	800426c <_printf_common+0xa4>
 800429e:	3601      	adds	r6, #1
 80042a0:	e7d9      	b.n	8004256 <_printf_common+0x8e>
	...

080042a4 <_printf_i>:
 80042a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	7e0f      	ldrb	r7, [r1, #24]
 80042aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042ac:	2f78      	cmp	r7, #120	@ 0x78
 80042ae:	4691      	mov	r9, r2
 80042b0:	4680      	mov	r8, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	469a      	mov	sl, r3
 80042b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042ba:	d807      	bhi.n	80042cc <_printf_i+0x28>
 80042bc:	2f62      	cmp	r7, #98	@ 0x62
 80042be:	d80a      	bhi.n	80042d6 <_printf_i+0x32>
 80042c0:	2f00      	cmp	r7, #0
 80042c2:	f000 80d2 	beq.w	800446a <_printf_i+0x1c6>
 80042c6:	2f58      	cmp	r7, #88	@ 0x58
 80042c8:	f000 80b9 	beq.w	800443e <_printf_i+0x19a>
 80042cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042d4:	e03a      	b.n	800434c <_printf_i+0xa8>
 80042d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042da:	2b15      	cmp	r3, #21
 80042dc:	d8f6      	bhi.n	80042cc <_printf_i+0x28>
 80042de:	a101      	add	r1, pc, #4	@ (adr r1, 80042e4 <_printf_i+0x40>)
 80042e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042e4:	0800433d 	.word	0x0800433d
 80042e8:	08004351 	.word	0x08004351
 80042ec:	080042cd 	.word	0x080042cd
 80042f0:	080042cd 	.word	0x080042cd
 80042f4:	080042cd 	.word	0x080042cd
 80042f8:	080042cd 	.word	0x080042cd
 80042fc:	08004351 	.word	0x08004351
 8004300:	080042cd 	.word	0x080042cd
 8004304:	080042cd 	.word	0x080042cd
 8004308:	080042cd 	.word	0x080042cd
 800430c:	080042cd 	.word	0x080042cd
 8004310:	08004451 	.word	0x08004451
 8004314:	0800437b 	.word	0x0800437b
 8004318:	0800440b 	.word	0x0800440b
 800431c:	080042cd 	.word	0x080042cd
 8004320:	080042cd 	.word	0x080042cd
 8004324:	08004473 	.word	0x08004473
 8004328:	080042cd 	.word	0x080042cd
 800432c:	0800437b 	.word	0x0800437b
 8004330:	080042cd 	.word	0x080042cd
 8004334:	080042cd 	.word	0x080042cd
 8004338:	08004413 	.word	0x08004413
 800433c:	6833      	ldr	r3, [r6, #0]
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6032      	str	r2, [r6, #0]
 8004344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800434c:	2301      	movs	r3, #1
 800434e:	e09d      	b.n	800448c <_printf_i+0x1e8>
 8004350:	6833      	ldr	r3, [r6, #0]
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	6031      	str	r1, [r6, #0]
 8004358:	0606      	lsls	r6, r0, #24
 800435a:	d501      	bpl.n	8004360 <_printf_i+0xbc>
 800435c:	681d      	ldr	r5, [r3, #0]
 800435e:	e003      	b.n	8004368 <_printf_i+0xc4>
 8004360:	0645      	lsls	r5, r0, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0xb8>
 8004364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004368:	2d00      	cmp	r5, #0
 800436a:	da03      	bge.n	8004374 <_printf_i+0xd0>
 800436c:	232d      	movs	r3, #45	@ 0x2d
 800436e:	426d      	negs	r5, r5
 8004370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004374:	4859      	ldr	r0, [pc, #356]	@ (80044dc <_printf_i+0x238>)
 8004376:	230a      	movs	r3, #10
 8004378:	e011      	b.n	800439e <_printf_i+0xfa>
 800437a:	6821      	ldr	r1, [r4, #0]
 800437c:	6833      	ldr	r3, [r6, #0]
 800437e:	0608      	lsls	r0, r1, #24
 8004380:	f853 5b04 	ldr.w	r5, [r3], #4
 8004384:	d402      	bmi.n	800438c <_printf_i+0xe8>
 8004386:	0649      	lsls	r1, r1, #25
 8004388:	bf48      	it	mi
 800438a:	b2ad      	uxthmi	r5, r5
 800438c:	2f6f      	cmp	r7, #111	@ 0x6f
 800438e:	4853      	ldr	r0, [pc, #332]	@ (80044dc <_printf_i+0x238>)
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	bf14      	ite	ne
 8004394:	230a      	movne	r3, #10
 8004396:	2308      	moveq	r3, #8
 8004398:	2100      	movs	r1, #0
 800439a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800439e:	6866      	ldr	r6, [r4, #4]
 80043a0:	60a6      	str	r6, [r4, #8]
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	bfa2      	ittt	ge
 80043a6:	6821      	ldrge	r1, [r4, #0]
 80043a8:	f021 0104 	bicge.w	r1, r1, #4
 80043ac:	6021      	strge	r1, [r4, #0]
 80043ae:	b90d      	cbnz	r5, 80043b4 <_printf_i+0x110>
 80043b0:	2e00      	cmp	r6, #0
 80043b2:	d04b      	beq.n	800444c <_printf_i+0x1a8>
 80043b4:	4616      	mov	r6, r2
 80043b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ba:	fb03 5711 	mls	r7, r3, r1, r5
 80043be:	5dc7      	ldrb	r7, [r0, r7]
 80043c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043c4:	462f      	mov	r7, r5
 80043c6:	42bb      	cmp	r3, r7
 80043c8:	460d      	mov	r5, r1
 80043ca:	d9f4      	bls.n	80043b6 <_printf_i+0x112>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d10b      	bne.n	80043e8 <_printf_i+0x144>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	07df      	lsls	r7, r3, #31
 80043d4:	d508      	bpl.n	80043e8 <_printf_i+0x144>
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	6861      	ldr	r1, [r4, #4]
 80043da:	4299      	cmp	r1, r3
 80043dc:	bfde      	ittt	le
 80043de:	2330      	movle	r3, #48	@ 0x30
 80043e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043e8:	1b92      	subs	r2, r2, r6
 80043ea:	6122      	str	r2, [r4, #16]
 80043ec:	f8cd a000 	str.w	sl, [sp]
 80043f0:	464b      	mov	r3, r9
 80043f2:	aa03      	add	r2, sp, #12
 80043f4:	4621      	mov	r1, r4
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7ff fee6 	bl	80041c8 <_printf_common>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d14a      	bne.n	8004496 <_printf_i+0x1f2>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	b004      	add	sp, #16
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f043 0320 	orr.w	r3, r3, #32
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	4833      	ldr	r0, [pc, #204]	@ (80044e0 <_printf_i+0x23c>)
 8004414:	2778      	movs	r7, #120	@ 0x78
 8004416:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	6831      	ldr	r1, [r6, #0]
 800441e:	061f      	lsls	r7, r3, #24
 8004420:	f851 5b04 	ldr.w	r5, [r1], #4
 8004424:	d402      	bmi.n	800442c <_printf_i+0x188>
 8004426:	065f      	lsls	r7, r3, #25
 8004428:	bf48      	it	mi
 800442a:	b2ad      	uxthmi	r5, r5
 800442c:	6031      	str	r1, [r6, #0]
 800442e:	07d9      	lsls	r1, r3, #31
 8004430:	bf44      	itt	mi
 8004432:	f043 0320 	orrmi.w	r3, r3, #32
 8004436:	6023      	strmi	r3, [r4, #0]
 8004438:	b11d      	cbz	r5, 8004442 <_printf_i+0x19e>
 800443a:	2310      	movs	r3, #16
 800443c:	e7ac      	b.n	8004398 <_printf_i+0xf4>
 800443e:	4827      	ldr	r0, [pc, #156]	@ (80044dc <_printf_i+0x238>)
 8004440:	e7e9      	b.n	8004416 <_printf_i+0x172>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	f023 0320 	bic.w	r3, r3, #32
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	e7f6      	b.n	800443a <_printf_i+0x196>
 800444c:	4616      	mov	r6, r2
 800444e:	e7bd      	b.n	80043cc <_printf_i+0x128>
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	6825      	ldr	r5, [r4, #0]
 8004454:	6961      	ldr	r1, [r4, #20]
 8004456:	1d18      	adds	r0, r3, #4
 8004458:	6030      	str	r0, [r6, #0]
 800445a:	062e      	lsls	r6, r5, #24
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	d501      	bpl.n	8004464 <_printf_i+0x1c0>
 8004460:	6019      	str	r1, [r3, #0]
 8004462:	e002      	b.n	800446a <_printf_i+0x1c6>
 8004464:	0668      	lsls	r0, r5, #25
 8004466:	d5fb      	bpl.n	8004460 <_printf_i+0x1bc>
 8004468:	8019      	strh	r1, [r3, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	4616      	mov	r6, r2
 8004470:	e7bc      	b.n	80043ec <_printf_i+0x148>
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	6032      	str	r2, [r6, #0]
 8004478:	681e      	ldr	r6, [r3, #0]
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	2100      	movs	r1, #0
 800447e:	4630      	mov	r0, r6
 8004480:	f7fb fec6 	bl	8000210 <memchr>
 8004484:	b108      	cbz	r0, 800448a <_printf_i+0x1e6>
 8004486:	1b80      	subs	r0, r0, r6
 8004488:	6060      	str	r0, [r4, #4]
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	2300      	movs	r3, #0
 8004490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004494:	e7aa      	b.n	80043ec <_printf_i+0x148>
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	4632      	mov	r2, r6
 800449a:	4649      	mov	r1, r9
 800449c:	4640      	mov	r0, r8
 800449e:	47d0      	blx	sl
 80044a0:	3001      	adds	r0, #1
 80044a2:	d0ad      	beq.n	8004400 <_printf_i+0x15c>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	079b      	lsls	r3, r3, #30
 80044a8:	d413      	bmi.n	80044d2 <_printf_i+0x22e>
 80044aa:	68e0      	ldr	r0, [r4, #12]
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	4298      	cmp	r0, r3
 80044b0:	bfb8      	it	lt
 80044b2:	4618      	movlt	r0, r3
 80044b4:	e7a6      	b.n	8004404 <_printf_i+0x160>
 80044b6:	2301      	movs	r3, #1
 80044b8:	4632      	mov	r2, r6
 80044ba:	4649      	mov	r1, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	47d0      	blx	sl
 80044c0:	3001      	adds	r0, #1
 80044c2:	d09d      	beq.n	8004400 <_printf_i+0x15c>
 80044c4:	3501      	adds	r5, #1
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	9903      	ldr	r1, [sp, #12]
 80044ca:	1a5b      	subs	r3, r3, r1
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dcf2      	bgt.n	80044b6 <_printf_i+0x212>
 80044d0:	e7eb      	b.n	80044aa <_printf_i+0x206>
 80044d2:	2500      	movs	r5, #0
 80044d4:	f104 0619 	add.w	r6, r4, #25
 80044d8:	e7f5      	b.n	80044c6 <_printf_i+0x222>
 80044da:	bf00      	nop
 80044dc:	08009252 	.word	0x08009252
 80044e0:	08009263 	.word	0x08009263

080044e4 <_scanf_float>:
 80044e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e8:	b087      	sub	sp, #28
 80044ea:	4617      	mov	r7, r2
 80044ec:	9303      	str	r3, [sp, #12]
 80044ee:	688b      	ldr	r3, [r1, #8]
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80044f6:	bf81      	itttt	hi
 80044f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80044fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8004500:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004504:	608b      	strhi	r3, [r1, #8]
 8004506:	680b      	ldr	r3, [r1, #0]
 8004508:	460a      	mov	r2, r1
 800450a:	f04f 0500 	mov.w	r5, #0
 800450e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004512:	f842 3b1c 	str.w	r3, [r2], #28
 8004516:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800451a:	4680      	mov	r8, r0
 800451c:	460c      	mov	r4, r1
 800451e:	bf98      	it	ls
 8004520:	f04f 0b00 	movls.w	fp, #0
 8004524:	9201      	str	r2, [sp, #4]
 8004526:	4616      	mov	r6, r2
 8004528:	46aa      	mov	sl, r5
 800452a:	46a9      	mov	r9, r5
 800452c:	9502      	str	r5, [sp, #8]
 800452e:	68a2      	ldr	r2, [r4, #8]
 8004530:	b152      	cbz	r2, 8004548 <_scanf_float+0x64>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b4e      	cmp	r3, #78	@ 0x4e
 8004538:	d864      	bhi.n	8004604 <_scanf_float+0x120>
 800453a:	2b40      	cmp	r3, #64	@ 0x40
 800453c:	d83c      	bhi.n	80045b8 <_scanf_float+0xd4>
 800453e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004542:	b2c8      	uxtb	r0, r1
 8004544:	280e      	cmp	r0, #14
 8004546:	d93a      	bls.n	80045be <_scanf_float+0xda>
 8004548:	f1b9 0f00 	cmp.w	r9, #0
 800454c:	d003      	beq.n	8004556 <_scanf_float+0x72>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800455a:	f1ba 0f01 	cmp.w	sl, #1
 800455e:	f200 8117 	bhi.w	8004790 <_scanf_float+0x2ac>
 8004562:	9b01      	ldr	r3, [sp, #4]
 8004564:	429e      	cmp	r6, r3
 8004566:	f200 8108 	bhi.w	800477a <_scanf_float+0x296>
 800456a:	2001      	movs	r0, #1
 800456c:	b007      	add	sp, #28
 800456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004572:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004576:	2a0d      	cmp	r2, #13
 8004578:	d8e6      	bhi.n	8004548 <_scanf_float+0x64>
 800457a:	a101      	add	r1, pc, #4	@ (adr r1, 8004580 <_scanf_float+0x9c>)
 800457c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004580:	080046c7 	.word	0x080046c7
 8004584:	08004549 	.word	0x08004549
 8004588:	08004549 	.word	0x08004549
 800458c:	08004549 	.word	0x08004549
 8004590:	08004727 	.word	0x08004727
 8004594:	080046ff 	.word	0x080046ff
 8004598:	08004549 	.word	0x08004549
 800459c:	08004549 	.word	0x08004549
 80045a0:	080046d5 	.word	0x080046d5
 80045a4:	08004549 	.word	0x08004549
 80045a8:	08004549 	.word	0x08004549
 80045ac:	08004549 	.word	0x08004549
 80045b0:	08004549 	.word	0x08004549
 80045b4:	0800468d 	.word	0x0800468d
 80045b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80045bc:	e7db      	b.n	8004576 <_scanf_float+0x92>
 80045be:	290e      	cmp	r1, #14
 80045c0:	d8c2      	bhi.n	8004548 <_scanf_float+0x64>
 80045c2:	a001      	add	r0, pc, #4	@ (adr r0, 80045c8 <_scanf_float+0xe4>)
 80045c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80045c8:	0800467d 	.word	0x0800467d
 80045cc:	08004549 	.word	0x08004549
 80045d0:	0800467d 	.word	0x0800467d
 80045d4:	08004713 	.word	0x08004713
 80045d8:	08004549 	.word	0x08004549
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004663 	.word	0x08004663
 80045e4:	08004663 	.word	0x08004663
 80045e8:	08004663 	.word	0x08004663
 80045ec:	08004663 	.word	0x08004663
 80045f0:	08004663 	.word	0x08004663
 80045f4:	08004663 	.word	0x08004663
 80045f8:	08004663 	.word	0x08004663
 80045fc:	08004663 	.word	0x08004663
 8004600:	08004663 	.word	0x08004663
 8004604:	2b6e      	cmp	r3, #110	@ 0x6e
 8004606:	d809      	bhi.n	800461c <_scanf_float+0x138>
 8004608:	2b60      	cmp	r3, #96	@ 0x60
 800460a:	d8b2      	bhi.n	8004572 <_scanf_float+0x8e>
 800460c:	2b54      	cmp	r3, #84	@ 0x54
 800460e:	d07b      	beq.n	8004708 <_scanf_float+0x224>
 8004610:	2b59      	cmp	r3, #89	@ 0x59
 8004612:	d199      	bne.n	8004548 <_scanf_float+0x64>
 8004614:	2d07      	cmp	r5, #7
 8004616:	d197      	bne.n	8004548 <_scanf_float+0x64>
 8004618:	2508      	movs	r5, #8
 800461a:	e02c      	b.n	8004676 <_scanf_float+0x192>
 800461c:	2b74      	cmp	r3, #116	@ 0x74
 800461e:	d073      	beq.n	8004708 <_scanf_float+0x224>
 8004620:	2b79      	cmp	r3, #121	@ 0x79
 8004622:	e7f6      	b.n	8004612 <_scanf_float+0x12e>
 8004624:	6821      	ldr	r1, [r4, #0]
 8004626:	05c8      	lsls	r0, r1, #23
 8004628:	d51b      	bpl.n	8004662 <_scanf_float+0x17e>
 800462a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800462e:	6021      	str	r1, [r4, #0]
 8004630:	f109 0901 	add.w	r9, r9, #1
 8004634:	f1bb 0f00 	cmp.w	fp, #0
 8004638:	d003      	beq.n	8004642 <_scanf_float+0x15e>
 800463a:	3201      	adds	r2, #1
 800463c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004640:	60a2      	str	r2, [r4, #8]
 8004642:	68a3      	ldr	r3, [r4, #8]
 8004644:	3b01      	subs	r3, #1
 8004646:	60a3      	str	r3, [r4, #8]
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	3301      	adds	r3, #1
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3b01      	subs	r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	f340 8087 	ble.w	8004768 <_scanf_float+0x284>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	e765      	b.n	800452e <_scanf_float+0x4a>
 8004662:	eb1a 0105 	adds.w	r1, sl, r5
 8004666:	f47f af6f 	bne.w	8004548 <_scanf_float+0x64>
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004670:	6022      	str	r2, [r4, #0]
 8004672:	460d      	mov	r5, r1
 8004674:	468a      	mov	sl, r1
 8004676:	f806 3b01 	strb.w	r3, [r6], #1
 800467a:	e7e2      	b.n	8004642 <_scanf_float+0x15e>
 800467c:	6822      	ldr	r2, [r4, #0]
 800467e:	0610      	lsls	r0, r2, #24
 8004680:	f57f af62 	bpl.w	8004548 <_scanf_float+0x64>
 8004684:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004688:	6022      	str	r2, [r4, #0]
 800468a:	e7f4      	b.n	8004676 <_scanf_float+0x192>
 800468c:	f1ba 0f00 	cmp.w	sl, #0
 8004690:	d10e      	bne.n	80046b0 <_scanf_float+0x1cc>
 8004692:	f1b9 0f00 	cmp.w	r9, #0
 8004696:	d10e      	bne.n	80046b6 <_scanf_float+0x1d2>
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800469e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80046a2:	d108      	bne.n	80046b6 <_scanf_float+0x1d2>
 80046a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80046a8:	6022      	str	r2, [r4, #0]
 80046aa:	f04f 0a01 	mov.w	sl, #1
 80046ae:	e7e2      	b.n	8004676 <_scanf_float+0x192>
 80046b0:	f1ba 0f02 	cmp.w	sl, #2
 80046b4:	d055      	beq.n	8004762 <_scanf_float+0x27e>
 80046b6:	2d01      	cmp	r5, #1
 80046b8:	d002      	beq.n	80046c0 <_scanf_float+0x1dc>
 80046ba:	2d04      	cmp	r5, #4
 80046bc:	f47f af44 	bne.w	8004548 <_scanf_float+0x64>
 80046c0:	3501      	adds	r5, #1
 80046c2:	b2ed      	uxtb	r5, r5
 80046c4:	e7d7      	b.n	8004676 <_scanf_float+0x192>
 80046c6:	f1ba 0f01 	cmp.w	sl, #1
 80046ca:	f47f af3d 	bne.w	8004548 <_scanf_float+0x64>
 80046ce:	f04f 0a02 	mov.w	sl, #2
 80046d2:	e7d0      	b.n	8004676 <_scanf_float+0x192>
 80046d4:	b97d      	cbnz	r5, 80046f6 <_scanf_float+0x212>
 80046d6:	f1b9 0f00 	cmp.w	r9, #0
 80046da:	f47f af38 	bne.w	800454e <_scanf_float+0x6a>
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80046e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80046e8:	f040 8108 	bne.w	80048fc <_scanf_float+0x418>
 80046ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80046f0:	6022      	str	r2, [r4, #0]
 80046f2:	2501      	movs	r5, #1
 80046f4:	e7bf      	b.n	8004676 <_scanf_float+0x192>
 80046f6:	2d03      	cmp	r5, #3
 80046f8:	d0e2      	beq.n	80046c0 <_scanf_float+0x1dc>
 80046fa:	2d05      	cmp	r5, #5
 80046fc:	e7de      	b.n	80046bc <_scanf_float+0x1d8>
 80046fe:	2d02      	cmp	r5, #2
 8004700:	f47f af22 	bne.w	8004548 <_scanf_float+0x64>
 8004704:	2503      	movs	r5, #3
 8004706:	e7b6      	b.n	8004676 <_scanf_float+0x192>
 8004708:	2d06      	cmp	r5, #6
 800470a:	f47f af1d 	bne.w	8004548 <_scanf_float+0x64>
 800470e:	2507      	movs	r5, #7
 8004710:	e7b1      	b.n	8004676 <_scanf_float+0x192>
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	0591      	lsls	r1, r2, #22
 8004716:	f57f af17 	bpl.w	8004548 <_scanf_float+0x64>
 800471a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800471e:	6022      	str	r2, [r4, #0]
 8004720:	f8cd 9008 	str.w	r9, [sp, #8]
 8004724:	e7a7      	b.n	8004676 <_scanf_float+0x192>
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800472c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004730:	d006      	beq.n	8004740 <_scanf_float+0x25c>
 8004732:	0550      	lsls	r0, r2, #21
 8004734:	f57f af08 	bpl.w	8004548 <_scanf_float+0x64>
 8004738:	f1b9 0f00 	cmp.w	r9, #0
 800473c:	f000 80de 	beq.w	80048fc <_scanf_float+0x418>
 8004740:	0591      	lsls	r1, r2, #22
 8004742:	bf58      	it	pl
 8004744:	9902      	ldrpl	r1, [sp, #8]
 8004746:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800474a:	bf58      	it	pl
 800474c:	eba9 0101 	subpl.w	r1, r9, r1
 8004750:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004754:	bf58      	it	pl
 8004756:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800475a:	6022      	str	r2, [r4, #0]
 800475c:	f04f 0900 	mov.w	r9, #0
 8004760:	e789      	b.n	8004676 <_scanf_float+0x192>
 8004762:	f04f 0a03 	mov.w	sl, #3
 8004766:	e786      	b.n	8004676 <_scanf_float+0x192>
 8004768:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800476c:	4639      	mov	r1, r7
 800476e:	4640      	mov	r0, r8
 8004770:	4798      	blx	r3
 8004772:	2800      	cmp	r0, #0
 8004774:	f43f aedb 	beq.w	800452e <_scanf_float+0x4a>
 8004778:	e6e6      	b.n	8004548 <_scanf_float+0x64>
 800477a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800477e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004782:	463a      	mov	r2, r7
 8004784:	4640      	mov	r0, r8
 8004786:	4798      	blx	r3
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	3b01      	subs	r3, #1
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	e6e8      	b.n	8004562 <_scanf_float+0x7e>
 8004790:	1e6b      	subs	r3, r5, #1
 8004792:	2b06      	cmp	r3, #6
 8004794:	d824      	bhi.n	80047e0 <_scanf_float+0x2fc>
 8004796:	2d02      	cmp	r5, #2
 8004798:	d836      	bhi.n	8004808 <_scanf_float+0x324>
 800479a:	9b01      	ldr	r3, [sp, #4]
 800479c:	429e      	cmp	r6, r3
 800479e:	f67f aee4 	bls.w	800456a <_scanf_float+0x86>
 80047a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047aa:	463a      	mov	r2, r7
 80047ac:	4640      	mov	r0, r8
 80047ae:	4798      	blx	r3
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	6123      	str	r3, [r4, #16]
 80047b6:	e7f0      	b.n	800479a <_scanf_float+0x2b6>
 80047b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80047c0:	463a      	mov	r2, r7
 80047c2:	4640      	mov	r0, r8
 80047c4:	4798      	blx	r3
 80047c6:	6923      	ldr	r3, [r4, #16]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	6123      	str	r3, [r4, #16]
 80047cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047d0:	fa5f fa8a 	uxtb.w	sl, sl
 80047d4:	f1ba 0f02 	cmp.w	sl, #2
 80047d8:	d1ee      	bne.n	80047b8 <_scanf_float+0x2d4>
 80047da:	3d03      	subs	r5, #3
 80047dc:	b2ed      	uxtb	r5, r5
 80047de:	1b76      	subs	r6, r6, r5
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	05da      	lsls	r2, r3, #23
 80047e4:	d530      	bpl.n	8004848 <_scanf_float+0x364>
 80047e6:	055b      	lsls	r3, r3, #21
 80047e8:	d511      	bpl.n	800480e <_scanf_float+0x32a>
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	429e      	cmp	r6, r3
 80047ee:	f67f aebc 	bls.w	800456a <_scanf_float+0x86>
 80047f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047fa:	463a      	mov	r2, r7
 80047fc:	4640      	mov	r0, r8
 80047fe:	4798      	blx	r3
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	3b01      	subs	r3, #1
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	e7f0      	b.n	80047ea <_scanf_float+0x306>
 8004808:	46aa      	mov	sl, r5
 800480a:	46b3      	mov	fp, r6
 800480c:	e7de      	b.n	80047cc <_scanf_float+0x2e8>
 800480e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	2965      	cmp	r1, #101	@ 0x65
 8004816:	f103 33ff 	add.w	r3, r3, #4294967295
 800481a:	f106 35ff 	add.w	r5, r6, #4294967295
 800481e:	6123      	str	r3, [r4, #16]
 8004820:	d00c      	beq.n	800483c <_scanf_float+0x358>
 8004822:	2945      	cmp	r1, #69	@ 0x45
 8004824:	d00a      	beq.n	800483c <_scanf_float+0x358>
 8004826:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800482a:	463a      	mov	r2, r7
 800482c:	4640      	mov	r0, r8
 800482e:	4798      	blx	r3
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004836:	3b01      	subs	r3, #1
 8004838:	1eb5      	subs	r5, r6, #2
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004840:	463a      	mov	r2, r7
 8004842:	4640      	mov	r0, r8
 8004844:	4798      	blx	r3
 8004846:	462e      	mov	r6, r5
 8004848:	6822      	ldr	r2, [r4, #0]
 800484a:	f012 0210 	ands.w	r2, r2, #16
 800484e:	d001      	beq.n	8004854 <_scanf_float+0x370>
 8004850:	2000      	movs	r0, #0
 8004852:	e68b      	b.n	800456c <_scanf_float+0x88>
 8004854:	7032      	strb	r2, [r6, #0]
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004860:	d11c      	bne.n	800489c <_scanf_float+0x3b8>
 8004862:	9b02      	ldr	r3, [sp, #8]
 8004864:	454b      	cmp	r3, r9
 8004866:	eba3 0209 	sub.w	r2, r3, r9
 800486a:	d123      	bne.n	80048b4 <_scanf_float+0x3d0>
 800486c:	9901      	ldr	r1, [sp, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	4640      	mov	r0, r8
 8004872:	f002 fc09 	bl	8007088 <_strtod_r>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	6821      	ldr	r1, [r4, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f011 0f02 	tst.w	r1, #2
 8004880:	ec57 6b10 	vmov	r6, r7, d0
 8004884:	f103 0204 	add.w	r2, r3, #4
 8004888:	d01f      	beq.n	80048ca <_scanf_float+0x3e6>
 800488a:	9903      	ldr	r1, [sp, #12]
 800488c:	600a      	str	r2, [r1, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	e9c3 6700 	strd	r6, r7, [r3]
 8004894:	68e3      	ldr	r3, [r4, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60e3      	str	r3, [r4, #12]
 800489a:	e7d9      	b.n	8004850 <_scanf_float+0x36c>
 800489c:	9b04      	ldr	r3, [sp, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0e4      	beq.n	800486c <_scanf_float+0x388>
 80048a2:	9905      	ldr	r1, [sp, #20]
 80048a4:	230a      	movs	r3, #10
 80048a6:	3101      	adds	r1, #1
 80048a8:	4640      	mov	r0, r8
 80048aa:	f002 fc6d 	bl	8007188 <_strtol_r>
 80048ae:	9b04      	ldr	r3, [sp, #16]
 80048b0:	9e05      	ldr	r6, [sp, #20]
 80048b2:	1ac2      	subs	r2, r0, r3
 80048b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80048b8:	429e      	cmp	r6, r3
 80048ba:	bf28      	it	cs
 80048bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80048c0:	4910      	ldr	r1, [pc, #64]	@ (8004904 <_scanf_float+0x420>)
 80048c2:	4630      	mov	r0, r6
 80048c4:	f000 f8f6 	bl	8004ab4 <siprintf>
 80048c8:	e7d0      	b.n	800486c <_scanf_float+0x388>
 80048ca:	f011 0f04 	tst.w	r1, #4
 80048ce:	9903      	ldr	r1, [sp, #12]
 80048d0:	600a      	str	r2, [r1, #0]
 80048d2:	d1dc      	bne.n	800488e <_scanf_float+0x3aa>
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	4632      	mov	r2, r6
 80048d8:	463b      	mov	r3, r7
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fc f945 	bl	8000b6c <__aeabi_dcmpun>
 80048e2:	b128      	cbz	r0, 80048f0 <_scanf_float+0x40c>
 80048e4:	4808      	ldr	r0, [pc, #32]	@ (8004908 <_scanf_float+0x424>)
 80048e6:	f000 f9c9 	bl	8004c7c <nanf>
 80048ea:	ed85 0a00 	vstr	s0, [r5]
 80048ee:	e7d1      	b.n	8004894 <_scanf_float+0x3b0>
 80048f0:	4630      	mov	r0, r6
 80048f2:	4639      	mov	r1, r7
 80048f4:	f7fc f998 	bl	8000c28 <__aeabi_d2f>
 80048f8:	6028      	str	r0, [r5, #0]
 80048fa:	e7cb      	b.n	8004894 <_scanf_float+0x3b0>
 80048fc:	f04f 0900 	mov.w	r9, #0
 8004900:	e629      	b.n	8004556 <_scanf_float+0x72>
 8004902:	bf00      	nop
 8004904:	08009274 	.word	0x08009274
 8004908:	0800960d 	.word	0x0800960d

0800490c <std>:
 800490c:	2300      	movs	r3, #0
 800490e:	b510      	push	{r4, lr}
 8004910:	4604      	mov	r4, r0
 8004912:	e9c0 3300 	strd	r3, r3, [r0]
 8004916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800491a:	6083      	str	r3, [r0, #8]
 800491c:	8181      	strh	r1, [r0, #12]
 800491e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004920:	81c2      	strh	r2, [r0, #14]
 8004922:	6183      	str	r3, [r0, #24]
 8004924:	4619      	mov	r1, r3
 8004926:	2208      	movs	r2, #8
 8004928:	305c      	adds	r0, #92	@ 0x5c
 800492a:	f000 f926 	bl	8004b7a <memset>
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <std+0x58>)
 8004930:	6263      	str	r3, [r4, #36]	@ 0x24
 8004932:	4b0d      	ldr	r3, [pc, #52]	@ (8004968 <std+0x5c>)
 8004934:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004936:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <std+0x60>)
 8004938:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800493a:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <std+0x64>)
 800493c:	6323      	str	r3, [r4, #48]	@ 0x30
 800493e:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <std+0x68>)
 8004940:	6224      	str	r4, [r4, #32]
 8004942:	429c      	cmp	r4, r3
 8004944:	d006      	beq.n	8004954 <std+0x48>
 8004946:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800494a:	4294      	cmp	r4, r2
 800494c:	d002      	beq.n	8004954 <std+0x48>
 800494e:	33d0      	adds	r3, #208	@ 0xd0
 8004950:	429c      	cmp	r4, r3
 8004952:	d105      	bne.n	8004960 <std+0x54>
 8004954:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800495c:	f000 b98a 	b.w	8004c74 <__retarget_lock_init_recursive>
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	08004af5 	.word	0x08004af5
 8004968:	08004b17 	.word	0x08004b17
 800496c:	08004b4f 	.word	0x08004b4f
 8004970:	08004b73 	.word	0x08004b73
 8004974:	20000280 	.word	0x20000280

08004978 <stdio_exit_handler>:
 8004978:	4a02      	ldr	r2, [pc, #8]	@ (8004984 <stdio_exit_handler+0xc>)
 800497a:	4903      	ldr	r1, [pc, #12]	@ (8004988 <stdio_exit_handler+0x10>)
 800497c:	4803      	ldr	r0, [pc, #12]	@ (800498c <stdio_exit_handler+0x14>)
 800497e:	f000 b869 	b.w	8004a54 <_fwalk_sglue>
 8004982:	bf00      	nop
 8004984:	2000000c 	.word	0x2000000c
 8004988:	080077c9 	.word	0x080077c9
 800498c:	2000001c 	.word	0x2000001c

08004990 <cleanup_stdio>:
 8004990:	6841      	ldr	r1, [r0, #4]
 8004992:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <cleanup_stdio+0x34>)
 8004994:	4299      	cmp	r1, r3
 8004996:	b510      	push	{r4, lr}
 8004998:	4604      	mov	r4, r0
 800499a:	d001      	beq.n	80049a0 <cleanup_stdio+0x10>
 800499c:	f002 ff14 	bl	80077c8 <_fflush_r>
 80049a0:	68a1      	ldr	r1, [r4, #8]
 80049a2:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <cleanup_stdio+0x38>)
 80049a4:	4299      	cmp	r1, r3
 80049a6:	d002      	beq.n	80049ae <cleanup_stdio+0x1e>
 80049a8:	4620      	mov	r0, r4
 80049aa:	f002 ff0d 	bl	80077c8 <_fflush_r>
 80049ae:	68e1      	ldr	r1, [r4, #12]
 80049b0:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <cleanup_stdio+0x3c>)
 80049b2:	4299      	cmp	r1, r3
 80049b4:	d004      	beq.n	80049c0 <cleanup_stdio+0x30>
 80049b6:	4620      	mov	r0, r4
 80049b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049bc:	f002 bf04 	b.w	80077c8 <_fflush_r>
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	bf00      	nop
 80049c4:	20000280 	.word	0x20000280
 80049c8:	200002e8 	.word	0x200002e8
 80049cc:	20000350 	.word	0x20000350

080049d0 <global_stdio_init.part.0>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <global_stdio_init.part.0+0x30>)
 80049d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004a04 <global_stdio_init.part.0+0x34>)
 80049d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004a08 <global_stdio_init.part.0+0x38>)
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	4620      	mov	r0, r4
 80049dc:	2200      	movs	r2, #0
 80049de:	2104      	movs	r1, #4
 80049e0:	f7ff ff94 	bl	800490c <std>
 80049e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049e8:	2201      	movs	r2, #1
 80049ea:	2109      	movs	r1, #9
 80049ec:	f7ff ff8e 	bl	800490c <std>
 80049f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049f4:	2202      	movs	r2, #2
 80049f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049fa:	2112      	movs	r1, #18
 80049fc:	f7ff bf86 	b.w	800490c <std>
 8004a00:	200003b8 	.word	0x200003b8
 8004a04:	20000280 	.word	0x20000280
 8004a08:	08004979 	.word	0x08004979

08004a0c <__sfp_lock_acquire>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	@ (8004a14 <__sfp_lock_acquire+0x8>)
 8004a0e:	f000 b932 	b.w	8004c76 <__retarget_lock_acquire_recursive>
 8004a12:	bf00      	nop
 8004a14:	200003c1 	.word	0x200003c1

08004a18 <__sfp_lock_release>:
 8004a18:	4801      	ldr	r0, [pc, #4]	@ (8004a20 <__sfp_lock_release+0x8>)
 8004a1a:	f000 b92d 	b.w	8004c78 <__retarget_lock_release_recursive>
 8004a1e:	bf00      	nop
 8004a20:	200003c1 	.word	0x200003c1

08004a24 <__sinit>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	4604      	mov	r4, r0
 8004a28:	f7ff fff0 	bl	8004a0c <__sfp_lock_acquire>
 8004a2c:	6a23      	ldr	r3, [r4, #32]
 8004a2e:	b11b      	cbz	r3, 8004a38 <__sinit+0x14>
 8004a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a34:	f7ff bff0 	b.w	8004a18 <__sfp_lock_release>
 8004a38:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <__sinit+0x28>)
 8004a3a:	6223      	str	r3, [r4, #32]
 8004a3c:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <__sinit+0x2c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f5      	bne.n	8004a30 <__sinit+0xc>
 8004a44:	f7ff ffc4 	bl	80049d0 <global_stdio_init.part.0>
 8004a48:	e7f2      	b.n	8004a30 <__sinit+0xc>
 8004a4a:	bf00      	nop
 8004a4c:	08004991 	.word	0x08004991
 8004a50:	200003b8 	.word	0x200003b8

08004a54 <_fwalk_sglue>:
 8004a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a58:	4607      	mov	r7, r0
 8004a5a:	4688      	mov	r8, r1
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	2600      	movs	r6, #0
 8004a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a64:	f1b9 0901 	subs.w	r9, r9, #1
 8004a68:	d505      	bpl.n	8004a76 <_fwalk_sglue+0x22>
 8004a6a:	6824      	ldr	r4, [r4, #0]
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	d1f7      	bne.n	8004a60 <_fwalk_sglue+0xc>
 8004a70:	4630      	mov	r0, r6
 8004a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a76:	89ab      	ldrh	r3, [r5, #12]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d907      	bls.n	8004a8c <_fwalk_sglue+0x38>
 8004a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a80:	3301      	adds	r3, #1
 8004a82:	d003      	beq.n	8004a8c <_fwalk_sglue+0x38>
 8004a84:	4629      	mov	r1, r5
 8004a86:	4638      	mov	r0, r7
 8004a88:	47c0      	blx	r8
 8004a8a:	4306      	orrs	r6, r0
 8004a8c:	3568      	adds	r5, #104	@ 0x68
 8004a8e:	e7e9      	b.n	8004a64 <_fwalk_sglue+0x10>

08004a90 <iprintf>:
 8004a90:	b40f      	push	{r0, r1, r2, r3}
 8004a92:	b507      	push	{r0, r1, r2, lr}
 8004a94:	4906      	ldr	r1, [pc, #24]	@ (8004ab0 <iprintf+0x20>)
 8004a96:	ab04      	add	r3, sp, #16
 8004a98:	6808      	ldr	r0, [r1, #0]
 8004a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a9e:	6881      	ldr	r1, [r0, #8]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	f002 fcf5 	bl	8007490 <_vfiprintf_r>
 8004aa6:	b003      	add	sp, #12
 8004aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aac:	b004      	add	sp, #16
 8004aae:	4770      	bx	lr
 8004ab0:	20000018 	.word	0x20000018

08004ab4 <siprintf>:
 8004ab4:	b40e      	push	{r1, r2, r3}
 8004ab6:	b500      	push	{lr}
 8004ab8:	b09c      	sub	sp, #112	@ 0x70
 8004aba:	ab1d      	add	r3, sp, #116	@ 0x74
 8004abc:	9002      	str	r0, [sp, #8]
 8004abe:	9006      	str	r0, [sp, #24]
 8004ac0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ac4:	4809      	ldr	r0, [pc, #36]	@ (8004aec <siprintf+0x38>)
 8004ac6:	9107      	str	r1, [sp, #28]
 8004ac8:	9104      	str	r1, [sp, #16]
 8004aca:	4909      	ldr	r1, [pc, #36]	@ (8004af0 <siprintf+0x3c>)
 8004acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad0:	9105      	str	r1, [sp, #20]
 8004ad2:	6800      	ldr	r0, [r0, #0]
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	a902      	add	r1, sp, #8
 8004ad8:	f002 fbb4 	bl	8007244 <_svfiprintf_r>
 8004adc:	9b02      	ldr	r3, [sp, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	b01c      	add	sp, #112	@ 0x70
 8004ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ae8:	b003      	add	sp, #12
 8004aea:	4770      	bx	lr
 8004aec:	20000018 	.word	0x20000018
 8004af0:	ffff0208 	.word	0xffff0208

08004af4 <__sread>:
 8004af4:	b510      	push	{r4, lr}
 8004af6:	460c      	mov	r4, r1
 8004af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afc:	f000 f86c 	bl	8004bd8 <_read_r>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	bfab      	itete	ge
 8004b04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b06:	89a3      	ldrhlt	r3, [r4, #12]
 8004b08:	181b      	addge	r3, r3, r0
 8004b0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b0e:	bfac      	ite	ge
 8004b10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b12:	81a3      	strhlt	r3, [r4, #12]
 8004b14:	bd10      	pop	{r4, pc}

08004b16 <__swrite>:
 8004b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1a:	461f      	mov	r7, r3
 8004b1c:	898b      	ldrh	r3, [r1, #12]
 8004b1e:	05db      	lsls	r3, r3, #23
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	4616      	mov	r6, r2
 8004b26:	d505      	bpl.n	8004b34 <__swrite+0x1e>
 8004b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f000 f840 	bl	8004bb4 <_lseek_r>
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	4632      	mov	r2, r6
 8004b42:	463b      	mov	r3, r7
 8004b44:	4628      	mov	r0, r5
 8004b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4a:	f000 b857 	b.w	8004bfc <_write_r>

08004b4e <__sseek>:
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	460c      	mov	r4, r1
 8004b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b56:	f000 f82d 	bl	8004bb4 <_lseek_r>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	bf15      	itete	ne
 8004b60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b6a:	81a3      	strheq	r3, [r4, #12]
 8004b6c:	bf18      	it	ne
 8004b6e:	81a3      	strhne	r3, [r4, #12]
 8004b70:	bd10      	pop	{r4, pc}

08004b72 <__sclose>:
 8004b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b76:	f000 b80d 	b.w	8004b94 <_close_r>

08004b7a <memset>:
 8004b7a:	4402      	add	r2, r0
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d100      	bne.n	8004b84 <memset+0xa>
 8004b82:	4770      	bx	lr
 8004b84:	f803 1b01 	strb.w	r1, [r3], #1
 8004b88:	e7f9      	b.n	8004b7e <memset+0x4>
	...

08004b8c <_localeconv_r>:
 8004b8c:	4800      	ldr	r0, [pc, #0]	@ (8004b90 <_localeconv_r+0x4>)
 8004b8e:	4770      	bx	lr
 8004b90:	20000158 	.word	0x20000158

08004b94 <_close_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d06      	ldr	r5, [pc, #24]	@ (8004bb0 <_close_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fc fea9 	bl	80018f6 <_close>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_close_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_close_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	200003bc 	.word	0x200003bc

08004bb4 <_lseek_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d07      	ldr	r5, [pc, #28]	@ (8004bd4 <_lseek_r+0x20>)
 8004bb8:	4604      	mov	r4, r0
 8004bba:	4608      	mov	r0, r1
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	602a      	str	r2, [r5, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f7fc febe 	bl	8001944 <_lseek>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_lseek_r+0x1e>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_lseek_r+0x1e>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	200003bc 	.word	0x200003bc

08004bd8 <_read_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4d07      	ldr	r5, [pc, #28]	@ (8004bf8 <_read_r+0x20>)
 8004bdc:	4604      	mov	r4, r0
 8004bde:	4608      	mov	r0, r1
 8004be0:	4611      	mov	r1, r2
 8004be2:	2200      	movs	r2, #0
 8004be4:	602a      	str	r2, [r5, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7fc fe4c 	bl	8001884 <_read>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_read_r+0x1e>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_read_r+0x1e>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	200003bc 	.word	0x200003bc

08004bfc <_write_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d07      	ldr	r5, [pc, #28]	@ (8004c1c <_write_r+0x20>)
 8004c00:	4604      	mov	r4, r0
 8004c02:	4608      	mov	r0, r1
 8004c04:	4611      	mov	r1, r2
 8004c06:	2200      	movs	r2, #0
 8004c08:	602a      	str	r2, [r5, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f7fc fe57 	bl	80018be <_write>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_write_r+0x1e>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_write_r+0x1e>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	200003bc 	.word	0x200003bc

08004c20 <__errno>:
 8004c20:	4b01      	ldr	r3, [pc, #4]	@ (8004c28 <__errno+0x8>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000018 	.word	0x20000018

08004c2c <__libc_init_array>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c64 <__libc_init_array+0x38>)
 8004c30:	4c0d      	ldr	r4, [pc, #52]	@ (8004c68 <__libc_init_array+0x3c>)
 8004c32:	1b64      	subs	r4, r4, r5
 8004c34:	10a4      	asrs	r4, r4, #2
 8004c36:	2600      	movs	r6, #0
 8004c38:	42a6      	cmp	r6, r4
 8004c3a:	d109      	bne.n	8004c50 <__libc_init_array+0x24>
 8004c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c6c <__libc_init_array+0x40>)
 8004c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c70 <__libc_init_array+0x44>)
 8004c40:	f004 fad4 	bl	80091ec <_init>
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	2600      	movs	r6, #0
 8004c4a:	42a6      	cmp	r6, r4
 8004c4c:	d105      	bne.n	8004c5a <__libc_init_array+0x2e>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c54:	4798      	blx	r3
 8004c56:	3601      	adds	r6, #1
 8004c58:	e7ee      	b.n	8004c38 <__libc_init_array+0xc>
 8004c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5e:	4798      	blx	r3
 8004c60:	3601      	adds	r6, #1
 8004c62:	e7f2      	b.n	8004c4a <__libc_init_array+0x1e>
 8004c64:	080096a8 	.word	0x080096a8
 8004c68:	080096a8 	.word	0x080096a8
 8004c6c:	080096a8 	.word	0x080096a8
 8004c70:	080096ac 	.word	0x080096ac

08004c74 <__retarget_lock_init_recursive>:
 8004c74:	4770      	bx	lr

08004c76 <__retarget_lock_acquire_recursive>:
 8004c76:	4770      	bx	lr

08004c78 <__retarget_lock_release_recursive>:
 8004c78:	4770      	bx	lr
	...

08004c7c <nanf>:
 8004c7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004c84 <nanf+0x8>
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	7fc00000 	.word	0x7fc00000

08004c88 <quorem>:
 8004c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	6903      	ldr	r3, [r0, #16]
 8004c8e:	690c      	ldr	r4, [r1, #16]
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	4607      	mov	r7, r0
 8004c94:	db7e      	blt.n	8004d94 <quorem+0x10c>
 8004c96:	3c01      	subs	r4, #1
 8004c98:	f101 0814 	add.w	r8, r1, #20
 8004c9c:	00a3      	lsls	r3, r4, #2
 8004c9e:	f100 0514 	add.w	r5, r0, #20
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cba:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cbe:	d32e      	bcc.n	8004d1e <quorem+0x96>
 8004cc0:	f04f 0a00 	mov.w	sl, #0
 8004cc4:	46c4      	mov	ip, r8
 8004cc6:	46ae      	mov	lr, r5
 8004cc8:	46d3      	mov	fp, sl
 8004cca:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004cce:	b298      	uxth	r0, r3
 8004cd0:	fb06 a000 	mla	r0, r6, r0, sl
 8004cd4:	0c02      	lsrs	r2, r0, #16
 8004cd6:	0c1b      	lsrs	r3, r3, #16
 8004cd8:	fb06 2303 	mla	r3, r6, r3, r2
 8004cdc:	f8de 2000 	ldr.w	r2, [lr]
 8004ce0:	b280      	uxth	r0, r0
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	1a12      	subs	r2, r2, r0
 8004ce6:	445a      	add	r2, fp
 8004ce8:	f8de 0000 	ldr.w	r0, [lr]
 8004cec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004cf6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004cfa:	b292      	uxth	r2, r2
 8004cfc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d00:	45e1      	cmp	r9, ip
 8004d02:	f84e 2b04 	str.w	r2, [lr], #4
 8004d06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004d0a:	d2de      	bcs.n	8004cca <quorem+0x42>
 8004d0c:	9b00      	ldr	r3, [sp, #0]
 8004d0e:	58eb      	ldr	r3, [r5, r3]
 8004d10:	b92b      	cbnz	r3, 8004d1e <quorem+0x96>
 8004d12:	9b01      	ldr	r3, [sp, #4]
 8004d14:	3b04      	subs	r3, #4
 8004d16:	429d      	cmp	r5, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	d32f      	bcc.n	8004d7c <quorem+0xf4>
 8004d1c:	613c      	str	r4, [r7, #16]
 8004d1e:	4638      	mov	r0, r7
 8004d20:	f001 f9c2 	bl	80060a8 <__mcmp>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	db25      	blt.n	8004d74 <quorem+0xec>
 8004d28:	4629      	mov	r1, r5
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d30:	f8d1 c000 	ldr.w	ip, [r1]
 8004d34:	fa1f fe82 	uxth.w	lr, r2
 8004d38:	fa1f f38c 	uxth.w	r3, ip
 8004d3c:	eba3 030e 	sub.w	r3, r3, lr
 8004d40:	4403      	add	r3, r0
 8004d42:	0c12      	lsrs	r2, r2, #16
 8004d44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d52:	45c1      	cmp	r9, r8
 8004d54:	f841 3b04 	str.w	r3, [r1], #4
 8004d58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d5c:	d2e6      	bcs.n	8004d2c <quorem+0xa4>
 8004d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d66:	b922      	cbnz	r2, 8004d72 <quorem+0xea>
 8004d68:	3b04      	subs	r3, #4
 8004d6a:	429d      	cmp	r5, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	d30b      	bcc.n	8004d88 <quorem+0x100>
 8004d70:	613c      	str	r4, [r7, #16]
 8004d72:	3601      	adds	r6, #1
 8004d74:	4630      	mov	r0, r6
 8004d76:	b003      	add	sp, #12
 8004d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	3b04      	subs	r3, #4
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	d1cb      	bne.n	8004d1c <quorem+0x94>
 8004d84:	3c01      	subs	r4, #1
 8004d86:	e7c6      	b.n	8004d16 <quorem+0x8e>
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	3b04      	subs	r3, #4
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d1ef      	bne.n	8004d70 <quorem+0xe8>
 8004d90:	3c01      	subs	r4, #1
 8004d92:	e7ea      	b.n	8004d6a <quorem+0xe2>
 8004d94:	2000      	movs	r0, #0
 8004d96:	e7ee      	b.n	8004d76 <quorem+0xee>

08004d98 <_dtoa_r>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	69c7      	ldr	r7, [r0, #28]
 8004d9e:	b099      	sub	sp, #100	@ 0x64
 8004da0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004da4:	ec55 4b10 	vmov	r4, r5, d0
 8004da8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004daa:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dac:	4683      	mov	fp, r0
 8004dae:	920e      	str	r2, [sp, #56]	@ 0x38
 8004db0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004db2:	b97f      	cbnz	r7, 8004dd4 <_dtoa_r+0x3c>
 8004db4:	2010      	movs	r0, #16
 8004db6:	f000 fdfd 	bl	80059b4 <malloc>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8004dc0:	b920      	cbnz	r0, 8004dcc <_dtoa_r+0x34>
 8004dc2:	4ba7      	ldr	r3, [pc, #668]	@ (8005060 <_dtoa_r+0x2c8>)
 8004dc4:	21ef      	movs	r1, #239	@ 0xef
 8004dc6:	48a7      	ldr	r0, [pc, #668]	@ (8005064 <_dtoa_r+0x2cc>)
 8004dc8:	f002 fe0e 	bl	80079e8 <__assert_func>
 8004dcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004dd0:	6007      	str	r7, [r0, #0]
 8004dd2:	60c7      	str	r7, [r0, #12]
 8004dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	b159      	cbz	r1, 8004df4 <_dtoa_r+0x5c>
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	604a      	str	r2, [r1, #4]
 8004de0:	2301      	movs	r3, #1
 8004de2:	4093      	lsls	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
 8004de6:	4658      	mov	r0, fp
 8004de8:	f000 feda 	bl	8005ba0 <_Bfree>
 8004dec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	1e2b      	subs	r3, r5, #0
 8004df6:	bfb9      	ittee	lt
 8004df8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004dfc:	9303      	strlt	r3, [sp, #12]
 8004dfe:	2300      	movge	r3, #0
 8004e00:	6033      	strge	r3, [r6, #0]
 8004e02:	9f03      	ldr	r7, [sp, #12]
 8004e04:	4b98      	ldr	r3, [pc, #608]	@ (8005068 <_dtoa_r+0x2d0>)
 8004e06:	bfbc      	itt	lt
 8004e08:	2201      	movlt	r2, #1
 8004e0a:	6032      	strlt	r2, [r6, #0]
 8004e0c:	43bb      	bics	r3, r7
 8004e0e:	d112      	bne.n	8004e36 <_dtoa_r+0x9e>
 8004e10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e1c:	4323      	orrs	r3, r4
 8004e1e:	f000 854d 	beq.w	80058bc <_dtoa_r+0xb24>
 8004e22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800507c <_dtoa_r+0x2e4>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 854f 	beq.w	80058cc <_dtoa_r+0xb34>
 8004e2e:	f10a 0303 	add.w	r3, sl, #3
 8004e32:	f000 bd49 	b.w	80058c8 <_dtoa_r+0xb30>
 8004e36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	ec51 0b17 	vmov	r0, r1, d7
 8004e40:	2300      	movs	r3, #0
 8004e42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004e46:	f7fb fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 8004e4a:	4680      	mov	r8, r0
 8004e4c:	b158      	cbz	r0, 8004e66 <_dtoa_r+0xce>
 8004e4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e50:	2301      	movs	r3, #1
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e56:	b113      	cbz	r3, 8004e5e <_dtoa_r+0xc6>
 8004e58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004e5a:	4b84      	ldr	r3, [pc, #528]	@ (800506c <_dtoa_r+0x2d4>)
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005080 <_dtoa_r+0x2e8>
 8004e62:	f000 bd33 	b.w	80058cc <_dtoa_r+0xb34>
 8004e66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004e6a:	aa16      	add	r2, sp, #88	@ 0x58
 8004e6c:	a917      	add	r1, sp, #92	@ 0x5c
 8004e6e:	4658      	mov	r0, fp
 8004e70:	f001 fa3a 	bl	80062e8 <__d2b>
 8004e74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004e78:	4681      	mov	r9, r0
 8004e7a:	2e00      	cmp	r6, #0
 8004e7c:	d077      	beq.n	8004f6e <_dtoa_r+0x1d6>
 8004e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004e98:	4619      	mov	r1, r3
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4b74      	ldr	r3, [pc, #464]	@ (8005070 <_dtoa_r+0x2d8>)
 8004e9e:	f7fb fa13 	bl	80002c8 <__aeabi_dsub>
 8004ea2:	a369      	add	r3, pc, #420	@ (adr r3, 8005048 <_dtoa_r+0x2b0>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f7fb fbc6 	bl	8000638 <__aeabi_dmul>
 8004eac:	a368      	add	r3, pc, #416	@ (adr r3, 8005050 <_dtoa_r+0x2b8>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f7fb fa0b 	bl	80002cc <__adddf3>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4630      	mov	r0, r6
 8004eba:	460d      	mov	r5, r1
 8004ebc:	f7fb fb52 	bl	8000564 <__aeabi_i2d>
 8004ec0:	a365      	add	r3, pc, #404	@ (adr r3, 8005058 <_dtoa_r+0x2c0>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb fbb7 	bl	8000638 <__aeabi_dmul>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb f9fb 	bl	80002cc <__adddf3>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	460d      	mov	r5, r1
 8004eda:	f7fb fe5d 	bl	8000b98 <__aeabi_d2iz>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f7fb fe18 	bl	8000b1c <__aeabi_dcmplt>
 8004eec:	b140      	cbz	r0, 8004f00 <_dtoa_r+0x168>
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f7fb fb38 	bl	8000564 <__aeabi_i2d>
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	f7fb fe06 	bl	8000b08 <__aeabi_dcmpeq>
 8004efc:	b900      	cbnz	r0, 8004f00 <_dtoa_r+0x168>
 8004efe:	3f01      	subs	r7, #1
 8004f00:	2f16      	cmp	r7, #22
 8004f02:	d851      	bhi.n	8004fa8 <_dtoa_r+0x210>
 8004f04:	4b5b      	ldr	r3, [pc, #364]	@ (8005074 <_dtoa_r+0x2dc>)
 8004f06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f12:	f7fb fe03 	bl	8000b1c <__aeabi_dcmplt>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d048      	beq.n	8004fac <_dtoa_r+0x214>
 8004f1a:	3f01      	subs	r7, #1
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f22:	1b9b      	subs	r3, r3, r6
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	bf44      	itt	mi
 8004f28:	f1c3 0801 	rsbmi	r8, r3, #1
 8004f2c:	2300      	movmi	r3, #0
 8004f2e:	9208      	str	r2, [sp, #32]
 8004f30:	bf54      	ite	pl
 8004f32:	f04f 0800 	movpl.w	r8, #0
 8004f36:	9308      	strmi	r3, [sp, #32]
 8004f38:	2f00      	cmp	r7, #0
 8004f3a:	db39      	blt.n	8004fb0 <_dtoa_r+0x218>
 8004f3c:	9b08      	ldr	r3, [sp, #32]
 8004f3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004f40:	443b      	add	r3, r7
 8004f42:	9308      	str	r3, [sp, #32]
 8004f44:	2300      	movs	r3, #0
 8004f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4a:	2b09      	cmp	r3, #9
 8004f4c:	d864      	bhi.n	8005018 <_dtoa_r+0x280>
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	bfc4      	itt	gt
 8004f52:	3b04      	subgt	r3, #4
 8004f54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f58:	f1a3 0302 	sub.w	r3, r3, #2
 8004f5c:	bfcc      	ite	gt
 8004f5e:	2400      	movgt	r4, #0
 8004f60:	2401      	movle	r4, #1
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d863      	bhi.n	800502e <_dtoa_r+0x296>
 8004f66:	e8df f003 	tbb	[pc, r3]
 8004f6a:	372a      	.short	0x372a
 8004f6c:	5535      	.short	0x5535
 8004f6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004f72:	441e      	add	r6, r3
 8004f74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	bfc1      	itttt	gt
 8004f7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004f80:	409f      	lslgt	r7, r3
 8004f82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004f86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004f8a:	bfd6      	itet	le
 8004f8c:	f1c3 0320 	rsble	r3, r3, #32
 8004f90:	ea47 0003 	orrgt.w	r0, r7, r3
 8004f94:	fa04 f003 	lslle.w	r0, r4, r3
 8004f98:	f7fb fad4 	bl	8000544 <__aeabi_ui2d>
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004fa2:	3e01      	subs	r6, #1
 8004fa4:	9214      	str	r2, [sp, #80]	@ 0x50
 8004fa6:	e777      	b.n	8004e98 <_dtoa_r+0x100>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e7b8      	b.n	8004f1e <_dtoa_r+0x186>
 8004fac:	9012      	str	r0, [sp, #72]	@ 0x48
 8004fae:	e7b7      	b.n	8004f20 <_dtoa_r+0x188>
 8004fb0:	427b      	negs	r3, r7
 8004fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	eba8 0807 	sub.w	r8, r8, r7
 8004fba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004fbc:	e7c4      	b.n	8004f48 <_dtoa_r+0x1b0>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	dc35      	bgt.n	8005034 <_dtoa_r+0x29c>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	9307      	str	r3, [sp, #28]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fd2:	e00b      	b.n	8004fec <_dtoa_r+0x254>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e7f3      	b.n	8004fc0 <_dtoa_r+0x228>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	bfb8      	it	lt
 8004fea:	2301      	movlt	r3, #1
 8004fec:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	f102 0514 	add.w	r5, r2, #20
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	d91f      	bls.n	800503c <_dtoa_r+0x2a4>
 8004ffc:	6041      	str	r1, [r0, #4]
 8004ffe:	4658      	mov	r0, fp
 8005000:	f000 fd8e 	bl	8005b20 <_Balloc>
 8005004:	4682      	mov	sl, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	d13c      	bne.n	8005084 <_dtoa_r+0x2ec>
 800500a:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <_dtoa_r+0x2e0>)
 800500c:	4602      	mov	r2, r0
 800500e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005012:	e6d8      	b.n	8004dc6 <_dtoa_r+0x2e>
 8005014:	2301      	movs	r3, #1
 8005016:	e7e0      	b.n	8004fda <_dtoa_r+0x242>
 8005018:	2401      	movs	r4, #1
 800501a:	2300      	movs	r3, #0
 800501c:	9309      	str	r3, [sp, #36]	@ 0x24
 800501e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005020:	f04f 33ff 	mov.w	r3, #4294967295
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	9307      	str	r3, [sp, #28]
 8005028:	2200      	movs	r2, #0
 800502a:	2312      	movs	r3, #18
 800502c:	e7d0      	b.n	8004fd0 <_dtoa_r+0x238>
 800502e:	2301      	movs	r3, #1
 8005030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005032:	e7f5      	b.n	8005020 <_dtoa_r+0x288>
 8005034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	9307      	str	r3, [sp, #28]
 800503a:	e7d7      	b.n	8004fec <_dtoa_r+0x254>
 800503c:	3101      	adds	r1, #1
 800503e:	0052      	lsls	r2, r2, #1
 8005040:	e7d8      	b.n	8004ff4 <_dtoa_r+0x25c>
 8005042:	bf00      	nop
 8005044:	f3af 8000 	nop.w
 8005048:	636f4361 	.word	0x636f4361
 800504c:	3fd287a7 	.word	0x3fd287a7
 8005050:	8b60c8b3 	.word	0x8b60c8b3
 8005054:	3fc68a28 	.word	0x3fc68a28
 8005058:	509f79fb 	.word	0x509f79fb
 800505c:	3fd34413 	.word	0x3fd34413
 8005060:	08009286 	.word	0x08009286
 8005064:	0800929d 	.word	0x0800929d
 8005068:	7ff00000 	.word	0x7ff00000
 800506c:	08009251 	.word	0x08009251
 8005070:	3ff80000 	.word	0x3ff80000
 8005074:	08009398 	.word	0x08009398
 8005078:	080092f5 	.word	0x080092f5
 800507c:	08009282 	.word	0x08009282
 8005080:	08009250 	.word	0x08009250
 8005084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005088:	6018      	str	r0, [r3, #0]
 800508a:	9b07      	ldr	r3, [sp, #28]
 800508c:	2b0e      	cmp	r3, #14
 800508e:	f200 80a4 	bhi.w	80051da <_dtoa_r+0x442>
 8005092:	2c00      	cmp	r4, #0
 8005094:	f000 80a1 	beq.w	80051da <_dtoa_r+0x442>
 8005098:	2f00      	cmp	r7, #0
 800509a:	dd33      	ble.n	8005104 <_dtoa_r+0x36c>
 800509c:	4bad      	ldr	r3, [pc, #692]	@ (8005354 <_dtoa_r+0x5bc>)
 800509e:	f007 020f 	and.w	r2, r7, #15
 80050a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050a6:	ed93 7b00 	vldr	d7, [r3]
 80050aa:	05f8      	lsls	r0, r7, #23
 80050ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80050b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80050b4:	d516      	bpl.n	80050e4 <_dtoa_r+0x34c>
 80050b6:	4ba8      	ldr	r3, [pc, #672]	@ (8005358 <_dtoa_r+0x5c0>)
 80050b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050c0:	f7fb fbe4 	bl	800088c <__aeabi_ddiv>
 80050c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c8:	f004 040f 	and.w	r4, r4, #15
 80050cc:	2603      	movs	r6, #3
 80050ce:	4da2      	ldr	r5, [pc, #648]	@ (8005358 <_dtoa_r+0x5c0>)
 80050d0:	b954      	cbnz	r4, 80050e8 <_dtoa_r+0x350>
 80050d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050da:	f7fb fbd7 	bl	800088c <__aeabi_ddiv>
 80050de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e2:	e028      	b.n	8005136 <_dtoa_r+0x39e>
 80050e4:	2602      	movs	r6, #2
 80050e6:	e7f2      	b.n	80050ce <_dtoa_r+0x336>
 80050e8:	07e1      	lsls	r1, r4, #31
 80050ea:	d508      	bpl.n	80050fe <_dtoa_r+0x366>
 80050ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050f4:	f7fb faa0 	bl	8000638 <__aeabi_dmul>
 80050f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050fc:	3601      	adds	r6, #1
 80050fe:	1064      	asrs	r4, r4, #1
 8005100:	3508      	adds	r5, #8
 8005102:	e7e5      	b.n	80050d0 <_dtoa_r+0x338>
 8005104:	f000 80d2 	beq.w	80052ac <_dtoa_r+0x514>
 8005108:	427c      	negs	r4, r7
 800510a:	4b92      	ldr	r3, [pc, #584]	@ (8005354 <_dtoa_r+0x5bc>)
 800510c:	4d92      	ldr	r5, [pc, #584]	@ (8005358 <_dtoa_r+0x5c0>)
 800510e:	f004 020f 	and.w	r2, r4, #15
 8005112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800511e:	f7fb fa8b 	bl	8000638 <__aeabi_dmul>
 8005122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005126:	1124      	asrs	r4, r4, #4
 8005128:	2300      	movs	r3, #0
 800512a:	2602      	movs	r6, #2
 800512c:	2c00      	cmp	r4, #0
 800512e:	f040 80b2 	bne.w	8005296 <_dtoa_r+0x4fe>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1d3      	bne.n	80050de <_dtoa_r+0x346>
 8005136:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005138:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80b7 	beq.w	80052b0 <_dtoa_r+0x518>
 8005142:	4b86      	ldr	r3, [pc, #536]	@ (800535c <_dtoa_r+0x5c4>)
 8005144:	2200      	movs	r2, #0
 8005146:	4620      	mov	r0, r4
 8005148:	4629      	mov	r1, r5
 800514a:	f7fb fce7 	bl	8000b1c <__aeabi_dcmplt>
 800514e:	2800      	cmp	r0, #0
 8005150:	f000 80ae 	beq.w	80052b0 <_dtoa_r+0x518>
 8005154:	9b07      	ldr	r3, [sp, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80aa 	beq.w	80052b0 <_dtoa_r+0x518>
 800515c:	9b00      	ldr	r3, [sp, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	dd37      	ble.n	80051d2 <_dtoa_r+0x43a>
 8005162:	1e7b      	subs	r3, r7, #1
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	4620      	mov	r0, r4
 8005168:	4b7d      	ldr	r3, [pc, #500]	@ (8005360 <_dtoa_r+0x5c8>)
 800516a:	2200      	movs	r2, #0
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb fa63 	bl	8000638 <__aeabi_dmul>
 8005172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005176:	9c00      	ldr	r4, [sp, #0]
 8005178:	3601      	adds	r6, #1
 800517a:	4630      	mov	r0, r6
 800517c:	f7fb f9f2 	bl	8000564 <__aeabi_i2d>
 8005180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005184:	f7fb fa58 	bl	8000638 <__aeabi_dmul>
 8005188:	4b76      	ldr	r3, [pc, #472]	@ (8005364 <_dtoa_r+0x5cc>)
 800518a:	2200      	movs	r2, #0
 800518c:	f7fb f89e 	bl	80002cc <__adddf3>
 8005190:	4605      	mov	r5, r0
 8005192:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005196:	2c00      	cmp	r4, #0
 8005198:	f040 808d 	bne.w	80052b6 <_dtoa_r+0x51e>
 800519c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a0:	4b71      	ldr	r3, [pc, #452]	@ (8005368 <_dtoa_r+0x5d0>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	f7fb f890 	bl	80002c8 <__aeabi_dsub>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051b0:	462a      	mov	r2, r5
 80051b2:	4633      	mov	r3, r6
 80051b4:	f7fb fcd0 	bl	8000b58 <__aeabi_dcmpgt>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f040 828b 	bne.w	80056d4 <_dtoa_r+0x93c>
 80051be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c2:	462a      	mov	r2, r5
 80051c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80051c8:	f7fb fca8 	bl	8000b1c <__aeabi_dcmplt>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f040 8128 	bne.w	8005422 <_dtoa_r+0x68a>
 80051d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80051d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80051da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f2c0 815a 	blt.w	8005496 <_dtoa_r+0x6fe>
 80051e2:	2f0e      	cmp	r7, #14
 80051e4:	f300 8157 	bgt.w	8005496 <_dtoa_r+0x6fe>
 80051e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005354 <_dtoa_r+0x5bc>)
 80051ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051ee:	ed93 7b00 	vldr	d7, [r3]
 80051f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	ed8d 7b00 	vstr	d7, [sp]
 80051fa:	da03      	bge.n	8005204 <_dtoa_r+0x46c>
 80051fc:	9b07      	ldr	r3, [sp, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f340 8101 	ble.w	8005406 <_dtoa_r+0x66e>
 8005204:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005208:	4656      	mov	r6, sl
 800520a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fb fb3b 	bl	800088c <__aeabi_ddiv>
 8005216:	f7fb fcbf 	bl	8000b98 <__aeabi_d2iz>
 800521a:	4680      	mov	r8, r0
 800521c:	f7fb f9a2 	bl	8000564 <__aeabi_i2d>
 8005220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005224:	f7fb fa08 	bl	8000638 <__aeabi_dmul>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005234:	f7fb f848 	bl	80002c8 <__aeabi_dsub>
 8005238:	f806 4b01 	strb.w	r4, [r6], #1
 800523c:	9d07      	ldr	r5, [sp, #28]
 800523e:	eba6 040a 	sub.w	r4, r6, sl
 8005242:	42a5      	cmp	r5, r4
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	f040 8117 	bne.w	800547a <_dtoa_r+0x6e2>
 800524c:	f7fb f83e 	bl	80002cc <__adddf3>
 8005250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005254:	4604      	mov	r4, r0
 8005256:	460d      	mov	r5, r1
 8005258:	f7fb fc7e 	bl	8000b58 <__aeabi_dcmpgt>
 800525c:	2800      	cmp	r0, #0
 800525e:	f040 80f9 	bne.w	8005454 <_dtoa_r+0x6bc>
 8005262:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f7fb fc4d 	bl	8000b08 <__aeabi_dcmpeq>
 800526e:	b118      	cbz	r0, 8005278 <_dtoa_r+0x4e0>
 8005270:	f018 0f01 	tst.w	r8, #1
 8005274:	f040 80ee 	bne.w	8005454 <_dtoa_r+0x6bc>
 8005278:	4649      	mov	r1, r9
 800527a:	4658      	mov	r0, fp
 800527c:	f000 fc90 	bl	8005ba0 <_Bfree>
 8005280:	2300      	movs	r3, #0
 8005282:	7033      	strb	r3, [r6, #0]
 8005284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005286:	3701      	adds	r7, #1
 8005288:	601f      	str	r7, [r3, #0]
 800528a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 831d 	beq.w	80058cc <_dtoa_r+0xb34>
 8005292:	601e      	str	r6, [r3, #0]
 8005294:	e31a      	b.n	80058cc <_dtoa_r+0xb34>
 8005296:	07e2      	lsls	r2, r4, #31
 8005298:	d505      	bpl.n	80052a6 <_dtoa_r+0x50e>
 800529a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800529e:	f7fb f9cb 	bl	8000638 <__aeabi_dmul>
 80052a2:	3601      	adds	r6, #1
 80052a4:	2301      	movs	r3, #1
 80052a6:	1064      	asrs	r4, r4, #1
 80052a8:	3508      	adds	r5, #8
 80052aa:	e73f      	b.n	800512c <_dtoa_r+0x394>
 80052ac:	2602      	movs	r6, #2
 80052ae:	e742      	b.n	8005136 <_dtoa_r+0x39e>
 80052b0:	9c07      	ldr	r4, [sp, #28]
 80052b2:	9704      	str	r7, [sp, #16]
 80052b4:	e761      	b.n	800517a <_dtoa_r+0x3e2>
 80052b6:	4b27      	ldr	r3, [pc, #156]	@ (8005354 <_dtoa_r+0x5bc>)
 80052b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052c2:	4454      	add	r4, sl
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d053      	beq.n	8005370 <_dtoa_r+0x5d8>
 80052c8:	4928      	ldr	r1, [pc, #160]	@ (800536c <_dtoa_r+0x5d4>)
 80052ca:	2000      	movs	r0, #0
 80052cc:	f7fb fade 	bl	800088c <__aeabi_ddiv>
 80052d0:	4633      	mov	r3, r6
 80052d2:	462a      	mov	r2, r5
 80052d4:	f7fa fff8 	bl	80002c8 <__aeabi_dsub>
 80052d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052dc:	4656      	mov	r6, sl
 80052de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e2:	f7fb fc59 	bl	8000b98 <__aeabi_d2iz>
 80052e6:	4605      	mov	r5, r0
 80052e8:	f7fb f93c 	bl	8000564 <__aeabi_i2d>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f4:	f7fa ffe8 	bl	80002c8 <__aeabi_dsub>
 80052f8:	3530      	adds	r5, #48	@ 0x30
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005302:	f806 5b01 	strb.w	r5, [r6], #1
 8005306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800530a:	f7fb fc07 	bl	8000b1c <__aeabi_dcmplt>
 800530e:	2800      	cmp	r0, #0
 8005310:	d171      	bne.n	80053f6 <_dtoa_r+0x65e>
 8005312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005316:	4911      	ldr	r1, [pc, #68]	@ (800535c <_dtoa_r+0x5c4>)
 8005318:	2000      	movs	r0, #0
 800531a:	f7fa ffd5 	bl	80002c8 <__aeabi_dsub>
 800531e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005322:	f7fb fbfb 	bl	8000b1c <__aeabi_dcmplt>
 8005326:	2800      	cmp	r0, #0
 8005328:	f040 8095 	bne.w	8005456 <_dtoa_r+0x6be>
 800532c:	42a6      	cmp	r6, r4
 800532e:	f43f af50 	beq.w	80051d2 <_dtoa_r+0x43a>
 8005332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005336:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <_dtoa_r+0x5c8>)
 8005338:	2200      	movs	r2, #0
 800533a:	f7fb f97d 	bl	8000638 <__aeabi_dmul>
 800533e:	4b08      	ldr	r3, [pc, #32]	@ (8005360 <_dtoa_r+0x5c8>)
 8005340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005344:	2200      	movs	r2, #0
 8005346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800534a:	f7fb f975 	bl	8000638 <__aeabi_dmul>
 800534e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005352:	e7c4      	b.n	80052de <_dtoa_r+0x546>
 8005354:	08009398 	.word	0x08009398
 8005358:	08009370 	.word	0x08009370
 800535c:	3ff00000 	.word	0x3ff00000
 8005360:	40240000 	.word	0x40240000
 8005364:	401c0000 	.word	0x401c0000
 8005368:	40140000 	.word	0x40140000
 800536c:	3fe00000 	.word	0x3fe00000
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	f7fb f960 	bl	8000638 <__aeabi_dmul>
 8005378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800537c:	9415      	str	r4, [sp, #84]	@ 0x54
 800537e:	4656      	mov	r6, sl
 8005380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005384:	f7fb fc08 	bl	8000b98 <__aeabi_d2iz>
 8005388:	4605      	mov	r5, r0
 800538a:	f7fb f8eb 	bl	8000564 <__aeabi_i2d>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005396:	f7fa ff97 	bl	80002c8 <__aeabi_dsub>
 800539a:	3530      	adds	r5, #48	@ 0x30
 800539c:	f806 5b01 	strb.w	r5, [r6], #1
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	d124      	bne.n	80053fa <_dtoa_r+0x662>
 80053b0:	4bac      	ldr	r3, [pc, #688]	@ (8005664 <_dtoa_r+0x8cc>)
 80053b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80053b6:	f7fa ff89 	bl	80002cc <__adddf3>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c2:	f7fb fbc9 	bl	8000b58 <__aeabi_dcmpgt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d145      	bne.n	8005456 <_dtoa_r+0x6be>
 80053ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053ce:	49a5      	ldr	r1, [pc, #660]	@ (8005664 <_dtoa_r+0x8cc>)
 80053d0:	2000      	movs	r0, #0
 80053d2:	f7fa ff79 	bl	80002c8 <__aeabi_dsub>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053de:	f7fb fb9d 	bl	8000b1c <__aeabi_dcmplt>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f43f aef5 	beq.w	80051d2 <_dtoa_r+0x43a>
 80053e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80053ea:	1e73      	subs	r3, r6, #1
 80053ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80053ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053f2:	2b30      	cmp	r3, #48	@ 0x30
 80053f4:	d0f8      	beq.n	80053e8 <_dtoa_r+0x650>
 80053f6:	9f04      	ldr	r7, [sp, #16]
 80053f8:	e73e      	b.n	8005278 <_dtoa_r+0x4e0>
 80053fa:	4b9b      	ldr	r3, [pc, #620]	@ (8005668 <_dtoa_r+0x8d0>)
 80053fc:	f7fb f91c 	bl	8000638 <__aeabi_dmul>
 8005400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005404:	e7bc      	b.n	8005380 <_dtoa_r+0x5e8>
 8005406:	d10c      	bne.n	8005422 <_dtoa_r+0x68a>
 8005408:	4b98      	ldr	r3, [pc, #608]	@ (800566c <_dtoa_r+0x8d4>)
 800540a:	2200      	movs	r2, #0
 800540c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005410:	f7fb f912 	bl	8000638 <__aeabi_dmul>
 8005414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005418:	f7fb fb94 	bl	8000b44 <__aeabi_dcmpge>
 800541c:	2800      	cmp	r0, #0
 800541e:	f000 8157 	beq.w	80056d0 <_dtoa_r+0x938>
 8005422:	2400      	movs	r4, #0
 8005424:	4625      	mov	r5, r4
 8005426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005428:	43db      	mvns	r3, r3
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	4656      	mov	r6, sl
 800542e:	2700      	movs	r7, #0
 8005430:	4621      	mov	r1, r4
 8005432:	4658      	mov	r0, fp
 8005434:	f000 fbb4 	bl	8005ba0 <_Bfree>
 8005438:	2d00      	cmp	r5, #0
 800543a:	d0dc      	beq.n	80053f6 <_dtoa_r+0x65e>
 800543c:	b12f      	cbz	r7, 800544a <_dtoa_r+0x6b2>
 800543e:	42af      	cmp	r7, r5
 8005440:	d003      	beq.n	800544a <_dtoa_r+0x6b2>
 8005442:	4639      	mov	r1, r7
 8005444:	4658      	mov	r0, fp
 8005446:	f000 fbab 	bl	8005ba0 <_Bfree>
 800544a:	4629      	mov	r1, r5
 800544c:	4658      	mov	r0, fp
 800544e:	f000 fba7 	bl	8005ba0 <_Bfree>
 8005452:	e7d0      	b.n	80053f6 <_dtoa_r+0x65e>
 8005454:	9704      	str	r7, [sp, #16]
 8005456:	4633      	mov	r3, r6
 8005458:	461e      	mov	r6, r3
 800545a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800545e:	2a39      	cmp	r2, #57	@ 0x39
 8005460:	d107      	bne.n	8005472 <_dtoa_r+0x6da>
 8005462:	459a      	cmp	sl, r3
 8005464:	d1f8      	bne.n	8005458 <_dtoa_r+0x6c0>
 8005466:	9a04      	ldr	r2, [sp, #16]
 8005468:	3201      	adds	r2, #1
 800546a:	9204      	str	r2, [sp, #16]
 800546c:	2230      	movs	r2, #48	@ 0x30
 800546e:	f88a 2000 	strb.w	r2, [sl]
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	3201      	adds	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e7bd      	b.n	80053f6 <_dtoa_r+0x65e>
 800547a:	4b7b      	ldr	r3, [pc, #492]	@ (8005668 <_dtoa_r+0x8d0>)
 800547c:	2200      	movs	r2, #0
 800547e:	f7fb f8db 	bl	8000638 <__aeabi_dmul>
 8005482:	2200      	movs	r2, #0
 8005484:	2300      	movs	r3, #0
 8005486:	4604      	mov	r4, r0
 8005488:	460d      	mov	r5, r1
 800548a:	f7fb fb3d 	bl	8000b08 <__aeabi_dcmpeq>
 800548e:	2800      	cmp	r0, #0
 8005490:	f43f aebb 	beq.w	800520a <_dtoa_r+0x472>
 8005494:	e6f0      	b.n	8005278 <_dtoa_r+0x4e0>
 8005496:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005498:	2a00      	cmp	r2, #0
 800549a:	f000 80db 	beq.w	8005654 <_dtoa_r+0x8bc>
 800549e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054a0:	2a01      	cmp	r2, #1
 80054a2:	f300 80bf 	bgt.w	8005624 <_dtoa_r+0x88c>
 80054a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80054a8:	2a00      	cmp	r2, #0
 80054aa:	f000 80b7 	beq.w	800561c <_dtoa_r+0x884>
 80054ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80054b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054b4:	4646      	mov	r6, r8
 80054b6:	9a08      	ldr	r2, [sp, #32]
 80054b8:	2101      	movs	r1, #1
 80054ba:	441a      	add	r2, r3
 80054bc:	4658      	mov	r0, fp
 80054be:	4498      	add	r8, r3
 80054c0:	9208      	str	r2, [sp, #32]
 80054c2:	f000 fc6b 	bl	8005d9c <__i2b>
 80054c6:	4605      	mov	r5, r0
 80054c8:	b15e      	cbz	r6, 80054e2 <_dtoa_r+0x74a>
 80054ca:	9b08      	ldr	r3, [sp, #32]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dd08      	ble.n	80054e2 <_dtoa_r+0x74a>
 80054d0:	42b3      	cmp	r3, r6
 80054d2:	9a08      	ldr	r2, [sp, #32]
 80054d4:	bfa8      	it	ge
 80054d6:	4633      	movge	r3, r6
 80054d8:	eba8 0803 	sub.w	r8, r8, r3
 80054dc:	1af6      	subs	r6, r6, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	9308      	str	r3, [sp, #32]
 80054e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054e4:	b1f3      	cbz	r3, 8005524 <_dtoa_r+0x78c>
 80054e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80b7 	beq.w	800565c <_dtoa_r+0x8c4>
 80054ee:	b18c      	cbz	r4, 8005514 <_dtoa_r+0x77c>
 80054f0:	4629      	mov	r1, r5
 80054f2:	4622      	mov	r2, r4
 80054f4:	4658      	mov	r0, fp
 80054f6:	f000 fd11 	bl	8005f1c <__pow5mult>
 80054fa:	464a      	mov	r2, r9
 80054fc:	4601      	mov	r1, r0
 80054fe:	4605      	mov	r5, r0
 8005500:	4658      	mov	r0, fp
 8005502:	f000 fc61 	bl	8005dc8 <__multiply>
 8005506:	4649      	mov	r1, r9
 8005508:	9004      	str	r0, [sp, #16]
 800550a:	4658      	mov	r0, fp
 800550c:	f000 fb48 	bl	8005ba0 <_Bfree>
 8005510:	9b04      	ldr	r3, [sp, #16]
 8005512:	4699      	mov	r9, r3
 8005514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005516:	1b1a      	subs	r2, r3, r4
 8005518:	d004      	beq.n	8005524 <_dtoa_r+0x78c>
 800551a:	4649      	mov	r1, r9
 800551c:	4658      	mov	r0, fp
 800551e:	f000 fcfd 	bl	8005f1c <__pow5mult>
 8005522:	4681      	mov	r9, r0
 8005524:	2101      	movs	r1, #1
 8005526:	4658      	mov	r0, fp
 8005528:	f000 fc38 	bl	8005d9c <__i2b>
 800552c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800552e:	4604      	mov	r4, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 81cf 	beq.w	80058d4 <_dtoa_r+0xb3c>
 8005536:	461a      	mov	r2, r3
 8005538:	4601      	mov	r1, r0
 800553a:	4658      	mov	r0, fp
 800553c:	f000 fcee 	bl	8005f1c <__pow5mult>
 8005540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005542:	2b01      	cmp	r3, #1
 8005544:	4604      	mov	r4, r0
 8005546:	f300 8095 	bgt.w	8005674 <_dtoa_r+0x8dc>
 800554a:	9b02      	ldr	r3, [sp, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 8087 	bne.w	8005660 <_dtoa_r+0x8c8>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 8089 	bne.w	8005670 <_dtoa_r+0x8d8>
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005564:	0d1b      	lsrs	r3, r3, #20
 8005566:	051b      	lsls	r3, r3, #20
 8005568:	b12b      	cbz	r3, 8005576 <_dtoa_r+0x7de>
 800556a:	9b08      	ldr	r3, [sp, #32]
 800556c:	3301      	adds	r3, #1
 800556e:	9308      	str	r3, [sp, #32]
 8005570:	f108 0801 	add.w	r8, r8, #1
 8005574:	2301      	movs	r3, #1
 8005576:	930a      	str	r3, [sp, #40]	@ 0x28
 8005578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 81b0 	beq.w	80058e0 <_dtoa_r+0xb48>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005586:	6918      	ldr	r0, [r3, #16]
 8005588:	f000 fbbc 	bl	8005d04 <__hi0bits>
 800558c:	f1c0 0020 	rsb	r0, r0, #32
 8005590:	9b08      	ldr	r3, [sp, #32]
 8005592:	4418      	add	r0, r3
 8005594:	f010 001f 	ands.w	r0, r0, #31
 8005598:	d077      	beq.n	800568a <_dtoa_r+0x8f2>
 800559a:	f1c0 0320 	rsb	r3, r0, #32
 800559e:	2b04      	cmp	r3, #4
 80055a0:	dd6b      	ble.n	800567a <_dtoa_r+0x8e2>
 80055a2:	9b08      	ldr	r3, [sp, #32]
 80055a4:	f1c0 001c 	rsb	r0, r0, #28
 80055a8:	4403      	add	r3, r0
 80055aa:	4480      	add	r8, r0
 80055ac:	4406      	add	r6, r0
 80055ae:	9308      	str	r3, [sp, #32]
 80055b0:	f1b8 0f00 	cmp.w	r8, #0
 80055b4:	dd05      	ble.n	80055c2 <_dtoa_r+0x82a>
 80055b6:	4649      	mov	r1, r9
 80055b8:	4642      	mov	r2, r8
 80055ba:	4658      	mov	r0, fp
 80055bc:	f000 fd08 	bl	8005fd0 <__lshift>
 80055c0:	4681      	mov	r9, r0
 80055c2:	9b08      	ldr	r3, [sp, #32]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dd05      	ble.n	80055d4 <_dtoa_r+0x83c>
 80055c8:	4621      	mov	r1, r4
 80055ca:	461a      	mov	r2, r3
 80055cc:	4658      	mov	r0, fp
 80055ce:	f000 fcff 	bl	8005fd0 <__lshift>
 80055d2:	4604      	mov	r4, r0
 80055d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d059      	beq.n	800568e <_dtoa_r+0x8f6>
 80055da:	4621      	mov	r1, r4
 80055dc:	4648      	mov	r0, r9
 80055de:	f000 fd63 	bl	80060a8 <__mcmp>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	da53      	bge.n	800568e <_dtoa_r+0x8f6>
 80055e6:	1e7b      	subs	r3, r7, #1
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	4649      	mov	r1, r9
 80055ec:	2300      	movs	r3, #0
 80055ee:	220a      	movs	r2, #10
 80055f0:	4658      	mov	r0, fp
 80055f2:	f000 faf7 	bl	8005be4 <__multadd>
 80055f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055f8:	4681      	mov	r9, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8172 	beq.w	80058e4 <_dtoa_r+0xb4c>
 8005600:	2300      	movs	r3, #0
 8005602:	4629      	mov	r1, r5
 8005604:	220a      	movs	r2, #10
 8005606:	4658      	mov	r0, fp
 8005608:	f000 faec 	bl	8005be4 <__multadd>
 800560c:	9b00      	ldr	r3, [sp, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	4605      	mov	r5, r0
 8005612:	dc67      	bgt.n	80056e4 <_dtoa_r+0x94c>
 8005614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005616:	2b02      	cmp	r3, #2
 8005618:	dc41      	bgt.n	800569e <_dtoa_r+0x906>
 800561a:	e063      	b.n	80056e4 <_dtoa_r+0x94c>
 800561c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800561e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005622:	e746      	b.n	80054b2 <_dtoa_r+0x71a>
 8005624:	9b07      	ldr	r3, [sp, #28]
 8005626:	1e5c      	subs	r4, r3, #1
 8005628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800562a:	42a3      	cmp	r3, r4
 800562c:	bfbf      	itttt	lt
 800562e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005630:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005632:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005634:	1ae3      	sublt	r3, r4, r3
 8005636:	bfb4      	ite	lt
 8005638:	18d2      	addlt	r2, r2, r3
 800563a:	1b1c      	subge	r4, r3, r4
 800563c:	9b07      	ldr	r3, [sp, #28]
 800563e:	bfbc      	itt	lt
 8005640:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005642:	2400      	movlt	r4, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfb5      	itete	lt
 8005648:	eba8 0603 	sublt.w	r6, r8, r3
 800564c:	9b07      	ldrge	r3, [sp, #28]
 800564e:	2300      	movlt	r3, #0
 8005650:	4646      	movge	r6, r8
 8005652:	e730      	b.n	80054b6 <_dtoa_r+0x71e>
 8005654:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005656:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005658:	4646      	mov	r6, r8
 800565a:	e735      	b.n	80054c8 <_dtoa_r+0x730>
 800565c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800565e:	e75c      	b.n	800551a <_dtoa_r+0x782>
 8005660:	2300      	movs	r3, #0
 8005662:	e788      	b.n	8005576 <_dtoa_r+0x7de>
 8005664:	3fe00000 	.word	0x3fe00000
 8005668:	40240000 	.word	0x40240000
 800566c:	40140000 	.word	0x40140000
 8005670:	9b02      	ldr	r3, [sp, #8]
 8005672:	e780      	b.n	8005576 <_dtoa_r+0x7de>
 8005674:	2300      	movs	r3, #0
 8005676:	930a      	str	r3, [sp, #40]	@ 0x28
 8005678:	e782      	b.n	8005580 <_dtoa_r+0x7e8>
 800567a:	d099      	beq.n	80055b0 <_dtoa_r+0x818>
 800567c:	9a08      	ldr	r2, [sp, #32]
 800567e:	331c      	adds	r3, #28
 8005680:	441a      	add	r2, r3
 8005682:	4498      	add	r8, r3
 8005684:	441e      	add	r6, r3
 8005686:	9208      	str	r2, [sp, #32]
 8005688:	e792      	b.n	80055b0 <_dtoa_r+0x818>
 800568a:	4603      	mov	r3, r0
 800568c:	e7f6      	b.n	800567c <_dtoa_r+0x8e4>
 800568e:	9b07      	ldr	r3, [sp, #28]
 8005690:	9704      	str	r7, [sp, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	dc20      	bgt.n	80056d8 <_dtoa_r+0x940>
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800569a:	2b02      	cmp	r3, #2
 800569c:	dd1e      	ble.n	80056dc <_dtoa_r+0x944>
 800569e:	9b00      	ldr	r3, [sp, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f aec0 	bne.w	8005426 <_dtoa_r+0x68e>
 80056a6:	4621      	mov	r1, r4
 80056a8:	2205      	movs	r2, #5
 80056aa:	4658      	mov	r0, fp
 80056ac:	f000 fa9a 	bl	8005be4 <__multadd>
 80056b0:	4601      	mov	r1, r0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4648      	mov	r0, r9
 80056b6:	f000 fcf7 	bl	80060a8 <__mcmp>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f77f aeb3 	ble.w	8005426 <_dtoa_r+0x68e>
 80056c0:	4656      	mov	r6, sl
 80056c2:	2331      	movs	r3, #49	@ 0x31
 80056c4:	f806 3b01 	strb.w	r3, [r6], #1
 80056c8:	9b04      	ldr	r3, [sp, #16]
 80056ca:	3301      	adds	r3, #1
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	e6ae      	b.n	800542e <_dtoa_r+0x696>
 80056d0:	9c07      	ldr	r4, [sp, #28]
 80056d2:	9704      	str	r7, [sp, #16]
 80056d4:	4625      	mov	r5, r4
 80056d6:	e7f3      	b.n	80056c0 <_dtoa_r+0x928>
 80056d8:	9b07      	ldr	r3, [sp, #28]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8104 	beq.w	80058ec <_dtoa_r+0xb54>
 80056e4:	2e00      	cmp	r6, #0
 80056e6:	dd05      	ble.n	80056f4 <_dtoa_r+0x95c>
 80056e8:	4629      	mov	r1, r5
 80056ea:	4632      	mov	r2, r6
 80056ec:	4658      	mov	r0, fp
 80056ee:	f000 fc6f 	bl	8005fd0 <__lshift>
 80056f2:	4605      	mov	r5, r0
 80056f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d05a      	beq.n	80057b0 <_dtoa_r+0xa18>
 80056fa:	6869      	ldr	r1, [r5, #4]
 80056fc:	4658      	mov	r0, fp
 80056fe:	f000 fa0f 	bl	8005b20 <_Balloc>
 8005702:	4606      	mov	r6, r0
 8005704:	b928      	cbnz	r0, 8005712 <_dtoa_r+0x97a>
 8005706:	4b84      	ldr	r3, [pc, #528]	@ (8005918 <_dtoa_r+0xb80>)
 8005708:	4602      	mov	r2, r0
 800570a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800570e:	f7ff bb5a 	b.w	8004dc6 <_dtoa_r+0x2e>
 8005712:	692a      	ldr	r2, [r5, #16]
 8005714:	3202      	adds	r2, #2
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	f105 010c 	add.w	r1, r5, #12
 800571c:	300c      	adds	r0, #12
 800571e:	f002 f94b 	bl	80079b8 <memcpy>
 8005722:	2201      	movs	r2, #1
 8005724:	4631      	mov	r1, r6
 8005726:	4658      	mov	r0, fp
 8005728:	f000 fc52 	bl	8005fd0 <__lshift>
 800572c:	f10a 0301 	add.w	r3, sl, #1
 8005730:	9307      	str	r3, [sp, #28]
 8005732:	9b00      	ldr	r3, [sp, #0]
 8005734:	4453      	add	r3, sl
 8005736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005738:	9b02      	ldr	r3, [sp, #8]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	462f      	mov	r7, r5
 8005740:	930a      	str	r3, [sp, #40]	@ 0x28
 8005742:	4605      	mov	r5, r0
 8005744:	9b07      	ldr	r3, [sp, #28]
 8005746:	4621      	mov	r1, r4
 8005748:	3b01      	subs	r3, #1
 800574a:	4648      	mov	r0, r9
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	f7ff fa9b 	bl	8004c88 <quorem>
 8005752:	4639      	mov	r1, r7
 8005754:	9002      	str	r0, [sp, #8]
 8005756:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800575a:	4648      	mov	r0, r9
 800575c:	f000 fca4 	bl	80060a8 <__mcmp>
 8005760:	462a      	mov	r2, r5
 8005762:	9008      	str	r0, [sp, #32]
 8005764:	4621      	mov	r1, r4
 8005766:	4658      	mov	r0, fp
 8005768:	f000 fcba 	bl	80060e0 <__mdiff>
 800576c:	68c2      	ldr	r2, [r0, #12]
 800576e:	4606      	mov	r6, r0
 8005770:	bb02      	cbnz	r2, 80057b4 <_dtoa_r+0xa1c>
 8005772:	4601      	mov	r1, r0
 8005774:	4648      	mov	r0, r9
 8005776:	f000 fc97 	bl	80060a8 <__mcmp>
 800577a:	4602      	mov	r2, r0
 800577c:	4631      	mov	r1, r6
 800577e:	4658      	mov	r0, fp
 8005780:	920e      	str	r2, [sp, #56]	@ 0x38
 8005782:	f000 fa0d 	bl	8005ba0 <_Bfree>
 8005786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005788:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800578a:	9e07      	ldr	r6, [sp, #28]
 800578c:	ea43 0102 	orr.w	r1, r3, r2
 8005790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005792:	4319      	orrs	r1, r3
 8005794:	d110      	bne.n	80057b8 <_dtoa_r+0xa20>
 8005796:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800579a:	d029      	beq.n	80057f0 <_dtoa_r+0xa58>
 800579c:	9b08      	ldr	r3, [sp, #32]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	dd02      	ble.n	80057a8 <_dtoa_r+0xa10>
 80057a2:	9b02      	ldr	r3, [sp, #8]
 80057a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80057a8:	9b00      	ldr	r3, [sp, #0]
 80057aa:	f883 8000 	strb.w	r8, [r3]
 80057ae:	e63f      	b.n	8005430 <_dtoa_r+0x698>
 80057b0:	4628      	mov	r0, r5
 80057b2:	e7bb      	b.n	800572c <_dtoa_r+0x994>
 80057b4:	2201      	movs	r2, #1
 80057b6:	e7e1      	b.n	800577c <_dtoa_r+0x9e4>
 80057b8:	9b08      	ldr	r3, [sp, #32]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	db04      	blt.n	80057c8 <_dtoa_r+0xa30>
 80057be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057c0:	430b      	orrs	r3, r1
 80057c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057c4:	430b      	orrs	r3, r1
 80057c6:	d120      	bne.n	800580a <_dtoa_r+0xa72>
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	dded      	ble.n	80057a8 <_dtoa_r+0xa10>
 80057cc:	4649      	mov	r1, r9
 80057ce:	2201      	movs	r2, #1
 80057d0:	4658      	mov	r0, fp
 80057d2:	f000 fbfd 	bl	8005fd0 <__lshift>
 80057d6:	4621      	mov	r1, r4
 80057d8:	4681      	mov	r9, r0
 80057da:	f000 fc65 	bl	80060a8 <__mcmp>
 80057de:	2800      	cmp	r0, #0
 80057e0:	dc03      	bgt.n	80057ea <_dtoa_r+0xa52>
 80057e2:	d1e1      	bne.n	80057a8 <_dtoa_r+0xa10>
 80057e4:	f018 0f01 	tst.w	r8, #1
 80057e8:	d0de      	beq.n	80057a8 <_dtoa_r+0xa10>
 80057ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057ee:	d1d8      	bne.n	80057a2 <_dtoa_r+0xa0a>
 80057f0:	9a00      	ldr	r2, [sp, #0]
 80057f2:	2339      	movs	r3, #57	@ 0x39
 80057f4:	7013      	strb	r3, [r2, #0]
 80057f6:	4633      	mov	r3, r6
 80057f8:	461e      	mov	r6, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005800:	2a39      	cmp	r2, #57	@ 0x39
 8005802:	d052      	beq.n	80058aa <_dtoa_r+0xb12>
 8005804:	3201      	adds	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e612      	b.n	8005430 <_dtoa_r+0x698>
 800580a:	2a00      	cmp	r2, #0
 800580c:	dd07      	ble.n	800581e <_dtoa_r+0xa86>
 800580e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005812:	d0ed      	beq.n	80057f0 <_dtoa_r+0xa58>
 8005814:	9a00      	ldr	r2, [sp, #0]
 8005816:	f108 0301 	add.w	r3, r8, #1
 800581a:	7013      	strb	r3, [r2, #0]
 800581c:	e608      	b.n	8005430 <_dtoa_r+0x698>
 800581e:	9b07      	ldr	r3, [sp, #28]
 8005820:	9a07      	ldr	r2, [sp, #28]
 8005822:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005828:	4293      	cmp	r3, r2
 800582a:	d028      	beq.n	800587e <_dtoa_r+0xae6>
 800582c:	4649      	mov	r1, r9
 800582e:	2300      	movs	r3, #0
 8005830:	220a      	movs	r2, #10
 8005832:	4658      	mov	r0, fp
 8005834:	f000 f9d6 	bl	8005be4 <__multadd>
 8005838:	42af      	cmp	r7, r5
 800583a:	4681      	mov	r9, r0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	f04f 020a 	mov.w	r2, #10
 8005844:	4639      	mov	r1, r7
 8005846:	4658      	mov	r0, fp
 8005848:	d107      	bne.n	800585a <_dtoa_r+0xac2>
 800584a:	f000 f9cb 	bl	8005be4 <__multadd>
 800584e:	4607      	mov	r7, r0
 8005850:	4605      	mov	r5, r0
 8005852:	9b07      	ldr	r3, [sp, #28]
 8005854:	3301      	adds	r3, #1
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	e774      	b.n	8005744 <_dtoa_r+0x9ac>
 800585a:	f000 f9c3 	bl	8005be4 <__multadd>
 800585e:	4629      	mov	r1, r5
 8005860:	4607      	mov	r7, r0
 8005862:	2300      	movs	r3, #0
 8005864:	220a      	movs	r2, #10
 8005866:	4658      	mov	r0, fp
 8005868:	f000 f9bc 	bl	8005be4 <__multadd>
 800586c:	4605      	mov	r5, r0
 800586e:	e7f0      	b.n	8005852 <_dtoa_r+0xaba>
 8005870:	9b00      	ldr	r3, [sp, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	bfcc      	ite	gt
 8005876:	461e      	movgt	r6, r3
 8005878:	2601      	movle	r6, #1
 800587a:	4456      	add	r6, sl
 800587c:	2700      	movs	r7, #0
 800587e:	4649      	mov	r1, r9
 8005880:	2201      	movs	r2, #1
 8005882:	4658      	mov	r0, fp
 8005884:	f000 fba4 	bl	8005fd0 <__lshift>
 8005888:	4621      	mov	r1, r4
 800588a:	4681      	mov	r9, r0
 800588c:	f000 fc0c 	bl	80060a8 <__mcmp>
 8005890:	2800      	cmp	r0, #0
 8005892:	dcb0      	bgt.n	80057f6 <_dtoa_r+0xa5e>
 8005894:	d102      	bne.n	800589c <_dtoa_r+0xb04>
 8005896:	f018 0f01 	tst.w	r8, #1
 800589a:	d1ac      	bne.n	80057f6 <_dtoa_r+0xa5e>
 800589c:	4633      	mov	r3, r6
 800589e:	461e      	mov	r6, r3
 80058a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058a4:	2a30      	cmp	r2, #48	@ 0x30
 80058a6:	d0fa      	beq.n	800589e <_dtoa_r+0xb06>
 80058a8:	e5c2      	b.n	8005430 <_dtoa_r+0x698>
 80058aa:	459a      	cmp	sl, r3
 80058ac:	d1a4      	bne.n	80057f8 <_dtoa_r+0xa60>
 80058ae:	9b04      	ldr	r3, [sp, #16]
 80058b0:	3301      	adds	r3, #1
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	2331      	movs	r3, #49	@ 0x31
 80058b6:	f88a 3000 	strb.w	r3, [sl]
 80058ba:	e5b9      	b.n	8005430 <_dtoa_r+0x698>
 80058bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800591c <_dtoa_r+0xb84>
 80058c2:	b11b      	cbz	r3, 80058cc <_dtoa_r+0xb34>
 80058c4:	f10a 0308 	add.w	r3, sl, #8
 80058c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	4650      	mov	r0, sl
 80058ce:	b019      	add	sp, #100	@ 0x64
 80058d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	f77f ae37 	ble.w	800554a <_dtoa_r+0x7b2>
 80058dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058de:	930a      	str	r3, [sp, #40]	@ 0x28
 80058e0:	2001      	movs	r0, #1
 80058e2:	e655      	b.n	8005590 <_dtoa_r+0x7f8>
 80058e4:	9b00      	ldr	r3, [sp, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f77f aed6 	ble.w	8005698 <_dtoa_r+0x900>
 80058ec:	4656      	mov	r6, sl
 80058ee:	4621      	mov	r1, r4
 80058f0:	4648      	mov	r0, r9
 80058f2:	f7ff f9c9 	bl	8004c88 <quorem>
 80058f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80058fa:	f806 8b01 	strb.w	r8, [r6], #1
 80058fe:	9b00      	ldr	r3, [sp, #0]
 8005900:	eba6 020a 	sub.w	r2, r6, sl
 8005904:	4293      	cmp	r3, r2
 8005906:	ddb3      	ble.n	8005870 <_dtoa_r+0xad8>
 8005908:	4649      	mov	r1, r9
 800590a:	2300      	movs	r3, #0
 800590c:	220a      	movs	r2, #10
 800590e:	4658      	mov	r0, fp
 8005910:	f000 f968 	bl	8005be4 <__multadd>
 8005914:	4681      	mov	r9, r0
 8005916:	e7ea      	b.n	80058ee <_dtoa_r+0xb56>
 8005918:	080092f5 	.word	0x080092f5
 800591c:	08009279 	.word	0x08009279

08005920 <_free_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4605      	mov	r5, r0
 8005924:	2900      	cmp	r1, #0
 8005926:	d041      	beq.n	80059ac <_free_r+0x8c>
 8005928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592c:	1f0c      	subs	r4, r1, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	bfb8      	it	lt
 8005932:	18e4      	addlt	r4, r4, r3
 8005934:	f000 f8e8 	bl	8005b08 <__malloc_lock>
 8005938:	4a1d      	ldr	r2, [pc, #116]	@ (80059b0 <_free_r+0x90>)
 800593a:	6813      	ldr	r3, [r2, #0]
 800593c:	b933      	cbnz	r3, 800594c <_free_r+0x2c>
 800593e:	6063      	str	r3, [r4, #4]
 8005940:	6014      	str	r4, [r2, #0]
 8005942:	4628      	mov	r0, r5
 8005944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005948:	f000 b8e4 	b.w	8005b14 <__malloc_unlock>
 800594c:	42a3      	cmp	r3, r4
 800594e:	d908      	bls.n	8005962 <_free_r+0x42>
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	1821      	adds	r1, r4, r0
 8005954:	428b      	cmp	r3, r1
 8005956:	bf01      	itttt	eq
 8005958:	6819      	ldreq	r1, [r3, #0]
 800595a:	685b      	ldreq	r3, [r3, #4]
 800595c:	1809      	addeq	r1, r1, r0
 800595e:	6021      	streq	r1, [r4, #0]
 8005960:	e7ed      	b.n	800593e <_free_r+0x1e>
 8005962:	461a      	mov	r2, r3
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	b10b      	cbz	r3, 800596c <_free_r+0x4c>
 8005968:	42a3      	cmp	r3, r4
 800596a:	d9fa      	bls.n	8005962 <_free_r+0x42>
 800596c:	6811      	ldr	r1, [r2, #0]
 800596e:	1850      	adds	r0, r2, r1
 8005970:	42a0      	cmp	r0, r4
 8005972:	d10b      	bne.n	800598c <_free_r+0x6c>
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	4401      	add	r1, r0
 8005978:	1850      	adds	r0, r2, r1
 800597a:	4283      	cmp	r3, r0
 800597c:	6011      	str	r1, [r2, #0]
 800597e:	d1e0      	bne.n	8005942 <_free_r+0x22>
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	6053      	str	r3, [r2, #4]
 8005986:	4408      	add	r0, r1
 8005988:	6010      	str	r0, [r2, #0]
 800598a:	e7da      	b.n	8005942 <_free_r+0x22>
 800598c:	d902      	bls.n	8005994 <_free_r+0x74>
 800598e:	230c      	movs	r3, #12
 8005990:	602b      	str	r3, [r5, #0]
 8005992:	e7d6      	b.n	8005942 <_free_r+0x22>
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	1821      	adds	r1, r4, r0
 8005998:	428b      	cmp	r3, r1
 800599a:	bf04      	itt	eq
 800599c:	6819      	ldreq	r1, [r3, #0]
 800599e:	685b      	ldreq	r3, [r3, #4]
 80059a0:	6063      	str	r3, [r4, #4]
 80059a2:	bf04      	itt	eq
 80059a4:	1809      	addeq	r1, r1, r0
 80059a6:	6021      	streq	r1, [r4, #0]
 80059a8:	6054      	str	r4, [r2, #4]
 80059aa:	e7ca      	b.n	8005942 <_free_r+0x22>
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	bf00      	nop
 80059b0:	200003c8 	.word	0x200003c8

080059b4 <malloc>:
 80059b4:	4b02      	ldr	r3, [pc, #8]	@ (80059c0 <malloc+0xc>)
 80059b6:	4601      	mov	r1, r0
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	f000 b825 	b.w	8005a08 <_malloc_r>
 80059be:	bf00      	nop
 80059c0:	20000018 	.word	0x20000018

080059c4 <sbrk_aligned>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005a04 <sbrk_aligned+0x40>)
 80059c8:	460c      	mov	r4, r1
 80059ca:	6831      	ldr	r1, [r6, #0]
 80059cc:	4605      	mov	r5, r0
 80059ce:	b911      	cbnz	r1, 80059d6 <sbrk_aligned+0x12>
 80059d0:	f001 ffe2 	bl	8007998 <_sbrk_r>
 80059d4:	6030      	str	r0, [r6, #0]
 80059d6:	4621      	mov	r1, r4
 80059d8:	4628      	mov	r0, r5
 80059da:	f001 ffdd 	bl	8007998 <_sbrk_r>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	d103      	bne.n	80059ea <sbrk_aligned+0x26>
 80059e2:	f04f 34ff 	mov.w	r4, #4294967295
 80059e6:	4620      	mov	r0, r4
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	1cc4      	adds	r4, r0, #3
 80059ec:	f024 0403 	bic.w	r4, r4, #3
 80059f0:	42a0      	cmp	r0, r4
 80059f2:	d0f8      	beq.n	80059e6 <sbrk_aligned+0x22>
 80059f4:	1a21      	subs	r1, r4, r0
 80059f6:	4628      	mov	r0, r5
 80059f8:	f001 ffce 	bl	8007998 <_sbrk_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	d1f2      	bne.n	80059e6 <sbrk_aligned+0x22>
 8005a00:	e7ef      	b.n	80059e2 <sbrk_aligned+0x1e>
 8005a02:	bf00      	nop
 8005a04:	200003c4 	.word	0x200003c4

08005a08 <_malloc_r>:
 8005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	1ccd      	adds	r5, r1, #3
 8005a0e:	f025 0503 	bic.w	r5, r5, #3
 8005a12:	3508      	adds	r5, #8
 8005a14:	2d0c      	cmp	r5, #12
 8005a16:	bf38      	it	cc
 8005a18:	250c      	movcc	r5, #12
 8005a1a:	2d00      	cmp	r5, #0
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	db01      	blt.n	8005a24 <_malloc_r+0x1c>
 8005a20:	42a9      	cmp	r1, r5
 8005a22:	d904      	bls.n	8005a2e <_malloc_r+0x26>
 8005a24:	230c      	movs	r3, #12
 8005a26:	6033      	str	r3, [r6, #0]
 8005a28:	2000      	movs	r0, #0
 8005a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b04 <_malloc_r+0xfc>
 8005a32:	f000 f869 	bl	8005b08 <__malloc_lock>
 8005a36:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3a:	461c      	mov	r4, r3
 8005a3c:	bb44      	cbnz	r4, 8005a90 <_malloc_r+0x88>
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff ffbf 	bl	80059c4 <sbrk_aligned>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	4604      	mov	r4, r0
 8005a4a:	d158      	bne.n	8005afe <_malloc_r+0xf6>
 8005a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a50:	4627      	mov	r7, r4
 8005a52:	2f00      	cmp	r7, #0
 8005a54:	d143      	bne.n	8005ade <_malloc_r+0xd6>
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	d04b      	beq.n	8005af2 <_malloc_r+0xea>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	4630      	mov	r0, r6
 8005a60:	eb04 0903 	add.w	r9, r4, r3
 8005a64:	f001 ff98 	bl	8007998 <_sbrk_r>
 8005a68:	4581      	cmp	r9, r0
 8005a6a:	d142      	bne.n	8005af2 <_malloc_r+0xea>
 8005a6c:	6821      	ldr	r1, [r4, #0]
 8005a6e:	1a6d      	subs	r5, r5, r1
 8005a70:	4629      	mov	r1, r5
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ffa6 	bl	80059c4 <sbrk_aligned>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d03a      	beq.n	8005af2 <_malloc_r+0xea>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	442b      	add	r3, r5
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	f8d8 3000 	ldr.w	r3, [r8]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	bb62      	cbnz	r2, 8005ae4 <_malloc_r+0xdc>
 8005a8a:	f8c8 7000 	str.w	r7, [r8]
 8005a8e:	e00f      	b.n	8005ab0 <_malloc_r+0xa8>
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	1b52      	subs	r2, r2, r5
 8005a94:	d420      	bmi.n	8005ad8 <_malloc_r+0xd0>
 8005a96:	2a0b      	cmp	r2, #11
 8005a98:	d917      	bls.n	8005aca <_malloc_r+0xc2>
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	6025      	str	r5, [r4, #0]
 8005aa0:	bf18      	it	ne
 8005aa2:	6059      	strne	r1, [r3, #4]
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	bf08      	it	eq
 8005aa8:	f8c8 1000 	streq.w	r1, [r8]
 8005aac:	5162      	str	r2, [r4, r5]
 8005aae:	604b      	str	r3, [r1, #4]
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f000 f82f 	bl	8005b14 <__malloc_unlock>
 8005ab6:	f104 000b 	add.w	r0, r4, #11
 8005aba:	1d23      	adds	r3, r4, #4
 8005abc:	f020 0007 	bic.w	r0, r0, #7
 8005ac0:	1ac2      	subs	r2, r0, r3
 8005ac2:	bf1c      	itt	ne
 8005ac4:	1a1b      	subne	r3, r3, r0
 8005ac6:	50a3      	strne	r3, [r4, r2]
 8005ac8:	e7af      	b.n	8005a2a <_malloc_r+0x22>
 8005aca:	6862      	ldr	r2, [r4, #4]
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	bf0c      	ite	eq
 8005ad0:	f8c8 2000 	streq.w	r2, [r8]
 8005ad4:	605a      	strne	r2, [r3, #4]
 8005ad6:	e7eb      	b.n	8005ab0 <_malloc_r+0xa8>
 8005ad8:	4623      	mov	r3, r4
 8005ada:	6864      	ldr	r4, [r4, #4]
 8005adc:	e7ae      	b.n	8005a3c <_malloc_r+0x34>
 8005ade:	463c      	mov	r4, r7
 8005ae0:	687f      	ldr	r7, [r7, #4]
 8005ae2:	e7b6      	b.n	8005a52 <_malloc_r+0x4a>
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d1fb      	bne.n	8005ae4 <_malloc_r+0xdc>
 8005aec:	2300      	movs	r3, #0
 8005aee:	6053      	str	r3, [r2, #4]
 8005af0:	e7de      	b.n	8005ab0 <_malloc_r+0xa8>
 8005af2:	230c      	movs	r3, #12
 8005af4:	6033      	str	r3, [r6, #0]
 8005af6:	4630      	mov	r0, r6
 8005af8:	f000 f80c 	bl	8005b14 <__malloc_unlock>
 8005afc:	e794      	b.n	8005a28 <_malloc_r+0x20>
 8005afe:	6005      	str	r5, [r0, #0]
 8005b00:	e7d6      	b.n	8005ab0 <_malloc_r+0xa8>
 8005b02:	bf00      	nop
 8005b04:	200003c8 	.word	0x200003c8

08005b08 <__malloc_lock>:
 8005b08:	4801      	ldr	r0, [pc, #4]	@ (8005b10 <__malloc_lock+0x8>)
 8005b0a:	f7ff b8b4 	b.w	8004c76 <__retarget_lock_acquire_recursive>
 8005b0e:	bf00      	nop
 8005b10:	200003c0 	.word	0x200003c0

08005b14 <__malloc_unlock>:
 8005b14:	4801      	ldr	r0, [pc, #4]	@ (8005b1c <__malloc_unlock+0x8>)
 8005b16:	f7ff b8af 	b.w	8004c78 <__retarget_lock_release_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	200003c0 	.word	0x200003c0

08005b20 <_Balloc>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	69c6      	ldr	r6, [r0, #28]
 8005b24:	4604      	mov	r4, r0
 8005b26:	460d      	mov	r5, r1
 8005b28:	b976      	cbnz	r6, 8005b48 <_Balloc+0x28>
 8005b2a:	2010      	movs	r0, #16
 8005b2c:	f7ff ff42 	bl	80059b4 <malloc>
 8005b30:	4602      	mov	r2, r0
 8005b32:	61e0      	str	r0, [r4, #28]
 8005b34:	b920      	cbnz	r0, 8005b40 <_Balloc+0x20>
 8005b36:	4b18      	ldr	r3, [pc, #96]	@ (8005b98 <_Balloc+0x78>)
 8005b38:	4818      	ldr	r0, [pc, #96]	@ (8005b9c <_Balloc+0x7c>)
 8005b3a:	216b      	movs	r1, #107	@ 0x6b
 8005b3c:	f001 ff54 	bl	80079e8 <__assert_func>
 8005b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b44:	6006      	str	r6, [r0, #0]
 8005b46:	60c6      	str	r6, [r0, #12]
 8005b48:	69e6      	ldr	r6, [r4, #28]
 8005b4a:	68f3      	ldr	r3, [r6, #12]
 8005b4c:	b183      	cbz	r3, 8005b70 <_Balloc+0x50>
 8005b4e:	69e3      	ldr	r3, [r4, #28]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b56:	b9b8      	cbnz	r0, 8005b88 <_Balloc+0x68>
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b5e:	1d72      	adds	r2, r6, #5
 8005b60:	0092      	lsls	r2, r2, #2
 8005b62:	4620      	mov	r0, r4
 8005b64:	f001 ff5e 	bl	8007a24 <_calloc_r>
 8005b68:	b160      	cbz	r0, 8005b84 <_Balloc+0x64>
 8005b6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b6e:	e00e      	b.n	8005b8e <_Balloc+0x6e>
 8005b70:	2221      	movs	r2, #33	@ 0x21
 8005b72:	2104      	movs	r1, #4
 8005b74:	4620      	mov	r0, r4
 8005b76:	f001 ff55 	bl	8007a24 <_calloc_r>
 8005b7a:	69e3      	ldr	r3, [r4, #28]
 8005b7c:	60f0      	str	r0, [r6, #12]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e4      	bne.n	8005b4e <_Balloc+0x2e>
 8005b84:	2000      	movs	r0, #0
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	6802      	ldr	r2, [r0, #0]
 8005b8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b94:	e7f7      	b.n	8005b86 <_Balloc+0x66>
 8005b96:	bf00      	nop
 8005b98:	08009286 	.word	0x08009286
 8005b9c:	08009306 	.word	0x08009306

08005ba0 <_Bfree>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	69c6      	ldr	r6, [r0, #28]
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	b976      	cbnz	r6, 8005bc8 <_Bfree+0x28>
 8005baa:	2010      	movs	r0, #16
 8005bac:	f7ff ff02 	bl	80059b4 <malloc>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	61e8      	str	r0, [r5, #28]
 8005bb4:	b920      	cbnz	r0, 8005bc0 <_Bfree+0x20>
 8005bb6:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <_Bfree+0x3c>)
 8005bb8:	4809      	ldr	r0, [pc, #36]	@ (8005be0 <_Bfree+0x40>)
 8005bba:	218f      	movs	r1, #143	@ 0x8f
 8005bbc:	f001 ff14 	bl	80079e8 <__assert_func>
 8005bc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bc4:	6006      	str	r6, [r0, #0]
 8005bc6:	60c6      	str	r6, [r0, #12]
 8005bc8:	b13c      	cbz	r4, 8005bda <_Bfree+0x3a>
 8005bca:	69eb      	ldr	r3, [r5, #28]
 8005bcc:	6862      	ldr	r2, [r4, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bd4:	6021      	str	r1, [r4, #0]
 8005bd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	08009286 	.word	0x08009286
 8005be0:	08009306 	.word	0x08009306

08005be4 <__multadd>:
 8005be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be8:	690d      	ldr	r5, [r1, #16]
 8005bea:	4607      	mov	r7, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	461e      	mov	r6, r3
 8005bf0:	f101 0c14 	add.w	ip, r1, #20
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8005bfa:	b299      	uxth	r1, r3
 8005bfc:	fb02 6101 	mla	r1, r2, r1, r6
 8005c00:	0c1e      	lsrs	r6, r3, #16
 8005c02:	0c0b      	lsrs	r3, r1, #16
 8005c04:	fb02 3306 	mla	r3, r2, r6, r3
 8005c08:	b289      	uxth	r1, r1
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c10:	4285      	cmp	r5, r0
 8005c12:	f84c 1b04 	str.w	r1, [ip], #4
 8005c16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c1a:	dcec      	bgt.n	8005bf6 <__multadd+0x12>
 8005c1c:	b30e      	cbz	r6, 8005c62 <__multadd+0x7e>
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	42ab      	cmp	r3, r5
 8005c22:	dc19      	bgt.n	8005c58 <__multadd+0x74>
 8005c24:	6861      	ldr	r1, [r4, #4]
 8005c26:	4638      	mov	r0, r7
 8005c28:	3101      	adds	r1, #1
 8005c2a:	f7ff ff79 	bl	8005b20 <_Balloc>
 8005c2e:	4680      	mov	r8, r0
 8005c30:	b928      	cbnz	r0, 8005c3e <__multadd+0x5a>
 8005c32:	4602      	mov	r2, r0
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <__multadd+0x84>)
 8005c36:	480d      	ldr	r0, [pc, #52]	@ (8005c6c <__multadd+0x88>)
 8005c38:	21ba      	movs	r1, #186	@ 0xba
 8005c3a:	f001 fed5 	bl	80079e8 <__assert_func>
 8005c3e:	6922      	ldr	r2, [r4, #16]
 8005c40:	3202      	adds	r2, #2
 8005c42:	f104 010c 	add.w	r1, r4, #12
 8005c46:	0092      	lsls	r2, r2, #2
 8005c48:	300c      	adds	r0, #12
 8005c4a:	f001 feb5 	bl	80079b8 <memcpy>
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4638      	mov	r0, r7
 8005c52:	f7ff ffa5 	bl	8005ba0 <_Bfree>
 8005c56:	4644      	mov	r4, r8
 8005c58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	615e      	str	r6, [r3, #20]
 8005c60:	6125      	str	r5, [r4, #16]
 8005c62:	4620      	mov	r0, r4
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	080092f5 	.word	0x080092f5
 8005c6c:	08009306 	.word	0x08009306

08005c70 <__s2b>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	460c      	mov	r4, r1
 8005c76:	4615      	mov	r5, r2
 8005c78:	461f      	mov	r7, r3
 8005c7a:	2209      	movs	r2, #9
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	4606      	mov	r6, r0
 8005c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c84:	2100      	movs	r1, #0
 8005c86:	2201      	movs	r2, #1
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	db09      	blt.n	8005ca0 <__s2b+0x30>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff ff47 	bl	8005b20 <_Balloc>
 8005c92:	b940      	cbnz	r0, 8005ca6 <__s2b+0x36>
 8005c94:	4602      	mov	r2, r0
 8005c96:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <__s2b+0x8c>)
 8005c98:	4819      	ldr	r0, [pc, #100]	@ (8005d00 <__s2b+0x90>)
 8005c9a:	21d3      	movs	r1, #211	@ 0xd3
 8005c9c:	f001 fea4 	bl	80079e8 <__assert_func>
 8005ca0:	0052      	lsls	r2, r2, #1
 8005ca2:	3101      	adds	r1, #1
 8005ca4:	e7f0      	b.n	8005c88 <__s2b+0x18>
 8005ca6:	9b08      	ldr	r3, [sp, #32]
 8005ca8:	6143      	str	r3, [r0, #20]
 8005caa:	2d09      	cmp	r5, #9
 8005cac:	f04f 0301 	mov.w	r3, #1
 8005cb0:	6103      	str	r3, [r0, #16]
 8005cb2:	dd16      	ble.n	8005ce2 <__s2b+0x72>
 8005cb4:	f104 0909 	add.w	r9, r4, #9
 8005cb8:	46c8      	mov	r8, r9
 8005cba:	442c      	add	r4, r5
 8005cbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005cc0:	4601      	mov	r1, r0
 8005cc2:	3b30      	subs	r3, #48	@ 0x30
 8005cc4:	220a      	movs	r2, #10
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff ff8c 	bl	8005be4 <__multadd>
 8005ccc:	45a0      	cmp	r8, r4
 8005cce:	d1f5      	bne.n	8005cbc <__s2b+0x4c>
 8005cd0:	f1a5 0408 	sub.w	r4, r5, #8
 8005cd4:	444c      	add	r4, r9
 8005cd6:	1b2d      	subs	r5, r5, r4
 8005cd8:	1963      	adds	r3, r4, r5
 8005cda:	42bb      	cmp	r3, r7
 8005cdc:	db04      	blt.n	8005ce8 <__s2b+0x78>
 8005cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce2:	340a      	adds	r4, #10
 8005ce4:	2509      	movs	r5, #9
 8005ce6:	e7f6      	b.n	8005cd6 <__s2b+0x66>
 8005ce8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005cec:	4601      	mov	r1, r0
 8005cee:	3b30      	subs	r3, #48	@ 0x30
 8005cf0:	220a      	movs	r2, #10
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff ff76 	bl	8005be4 <__multadd>
 8005cf8:	e7ee      	b.n	8005cd8 <__s2b+0x68>
 8005cfa:	bf00      	nop
 8005cfc:	080092f5 	.word	0x080092f5
 8005d00:	08009306 	.word	0x08009306

08005d04 <__hi0bits>:
 8005d04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d08:	4603      	mov	r3, r0
 8005d0a:	bf36      	itet	cc
 8005d0c:	0403      	lslcc	r3, r0, #16
 8005d0e:	2000      	movcs	r0, #0
 8005d10:	2010      	movcc	r0, #16
 8005d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d16:	bf3c      	itt	cc
 8005d18:	021b      	lslcc	r3, r3, #8
 8005d1a:	3008      	addcc	r0, #8
 8005d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d20:	bf3c      	itt	cc
 8005d22:	011b      	lslcc	r3, r3, #4
 8005d24:	3004      	addcc	r0, #4
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2a:	bf3c      	itt	cc
 8005d2c:	009b      	lslcc	r3, r3, #2
 8005d2e:	3002      	addcc	r0, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	db05      	blt.n	8005d40 <__hi0bits+0x3c>
 8005d34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d38:	f100 0001 	add.w	r0, r0, #1
 8005d3c:	bf08      	it	eq
 8005d3e:	2020      	moveq	r0, #32
 8005d40:	4770      	bx	lr

08005d42 <__lo0bits>:
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	4602      	mov	r2, r0
 8005d46:	f013 0007 	ands.w	r0, r3, #7
 8005d4a:	d00b      	beq.n	8005d64 <__lo0bits+0x22>
 8005d4c:	07d9      	lsls	r1, r3, #31
 8005d4e:	d421      	bmi.n	8005d94 <__lo0bits+0x52>
 8005d50:	0798      	lsls	r0, r3, #30
 8005d52:	bf49      	itett	mi
 8005d54:	085b      	lsrmi	r3, r3, #1
 8005d56:	089b      	lsrpl	r3, r3, #2
 8005d58:	2001      	movmi	r0, #1
 8005d5a:	6013      	strmi	r3, [r2, #0]
 8005d5c:	bf5c      	itt	pl
 8005d5e:	6013      	strpl	r3, [r2, #0]
 8005d60:	2002      	movpl	r0, #2
 8005d62:	4770      	bx	lr
 8005d64:	b299      	uxth	r1, r3
 8005d66:	b909      	cbnz	r1, 8005d6c <__lo0bits+0x2a>
 8005d68:	0c1b      	lsrs	r3, r3, #16
 8005d6a:	2010      	movs	r0, #16
 8005d6c:	b2d9      	uxtb	r1, r3
 8005d6e:	b909      	cbnz	r1, 8005d74 <__lo0bits+0x32>
 8005d70:	3008      	adds	r0, #8
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	0719      	lsls	r1, r3, #28
 8005d76:	bf04      	itt	eq
 8005d78:	091b      	lsreq	r3, r3, #4
 8005d7a:	3004      	addeq	r0, #4
 8005d7c:	0799      	lsls	r1, r3, #30
 8005d7e:	bf04      	itt	eq
 8005d80:	089b      	lsreq	r3, r3, #2
 8005d82:	3002      	addeq	r0, #2
 8005d84:	07d9      	lsls	r1, r3, #31
 8005d86:	d403      	bmi.n	8005d90 <__lo0bits+0x4e>
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	f100 0001 	add.w	r0, r0, #1
 8005d8e:	d003      	beq.n	8005d98 <__lo0bits+0x56>
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4770      	bx	lr
 8005d94:	2000      	movs	r0, #0
 8005d96:	4770      	bx	lr
 8005d98:	2020      	movs	r0, #32
 8005d9a:	4770      	bx	lr

08005d9c <__i2b>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	460c      	mov	r4, r1
 8005da0:	2101      	movs	r1, #1
 8005da2:	f7ff febd 	bl	8005b20 <_Balloc>
 8005da6:	4602      	mov	r2, r0
 8005da8:	b928      	cbnz	r0, 8005db6 <__i2b+0x1a>
 8005daa:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <__i2b+0x24>)
 8005dac:	4805      	ldr	r0, [pc, #20]	@ (8005dc4 <__i2b+0x28>)
 8005dae:	f240 1145 	movw	r1, #325	@ 0x145
 8005db2:	f001 fe19 	bl	80079e8 <__assert_func>
 8005db6:	2301      	movs	r3, #1
 8005db8:	6144      	str	r4, [r0, #20]
 8005dba:	6103      	str	r3, [r0, #16]
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop
 8005dc0:	080092f5 	.word	0x080092f5
 8005dc4:	08009306 	.word	0x08009306

08005dc8 <__multiply>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	4614      	mov	r4, r2
 8005dce:	690a      	ldr	r2, [r1, #16]
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	bfa8      	it	ge
 8005dd6:	4623      	movge	r3, r4
 8005dd8:	460f      	mov	r7, r1
 8005dda:	bfa4      	itt	ge
 8005ddc:	460c      	movge	r4, r1
 8005dde:	461f      	movge	r7, r3
 8005de0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005de4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	6861      	ldr	r1, [r4, #4]
 8005dec:	eb0a 0609 	add.w	r6, sl, r9
 8005df0:	42b3      	cmp	r3, r6
 8005df2:	b085      	sub	sp, #20
 8005df4:	bfb8      	it	lt
 8005df6:	3101      	addlt	r1, #1
 8005df8:	f7ff fe92 	bl	8005b20 <_Balloc>
 8005dfc:	b930      	cbnz	r0, 8005e0c <__multiply+0x44>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b44      	ldr	r3, [pc, #272]	@ (8005f14 <__multiply+0x14c>)
 8005e02:	4845      	ldr	r0, [pc, #276]	@ (8005f18 <__multiply+0x150>)
 8005e04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e08:	f001 fdee 	bl	80079e8 <__assert_func>
 8005e0c:	f100 0514 	add.w	r5, r0, #20
 8005e10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e14:	462b      	mov	r3, r5
 8005e16:	2200      	movs	r2, #0
 8005e18:	4543      	cmp	r3, r8
 8005e1a:	d321      	bcc.n	8005e60 <__multiply+0x98>
 8005e1c:	f107 0114 	add.w	r1, r7, #20
 8005e20:	f104 0214 	add.w	r2, r4, #20
 8005e24:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005e28:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005e2c:	9302      	str	r3, [sp, #8]
 8005e2e:	1b13      	subs	r3, r2, r4
 8005e30:	3b15      	subs	r3, #21
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	3304      	adds	r3, #4
 8005e38:	f104 0715 	add.w	r7, r4, #21
 8005e3c:	42ba      	cmp	r2, r7
 8005e3e:	bf38      	it	cc
 8005e40:	2304      	movcc	r3, #4
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	9b02      	ldr	r3, [sp, #8]
 8005e46:	9103      	str	r1, [sp, #12]
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	d80c      	bhi.n	8005e66 <__multiply+0x9e>
 8005e4c:	2e00      	cmp	r6, #0
 8005e4e:	dd03      	ble.n	8005e58 <__multiply+0x90>
 8005e50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05b      	beq.n	8005f10 <__multiply+0x148>
 8005e58:	6106      	str	r6, [r0, #16]
 8005e5a:	b005      	add	sp, #20
 8005e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e60:	f843 2b04 	str.w	r2, [r3], #4
 8005e64:	e7d8      	b.n	8005e18 <__multiply+0x50>
 8005e66:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e6a:	f1ba 0f00 	cmp.w	sl, #0
 8005e6e:	d024      	beq.n	8005eba <__multiply+0xf2>
 8005e70:	f104 0e14 	add.w	lr, r4, #20
 8005e74:	46a9      	mov	r9, r5
 8005e76:	f04f 0c00 	mov.w	ip, #0
 8005e7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e7e:	f8d9 3000 	ldr.w	r3, [r9]
 8005e82:	fa1f fb87 	uxth.w	fp, r7
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	fb0a 330b 	mla	r3, sl, fp, r3
 8005e8c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005e90:	f8d9 7000 	ldr.w	r7, [r9]
 8005e94:	4463      	add	r3, ip
 8005e96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005e9a:	fb0a c70b 	mla	r7, sl, fp, ip
 8005e9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ea8:	4572      	cmp	r2, lr
 8005eaa:	f849 3b04 	str.w	r3, [r9], #4
 8005eae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005eb2:	d8e2      	bhi.n	8005e7a <__multiply+0xb2>
 8005eb4:	9b01      	ldr	r3, [sp, #4]
 8005eb6:	f845 c003 	str.w	ip, [r5, r3]
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ec0:	3104      	adds	r1, #4
 8005ec2:	f1b9 0f00 	cmp.w	r9, #0
 8005ec6:	d021      	beq.n	8005f0c <__multiply+0x144>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	f104 0c14 	add.w	ip, r4, #20
 8005ece:	46ae      	mov	lr, r5
 8005ed0:	f04f 0a00 	mov.w	sl, #0
 8005ed4:	f8bc b000 	ldrh.w	fp, [ip]
 8005ed8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005edc:	fb09 770b 	mla	r7, r9, fp, r7
 8005ee0:	4457      	add	r7, sl
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ee8:	f84e 3b04 	str.w	r3, [lr], #4
 8005eec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ef0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ef4:	f8be 3000 	ldrh.w	r3, [lr]
 8005ef8:	fb09 330a 	mla	r3, r9, sl, r3
 8005efc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005f00:	4562      	cmp	r2, ip
 8005f02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f06:	d8e5      	bhi.n	8005ed4 <__multiply+0x10c>
 8005f08:	9f01      	ldr	r7, [sp, #4]
 8005f0a:	51eb      	str	r3, [r5, r7]
 8005f0c:	3504      	adds	r5, #4
 8005f0e:	e799      	b.n	8005e44 <__multiply+0x7c>
 8005f10:	3e01      	subs	r6, #1
 8005f12:	e79b      	b.n	8005e4c <__multiply+0x84>
 8005f14:	080092f5 	.word	0x080092f5
 8005f18:	08009306 	.word	0x08009306

08005f1c <__pow5mult>:
 8005f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f20:	4615      	mov	r5, r2
 8005f22:	f012 0203 	ands.w	r2, r2, #3
 8005f26:	4607      	mov	r7, r0
 8005f28:	460e      	mov	r6, r1
 8005f2a:	d007      	beq.n	8005f3c <__pow5mult+0x20>
 8005f2c:	4c25      	ldr	r4, [pc, #148]	@ (8005fc4 <__pow5mult+0xa8>)
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	2300      	movs	r3, #0
 8005f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f36:	f7ff fe55 	bl	8005be4 <__multadd>
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	10ad      	asrs	r5, r5, #2
 8005f3e:	d03d      	beq.n	8005fbc <__pow5mult+0xa0>
 8005f40:	69fc      	ldr	r4, [r7, #28]
 8005f42:	b97c      	cbnz	r4, 8005f64 <__pow5mult+0x48>
 8005f44:	2010      	movs	r0, #16
 8005f46:	f7ff fd35 	bl	80059b4 <malloc>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	61f8      	str	r0, [r7, #28]
 8005f4e:	b928      	cbnz	r0, 8005f5c <__pow5mult+0x40>
 8005f50:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc8 <__pow5mult+0xac>)
 8005f52:	481e      	ldr	r0, [pc, #120]	@ (8005fcc <__pow5mult+0xb0>)
 8005f54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f58:	f001 fd46 	bl	80079e8 <__assert_func>
 8005f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f60:	6004      	str	r4, [r0, #0]
 8005f62:	60c4      	str	r4, [r0, #12]
 8005f64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f6c:	b94c      	cbnz	r4, 8005f82 <__pow5mult+0x66>
 8005f6e:	f240 2171 	movw	r1, #625	@ 0x271
 8005f72:	4638      	mov	r0, r7
 8005f74:	f7ff ff12 	bl	8005d9c <__i2b>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f7e:	4604      	mov	r4, r0
 8005f80:	6003      	str	r3, [r0, #0]
 8005f82:	f04f 0900 	mov.w	r9, #0
 8005f86:	07eb      	lsls	r3, r5, #31
 8005f88:	d50a      	bpl.n	8005fa0 <__pow5mult+0x84>
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	4638      	mov	r0, r7
 8005f90:	f7ff ff1a 	bl	8005dc8 <__multiply>
 8005f94:	4631      	mov	r1, r6
 8005f96:	4680      	mov	r8, r0
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f7ff fe01 	bl	8005ba0 <_Bfree>
 8005f9e:	4646      	mov	r6, r8
 8005fa0:	106d      	asrs	r5, r5, #1
 8005fa2:	d00b      	beq.n	8005fbc <__pow5mult+0xa0>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	b938      	cbnz	r0, 8005fb8 <__pow5mult+0x9c>
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4621      	mov	r1, r4
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ff0b 	bl	8005dc8 <__multiply>
 8005fb2:	6020      	str	r0, [r4, #0]
 8005fb4:	f8c0 9000 	str.w	r9, [r0]
 8005fb8:	4604      	mov	r4, r0
 8005fba:	e7e4      	b.n	8005f86 <__pow5mult+0x6a>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08009360 	.word	0x08009360
 8005fc8:	08009286 	.word	0x08009286
 8005fcc:	08009306 	.word	0x08009306

08005fd0 <__lshift>:
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	6849      	ldr	r1, [r1, #4]
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	4691      	mov	r9, r2
 8005fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fe8:	f108 0601 	add.w	r6, r8, #1
 8005fec:	42b3      	cmp	r3, r6
 8005fee:	db0b      	blt.n	8006008 <__lshift+0x38>
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	f7ff fd95 	bl	8005b20 <_Balloc>
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	b948      	cbnz	r0, 800600e <__lshift+0x3e>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	4b28      	ldr	r3, [pc, #160]	@ (80060a0 <__lshift+0xd0>)
 8005ffe:	4829      	ldr	r0, [pc, #164]	@ (80060a4 <__lshift+0xd4>)
 8006000:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006004:	f001 fcf0 	bl	80079e8 <__assert_func>
 8006008:	3101      	adds	r1, #1
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	e7ee      	b.n	8005fec <__lshift+0x1c>
 800600e:	2300      	movs	r3, #0
 8006010:	f100 0114 	add.w	r1, r0, #20
 8006014:	f100 0210 	add.w	r2, r0, #16
 8006018:	4618      	mov	r0, r3
 800601a:	4553      	cmp	r3, sl
 800601c:	db33      	blt.n	8006086 <__lshift+0xb6>
 800601e:	6920      	ldr	r0, [r4, #16]
 8006020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006024:	f104 0314 	add.w	r3, r4, #20
 8006028:	f019 091f 	ands.w	r9, r9, #31
 800602c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006030:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006034:	d02b      	beq.n	800608e <__lshift+0xbe>
 8006036:	f1c9 0e20 	rsb	lr, r9, #32
 800603a:	468a      	mov	sl, r1
 800603c:	2200      	movs	r2, #0
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	fa00 f009 	lsl.w	r0, r0, r9
 8006044:	4310      	orrs	r0, r2
 8006046:	f84a 0b04 	str.w	r0, [sl], #4
 800604a:	f853 2b04 	ldr.w	r2, [r3], #4
 800604e:	459c      	cmp	ip, r3
 8006050:	fa22 f20e 	lsr.w	r2, r2, lr
 8006054:	d8f3      	bhi.n	800603e <__lshift+0x6e>
 8006056:	ebac 0304 	sub.w	r3, ip, r4
 800605a:	3b15      	subs	r3, #21
 800605c:	f023 0303 	bic.w	r3, r3, #3
 8006060:	3304      	adds	r3, #4
 8006062:	f104 0015 	add.w	r0, r4, #21
 8006066:	4584      	cmp	ip, r0
 8006068:	bf38      	it	cc
 800606a:	2304      	movcc	r3, #4
 800606c:	50ca      	str	r2, [r1, r3]
 800606e:	b10a      	cbz	r2, 8006074 <__lshift+0xa4>
 8006070:	f108 0602 	add.w	r6, r8, #2
 8006074:	3e01      	subs	r6, #1
 8006076:	4638      	mov	r0, r7
 8006078:	612e      	str	r6, [r5, #16]
 800607a:	4621      	mov	r1, r4
 800607c:	f7ff fd90 	bl	8005ba0 <_Bfree>
 8006080:	4628      	mov	r0, r5
 8006082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006086:	f842 0f04 	str.w	r0, [r2, #4]!
 800608a:	3301      	adds	r3, #1
 800608c:	e7c5      	b.n	800601a <__lshift+0x4a>
 800608e:	3904      	subs	r1, #4
 8006090:	f853 2b04 	ldr.w	r2, [r3], #4
 8006094:	f841 2f04 	str.w	r2, [r1, #4]!
 8006098:	459c      	cmp	ip, r3
 800609a:	d8f9      	bhi.n	8006090 <__lshift+0xc0>
 800609c:	e7ea      	b.n	8006074 <__lshift+0xa4>
 800609e:	bf00      	nop
 80060a0:	080092f5 	.word	0x080092f5
 80060a4:	08009306 	.word	0x08009306

080060a8 <__mcmp>:
 80060a8:	690a      	ldr	r2, [r1, #16]
 80060aa:	4603      	mov	r3, r0
 80060ac:	6900      	ldr	r0, [r0, #16]
 80060ae:	1a80      	subs	r0, r0, r2
 80060b0:	b530      	push	{r4, r5, lr}
 80060b2:	d10e      	bne.n	80060d2 <__mcmp+0x2a>
 80060b4:	3314      	adds	r3, #20
 80060b6:	3114      	adds	r1, #20
 80060b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060c8:	4295      	cmp	r5, r2
 80060ca:	d003      	beq.n	80060d4 <__mcmp+0x2c>
 80060cc:	d205      	bcs.n	80060da <__mcmp+0x32>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	bd30      	pop	{r4, r5, pc}
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d3f3      	bcc.n	80060c0 <__mcmp+0x18>
 80060d8:	e7fb      	b.n	80060d2 <__mcmp+0x2a>
 80060da:	2001      	movs	r0, #1
 80060dc:	e7f9      	b.n	80060d2 <__mcmp+0x2a>
	...

080060e0 <__mdiff>:
 80060e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	4689      	mov	r9, r1
 80060e6:	4606      	mov	r6, r0
 80060e8:	4611      	mov	r1, r2
 80060ea:	4648      	mov	r0, r9
 80060ec:	4614      	mov	r4, r2
 80060ee:	f7ff ffdb 	bl	80060a8 <__mcmp>
 80060f2:	1e05      	subs	r5, r0, #0
 80060f4:	d112      	bne.n	800611c <__mdiff+0x3c>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4630      	mov	r0, r6
 80060fa:	f7ff fd11 	bl	8005b20 <_Balloc>
 80060fe:	4602      	mov	r2, r0
 8006100:	b928      	cbnz	r0, 800610e <__mdiff+0x2e>
 8006102:	4b3f      	ldr	r3, [pc, #252]	@ (8006200 <__mdiff+0x120>)
 8006104:	f240 2137 	movw	r1, #567	@ 0x237
 8006108:	483e      	ldr	r0, [pc, #248]	@ (8006204 <__mdiff+0x124>)
 800610a:	f001 fc6d 	bl	80079e8 <__assert_func>
 800610e:	2301      	movs	r3, #1
 8006110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006114:	4610      	mov	r0, r2
 8006116:	b003      	add	sp, #12
 8006118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611c:	bfbc      	itt	lt
 800611e:	464b      	movlt	r3, r9
 8006120:	46a1      	movlt	r9, r4
 8006122:	4630      	mov	r0, r6
 8006124:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006128:	bfba      	itte	lt
 800612a:	461c      	movlt	r4, r3
 800612c:	2501      	movlt	r5, #1
 800612e:	2500      	movge	r5, #0
 8006130:	f7ff fcf6 	bl	8005b20 <_Balloc>
 8006134:	4602      	mov	r2, r0
 8006136:	b918      	cbnz	r0, 8006140 <__mdiff+0x60>
 8006138:	4b31      	ldr	r3, [pc, #196]	@ (8006200 <__mdiff+0x120>)
 800613a:	f240 2145 	movw	r1, #581	@ 0x245
 800613e:	e7e3      	b.n	8006108 <__mdiff+0x28>
 8006140:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006144:	6926      	ldr	r6, [r4, #16]
 8006146:	60c5      	str	r5, [r0, #12]
 8006148:	f109 0310 	add.w	r3, r9, #16
 800614c:	f109 0514 	add.w	r5, r9, #20
 8006150:	f104 0e14 	add.w	lr, r4, #20
 8006154:	f100 0b14 	add.w	fp, r0, #20
 8006158:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800615c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	46d9      	mov	r9, fp
 8006164:	f04f 0c00 	mov.w	ip, #0
 8006168:	9b01      	ldr	r3, [sp, #4]
 800616a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800616e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	fa1f f38a 	uxth.w	r3, sl
 8006178:	4619      	mov	r1, r3
 800617a:	b283      	uxth	r3, r0
 800617c:	1acb      	subs	r3, r1, r3
 800617e:	0c00      	lsrs	r0, r0, #16
 8006180:	4463      	add	r3, ip
 8006182:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006186:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800618a:	b29b      	uxth	r3, r3
 800618c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006190:	4576      	cmp	r6, lr
 8006192:	f849 3b04 	str.w	r3, [r9], #4
 8006196:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800619a:	d8e5      	bhi.n	8006168 <__mdiff+0x88>
 800619c:	1b33      	subs	r3, r6, r4
 800619e:	3b15      	subs	r3, #21
 80061a0:	f023 0303 	bic.w	r3, r3, #3
 80061a4:	3415      	adds	r4, #21
 80061a6:	3304      	adds	r3, #4
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	bf38      	it	cc
 80061ac:	2304      	movcc	r3, #4
 80061ae:	441d      	add	r5, r3
 80061b0:	445b      	add	r3, fp
 80061b2:	461e      	mov	r6, r3
 80061b4:	462c      	mov	r4, r5
 80061b6:	4544      	cmp	r4, r8
 80061b8:	d30e      	bcc.n	80061d8 <__mdiff+0xf8>
 80061ba:	f108 0103 	add.w	r1, r8, #3
 80061be:	1b49      	subs	r1, r1, r5
 80061c0:	f021 0103 	bic.w	r1, r1, #3
 80061c4:	3d03      	subs	r5, #3
 80061c6:	45a8      	cmp	r8, r5
 80061c8:	bf38      	it	cc
 80061ca:	2100      	movcc	r1, #0
 80061cc:	440b      	add	r3, r1
 80061ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061d2:	b191      	cbz	r1, 80061fa <__mdiff+0x11a>
 80061d4:	6117      	str	r7, [r2, #16]
 80061d6:	e79d      	b.n	8006114 <__mdiff+0x34>
 80061d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80061dc:	46e6      	mov	lr, ip
 80061de:	0c08      	lsrs	r0, r1, #16
 80061e0:	fa1c fc81 	uxtah	ip, ip, r1
 80061e4:	4471      	add	r1, lr
 80061e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80061ea:	b289      	uxth	r1, r1
 80061ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061f0:	f846 1b04 	str.w	r1, [r6], #4
 80061f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061f8:	e7dd      	b.n	80061b6 <__mdiff+0xd6>
 80061fa:	3f01      	subs	r7, #1
 80061fc:	e7e7      	b.n	80061ce <__mdiff+0xee>
 80061fe:	bf00      	nop
 8006200:	080092f5 	.word	0x080092f5
 8006204:	08009306 	.word	0x08009306

08006208 <__ulp>:
 8006208:	b082      	sub	sp, #8
 800620a:	ed8d 0b00 	vstr	d0, [sp]
 800620e:	9a01      	ldr	r2, [sp, #4]
 8006210:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <__ulp+0x48>)
 8006212:	4013      	ands	r3, r2
 8006214:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006218:	2b00      	cmp	r3, #0
 800621a:	dc08      	bgt.n	800622e <__ulp+0x26>
 800621c:	425b      	negs	r3, r3
 800621e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006222:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006226:	da04      	bge.n	8006232 <__ulp+0x2a>
 8006228:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800622c:	4113      	asrs	r3, r2
 800622e:	2200      	movs	r2, #0
 8006230:	e008      	b.n	8006244 <__ulp+0x3c>
 8006232:	f1a2 0314 	sub.w	r3, r2, #20
 8006236:	2b1e      	cmp	r3, #30
 8006238:	bfda      	itte	le
 800623a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800623e:	40da      	lsrle	r2, r3
 8006240:	2201      	movgt	r2, #1
 8006242:	2300      	movs	r3, #0
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	ec41 0b10 	vmov	d0, r0, r1
 800624c:	b002      	add	sp, #8
 800624e:	4770      	bx	lr
 8006250:	7ff00000 	.word	0x7ff00000

08006254 <__b2d>:
 8006254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006258:	6906      	ldr	r6, [r0, #16]
 800625a:	f100 0814 	add.w	r8, r0, #20
 800625e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006262:	1f37      	subs	r7, r6, #4
 8006264:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006268:	4610      	mov	r0, r2
 800626a:	f7ff fd4b 	bl	8005d04 <__hi0bits>
 800626e:	f1c0 0320 	rsb	r3, r0, #32
 8006272:	280a      	cmp	r0, #10
 8006274:	600b      	str	r3, [r1, #0]
 8006276:	491b      	ldr	r1, [pc, #108]	@ (80062e4 <__b2d+0x90>)
 8006278:	dc15      	bgt.n	80062a6 <__b2d+0x52>
 800627a:	f1c0 0c0b 	rsb	ip, r0, #11
 800627e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006282:	45b8      	cmp	r8, r7
 8006284:	ea43 0501 	orr.w	r5, r3, r1
 8006288:	bf34      	ite	cc
 800628a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800628e:	2300      	movcs	r3, #0
 8006290:	3015      	adds	r0, #21
 8006292:	fa02 f000 	lsl.w	r0, r2, r0
 8006296:	fa23 f30c 	lsr.w	r3, r3, ip
 800629a:	4303      	orrs	r3, r0
 800629c:	461c      	mov	r4, r3
 800629e:	ec45 4b10 	vmov	d0, r4, r5
 80062a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a6:	45b8      	cmp	r8, r7
 80062a8:	bf3a      	itte	cc
 80062aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80062ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80062b2:	2300      	movcs	r3, #0
 80062b4:	380b      	subs	r0, #11
 80062b6:	d012      	beq.n	80062de <__b2d+0x8a>
 80062b8:	f1c0 0120 	rsb	r1, r0, #32
 80062bc:	fa23 f401 	lsr.w	r4, r3, r1
 80062c0:	4082      	lsls	r2, r0
 80062c2:	4322      	orrs	r2, r4
 80062c4:	4547      	cmp	r7, r8
 80062c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80062ca:	bf8c      	ite	hi
 80062cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80062d0:	2200      	movls	r2, #0
 80062d2:	4083      	lsls	r3, r0
 80062d4:	40ca      	lsrs	r2, r1
 80062d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80062da:	4313      	orrs	r3, r2
 80062dc:	e7de      	b.n	800629c <__b2d+0x48>
 80062de:	ea42 0501 	orr.w	r5, r2, r1
 80062e2:	e7db      	b.n	800629c <__b2d+0x48>
 80062e4:	3ff00000 	.word	0x3ff00000

080062e8 <__d2b>:
 80062e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	460f      	mov	r7, r1
 80062ee:	2101      	movs	r1, #1
 80062f0:	ec59 8b10 	vmov	r8, r9, d0
 80062f4:	4616      	mov	r6, r2
 80062f6:	f7ff fc13 	bl	8005b20 <_Balloc>
 80062fa:	4604      	mov	r4, r0
 80062fc:	b930      	cbnz	r0, 800630c <__d2b+0x24>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b23      	ldr	r3, [pc, #140]	@ (8006390 <__d2b+0xa8>)
 8006302:	4824      	ldr	r0, [pc, #144]	@ (8006394 <__d2b+0xac>)
 8006304:	f240 310f 	movw	r1, #783	@ 0x30f
 8006308:	f001 fb6e 	bl	80079e8 <__assert_func>
 800630c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006314:	b10d      	cbz	r5, 800631a <__d2b+0x32>
 8006316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	f1b8 0300 	subs.w	r3, r8, #0
 8006320:	d023      	beq.n	800636a <__d2b+0x82>
 8006322:	4668      	mov	r0, sp
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	f7ff fd0c 	bl	8005d42 <__lo0bits>
 800632a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800632e:	b1d0      	cbz	r0, 8006366 <__d2b+0x7e>
 8006330:	f1c0 0320 	rsb	r3, r0, #32
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	430b      	orrs	r3, r1
 800633a:	40c2      	lsrs	r2, r0
 800633c:	6163      	str	r3, [r4, #20]
 800633e:	9201      	str	r2, [sp, #4]
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	61a3      	str	r3, [r4, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	bf0c      	ite	eq
 8006348:	2201      	moveq	r2, #1
 800634a:	2202      	movne	r2, #2
 800634c:	6122      	str	r2, [r4, #16]
 800634e:	b1a5      	cbz	r5, 800637a <__d2b+0x92>
 8006350:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006354:	4405      	add	r5, r0
 8006356:	603d      	str	r5, [r7, #0]
 8006358:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800635c:	6030      	str	r0, [r6, #0]
 800635e:	4620      	mov	r0, r4
 8006360:	b003      	add	sp, #12
 8006362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006366:	6161      	str	r1, [r4, #20]
 8006368:	e7ea      	b.n	8006340 <__d2b+0x58>
 800636a:	a801      	add	r0, sp, #4
 800636c:	f7ff fce9 	bl	8005d42 <__lo0bits>
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	6163      	str	r3, [r4, #20]
 8006374:	3020      	adds	r0, #32
 8006376:	2201      	movs	r2, #1
 8006378:	e7e8      	b.n	800634c <__d2b+0x64>
 800637a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800637e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006382:	6038      	str	r0, [r7, #0]
 8006384:	6918      	ldr	r0, [r3, #16]
 8006386:	f7ff fcbd 	bl	8005d04 <__hi0bits>
 800638a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800638e:	e7e5      	b.n	800635c <__d2b+0x74>
 8006390:	080092f5 	.word	0x080092f5
 8006394:	08009306 	.word	0x08009306

08006398 <__ratio>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	b085      	sub	sp, #20
 800639e:	e9cd 1000 	strd	r1, r0, [sp]
 80063a2:	a902      	add	r1, sp, #8
 80063a4:	f7ff ff56 	bl	8006254 <__b2d>
 80063a8:	9800      	ldr	r0, [sp, #0]
 80063aa:	a903      	add	r1, sp, #12
 80063ac:	ec55 4b10 	vmov	r4, r5, d0
 80063b0:	f7ff ff50 	bl	8006254 <__b2d>
 80063b4:	9b01      	ldr	r3, [sp, #4]
 80063b6:	6919      	ldr	r1, [r3, #16]
 80063b8:	9b00      	ldr	r3, [sp, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	1ac9      	subs	r1, r1, r3
 80063be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	ec5b ab10 	vmov	sl, fp, d0
 80063c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bfce      	itee	gt
 80063d0:	462a      	movgt	r2, r5
 80063d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80063d6:	465a      	movle	r2, fp
 80063d8:	462f      	mov	r7, r5
 80063da:	46d9      	mov	r9, fp
 80063dc:	bfcc      	ite	gt
 80063de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80063e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80063e6:	464b      	mov	r3, r9
 80063e8:	4652      	mov	r2, sl
 80063ea:	4620      	mov	r0, r4
 80063ec:	4639      	mov	r1, r7
 80063ee:	f7fa fa4d 	bl	800088c <__aeabi_ddiv>
 80063f2:	ec41 0b10 	vmov	d0, r0, r1
 80063f6:	b005      	add	sp, #20
 80063f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063fc <__copybits>:
 80063fc:	3901      	subs	r1, #1
 80063fe:	b570      	push	{r4, r5, r6, lr}
 8006400:	1149      	asrs	r1, r1, #5
 8006402:	6914      	ldr	r4, [r2, #16]
 8006404:	3101      	adds	r1, #1
 8006406:	f102 0314 	add.w	r3, r2, #20
 800640a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800640e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006412:	1f05      	subs	r5, r0, #4
 8006414:	42a3      	cmp	r3, r4
 8006416:	d30c      	bcc.n	8006432 <__copybits+0x36>
 8006418:	1aa3      	subs	r3, r4, r2
 800641a:	3b11      	subs	r3, #17
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	3211      	adds	r2, #17
 8006422:	42a2      	cmp	r2, r4
 8006424:	bf88      	it	hi
 8006426:	2300      	movhi	r3, #0
 8006428:	4418      	add	r0, r3
 800642a:	2300      	movs	r3, #0
 800642c:	4288      	cmp	r0, r1
 800642e:	d305      	bcc.n	800643c <__copybits+0x40>
 8006430:	bd70      	pop	{r4, r5, r6, pc}
 8006432:	f853 6b04 	ldr.w	r6, [r3], #4
 8006436:	f845 6f04 	str.w	r6, [r5, #4]!
 800643a:	e7eb      	b.n	8006414 <__copybits+0x18>
 800643c:	f840 3b04 	str.w	r3, [r0], #4
 8006440:	e7f4      	b.n	800642c <__copybits+0x30>

08006442 <__any_on>:
 8006442:	f100 0214 	add.w	r2, r0, #20
 8006446:	6900      	ldr	r0, [r0, #16]
 8006448:	114b      	asrs	r3, r1, #5
 800644a:	4298      	cmp	r0, r3
 800644c:	b510      	push	{r4, lr}
 800644e:	db11      	blt.n	8006474 <__any_on+0x32>
 8006450:	dd0a      	ble.n	8006468 <__any_on+0x26>
 8006452:	f011 011f 	ands.w	r1, r1, #31
 8006456:	d007      	beq.n	8006468 <__any_on+0x26>
 8006458:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800645c:	fa24 f001 	lsr.w	r0, r4, r1
 8006460:	fa00 f101 	lsl.w	r1, r0, r1
 8006464:	428c      	cmp	r4, r1
 8006466:	d10b      	bne.n	8006480 <__any_on+0x3e>
 8006468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800646c:	4293      	cmp	r3, r2
 800646e:	d803      	bhi.n	8006478 <__any_on+0x36>
 8006470:	2000      	movs	r0, #0
 8006472:	bd10      	pop	{r4, pc}
 8006474:	4603      	mov	r3, r0
 8006476:	e7f7      	b.n	8006468 <__any_on+0x26>
 8006478:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800647c:	2900      	cmp	r1, #0
 800647e:	d0f5      	beq.n	800646c <__any_on+0x2a>
 8006480:	2001      	movs	r0, #1
 8006482:	e7f6      	b.n	8006472 <__any_on+0x30>

08006484 <sulp>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	4604      	mov	r4, r0
 8006488:	460d      	mov	r5, r1
 800648a:	ec45 4b10 	vmov	d0, r4, r5
 800648e:	4616      	mov	r6, r2
 8006490:	f7ff feba 	bl	8006208 <__ulp>
 8006494:	ec51 0b10 	vmov	r0, r1, d0
 8006498:	b17e      	cbz	r6, 80064ba <sulp+0x36>
 800649a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800649e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	dd09      	ble.n	80064ba <sulp+0x36>
 80064a6:	051b      	lsls	r3, r3, #20
 80064a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80064ac:	2400      	movs	r4, #0
 80064ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80064b2:	4622      	mov	r2, r4
 80064b4:	462b      	mov	r3, r5
 80064b6:	f7fa f8bf 	bl	8000638 <__aeabi_dmul>
 80064ba:	ec41 0b10 	vmov	d0, r0, r1
 80064be:	bd70      	pop	{r4, r5, r6, pc}

080064c0 <_strtod_l>:
 80064c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c4:	b09f      	sub	sp, #124	@ 0x7c
 80064c6:	460c      	mov	r4, r1
 80064c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80064ca:	2200      	movs	r2, #0
 80064cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80064ce:	9005      	str	r0, [sp, #20]
 80064d0:	f04f 0a00 	mov.w	sl, #0
 80064d4:	f04f 0b00 	mov.w	fp, #0
 80064d8:	460a      	mov	r2, r1
 80064da:	9219      	str	r2, [sp, #100]	@ 0x64
 80064dc:	7811      	ldrb	r1, [r2, #0]
 80064de:	292b      	cmp	r1, #43	@ 0x2b
 80064e0:	d04a      	beq.n	8006578 <_strtod_l+0xb8>
 80064e2:	d838      	bhi.n	8006556 <_strtod_l+0x96>
 80064e4:	290d      	cmp	r1, #13
 80064e6:	d832      	bhi.n	800654e <_strtod_l+0x8e>
 80064e8:	2908      	cmp	r1, #8
 80064ea:	d832      	bhi.n	8006552 <_strtod_l+0x92>
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d03b      	beq.n	8006568 <_strtod_l+0xa8>
 80064f0:	2200      	movs	r2, #0
 80064f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80064f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80064f6:	782a      	ldrb	r2, [r5, #0]
 80064f8:	2a30      	cmp	r2, #48	@ 0x30
 80064fa:	f040 80b3 	bne.w	8006664 <_strtod_l+0x1a4>
 80064fe:	786a      	ldrb	r2, [r5, #1]
 8006500:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006504:	2a58      	cmp	r2, #88	@ 0x58
 8006506:	d16e      	bne.n	80065e6 <_strtod_l+0x126>
 8006508:	9302      	str	r3, [sp, #8]
 800650a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	4a8e      	ldr	r2, [pc, #568]	@ (800674c <_strtod_l+0x28c>)
 8006514:	9805      	ldr	r0, [sp, #20]
 8006516:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006518:	a919      	add	r1, sp, #100	@ 0x64
 800651a:	f001 faff 	bl	8007b1c <__gethex>
 800651e:	f010 060f 	ands.w	r6, r0, #15
 8006522:	4604      	mov	r4, r0
 8006524:	d005      	beq.n	8006532 <_strtod_l+0x72>
 8006526:	2e06      	cmp	r6, #6
 8006528:	d128      	bne.n	800657c <_strtod_l+0xbc>
 800652a:	3501      	adds	r5, #1
 800652c:	2300      	movs	r3, #0
 800652e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006532:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006534:	2b00      	cmp	r3, #0
 8006536:	f040 858e 	bne.w	8007056 <_strtod_l+0xb96>
 800653a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800653c:	b1cb      	cbz	r3, 8006572 <_strtod_l+0xb2>
 800653e:	4652      	mov	r2, sl
 8006540:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006544:	ec43 2b10 	vmov	d0, r2, r3
 8006548:	b01f      	add	sp, #124	@ 0x7c
 800654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654e:	2920      	cmp	r1, #32
 8006550:	d1ce      	bne.n	80064f0 <_strtod_l+0x30>
 8006552:	3201      	adds	r2, #1
 8006554:	e7c1      	b.n	80064da <_strtod_l+0x1a>
 8006556:	292d      	cmp	r1, #45	@ 0x2d
 8006558:	d1ca      	bne.n	80064f0 <_strtod_l+0x30>
 800655a:	2101      	movs	r1, #1
 800655c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800655e:	1c51      	adds	r1, r2, #1
 8006560:	9119      	str	r1, [sp, #100]	@ 0x64
 8006562:	7852      	ldrb	r2, [r2, #1]
 8006564:	2a00      	cmp	r2, #0
 8006566:	d1c5      	bne.n	80064f4 <_strtod_l+0x34>
 8006568:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800656a:	9419      	str	r4, [sp, #100]	@ 0x64
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 8570 	bne.w	8007052 <_strtod_l+0xb92>
 8006572:	4652      	mov	r2, sl
 8006574:	465b      	mov	r3, fp
 8006576:	e7e5      	b.n	8006544 <_strtod_l+0x84>
 8006578:	2100      	movs	r1, #0
 800657a:	e7ef      	b.n	800655c <_strtod_l+0x9c>
 800657c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800657e:	b13a      	cbz	r2, 8006590 <_strtod_l+0xd0>
 8006580:	2135      	movs	r1, #53	@ 0x35
 8006582:	a81c      	add	r0, sp, #112	@ 0x70
 8006584:	f7ff ff3a 	bl	80063fc <__copybits>
 8006588:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800658a:	9805      	ldr	r0, [sp, #20]
 800658c:	f7ff fb08 	bl	8005ba0 <_Bfree>
 8006590:	3e01      	subs	r6, #1
 8006592:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006594:	2e04      	cmp	r6, #4
 8006596:	d806      	bhi.n	80065a6 <_strtod_l+0xe6>
 8006598:	e8df f006 	tbb	[pc, r6]
 800659c:	201d0314 	.word	0x201d0314
 80065a0:	14          	.byte	0x14
 80065a1:	00          	.byte	0x00
 80065a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80065a6:	05e1      	lsls	r1, r4, #23
 80065a8:	bf48      	it	mi
 80065aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80065ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80065b2:	0d1b      	lsrs	r3, r3, #20
 80065b4:	051b      	lsls	r3, r3, #20
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1bb      	bne.n	8006532 <_strtod_l+0x72>
 80065ba:	f7fe fb31 	bl	8004c20 <__errno>
 80065be:	2322      	movs	r3, #34	@ 0x22
 80065c0:	6003      	str	r3, [r0, #0]
 80065c2:	e7b6      	b.n	8006532 <_strtod_l+0x72>
 80065c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80065c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80065cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80065d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80065d4:	e7e7      	b.n	80065a6 <_strtod_l+0xe6>
 80065d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006754 <_strtod_l+0x294>
 80065da:	e7e4      	b.n	80065a6 <_strtod_l+0xe6>
 80065dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80065e0:	f04f 3aff 	mov.w	sl, #4294967295
 80065e4:	e7df      	b.n	80065a6 <_strtod_l+0xe6>
 80065e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80065ec:	785b      	ldrb	r3, [r3, #1]
 80065ee:	2b30      	cmp	r3, #48	@ 0x30
 80065f0:	d0f9      	beq.n	80065e6 <_strtod_l+0x126>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d09d      	beq.n	8006532 <_strtod_l+0x72>
 80065f6:	2301      	movs	r3, #1
 80065f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80065fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80065fe:	2300      	movs	r3, #0
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	930a      	str	r3, [sp, #40]	@ 0x28
 8006604:	461f      	mov	r7, r3
 8006606:	220a      	movs	r2, #10
 8006608:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800660a:	7805      	ldrb	r5, [r0, #0]
 800660c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006610:	b2d9      	uxtb	r1, r3
 8006612:	2909      	cmp	r1, #9
 8006614:	d928      	bls.n	8006668 <_strtod_l+0x1a8>
 8006616:	494e      	ldr	r1, [pc, #312]	@ (8006750 <_strtod_l+0x290>)
 8006618:	2201      	movs	r2, #1
 800661a:	f001 f9ab 	bl	8007974 <strncmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	d032      	beq.n	8006688 <_strtod_l+0x1c8>
 8006622:	2000      	movs	r0, #0
 8006624:	462a      	mov	r2, r5
 8006626:	4681      	mov	r9, r0
 8006628:	463d      	mov	r5, r7
 800662a:	4603      	mov	r3, r0
 800662c:	2a65      	cmp	r2, #101	@ 0x65
 800662e:	d001      	beq.n	8006634 <_strtod_l+0x174>
 8006630:	2a45      	cmp	r2, #69	@ 0x45
 8006632:	d114      	bne.n	800665e <_strtod_l+0x19e>
 8006634:	b91d      	cbnz	r5, 800663e <_strtod_l+0x17e>
 8006636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006638:	4302      	orrs	r2, r0
 800663a:	d095      	beq.n	8006568 <_strtod_l+0xa8>
 800663c:	2500      	movs	r5, #0
 800663e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006640:	1c62      	adds	r2, r4, #1
 8006642:	9219      	str	r2, [sp, #100]	@ 0x64
 8006644:	7862      	ldrb	r2, [r4, #1]
 8006646:	2a2b      	cmp	r2, #43	@ 0x2b
 8006648:	d077      	beq.n	800673a <_strtod_l+0x27a>
 800664a:	2a2d      	cmp	r2, #45	@ 0x2d
 800664c:	d07b      	beq.n	8006746 <_strtod_l+0x286>
 800664e:	f04f 0c00 	mov.w	ip, #0
 8006652:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006656:	2909      	cmp	r1, #9
 8006658:	f240 8082 	bls.w	8006760 <_strtod_l+0x2a0>
 800665c:	9419      	str	r4, [sp, #100]	@ 0x64
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	e0a2      	b.n	80067aa <_strtod_l+0x2ea>
 8006664:	2300      	movs	r3, #0
 8006666:	e7c7      	b.n	80065f8 <_strtod_l+0x138>
 8006668:	2f08      	cmp	r7, #8
 800666a:	bfd5      	itete	le
 800666c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800666e:	9908      	ldrgt	r1, [sp, #32]
 8006670:	fb02 3301 	mlale	r3, r2, r1, r3
 8006674:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006678:	f100 0001 	add.w	r0, r0, #1
 800667c:	bfd4      	ite	le
 800667e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006680:	9308      	strgt	r3, [sp, #32]
 8006682:	3701      	adds	r7, #1
 8006684:	9019      	str	r0, [sp, #100]	@ 0x64
 8006686:	e7bf      	b.n	8006608 <_strtod_l+0x148>
 8006688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	9219      	str	r2, [sp, #100]	@ 0x64
 800668e:	785a      	ldrb	r2, [r3, #1]
 8006690:	b37f      	cbz	r7, 80066f2 <_strtod_l+0x232>
 8006692:	4681      	mov	r9, r0
 8006694:	463d      	mov	r5, r7
 8006696:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800669a:	2b09      	cmp	r3, #9
 800669c:	d912      	bls.n	80066c4 <_strtod_l+0x204>
 800669e:	2301      	movs	r3, #1
 80066a0:	e7c4      	b.n	800662c <_strtod_l+0x16c>
 80066a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80066a8:	785a      	ldrb	r2, [r3, #1]
 80066aa:	3001      	adds	r0, #1
 80066ac:	2a30      	cmp	r2, #48	@ 0x30
 80066ae:	d0f8      	beq.n	80066a2 <_strtod_l+0x1e2>
 80066b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	f200 84d3 	bhi.w	8007060 <_strtod_l+0xba0>
 80066ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80066be:	4681      	mov	r9, r0
 80066c0:	2000      	movs	r0, #0
 80066c2:	4605      	mov	r5, r0
 80066c4:	3a30      	subs	r2, #48	@ 0x30
 80066c6:	f100 0301 	add.w	r3, r0, #1
 80066ca:	d02a      	beq.n	8006722 <_strtod_l+0x262>
 80066cc:	4499      	add	r9, r3
 80066ce:	eb00 0c05 	add.w	ip, r0, r5
 80066d2:	462b      	mov	r3, r5
 80066d4:	210a      	movs	r1, #10
 80066d6:	4563      	cmp	r3, ip
 80066d8:	d10d      	bne.n	80066f6 <_strtod_l+0x236>
 80066da:	1c69      	adds	r1, r5, #1
 80066dc:	4401      	add	r1, r0
 80066de:	4428      	add	r0, r5
 80066e0:	2808      	cmp	r0, #8
 80066e2:	dc16      	bgt.n	8006712 <_strtod_l+0x252>
 80066e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066e6:	230a      	movs	r3, #10
 80066e8:	fb03 2300 	mla	r3, r3, r0, r2
 80066ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ee:	2300      	movs	r3, #0
 80066f0:	e018      	b.n	8006724 <_strtod_l+0x264>
 80066f2:	4638      	mov	r0, r7
 80066f4:	e7da      	b.n	80066ac <_strtod_l+0x1ec>
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	f103 0301 	add.w	r3, r3, #1
 80066fc:	dc03      	bgt.n	8006706 <_strtod_l+0x246>
 80066fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006700:	434e      	muls	r6, r1
 8006702:	960a      	str	r6, [sp, #40]	@ 0x28
 8006704:	e7e7      	b.n	80066d6 <_strtod_l+0x216>
 8006706:	2b10      	cmp	r3, #16
 8006708:	bfde      	ittt	le
 800670a:	9e08      	ldrle	r6, [sp, #32]
 800670c:	434e      	mulle	r6, r1
 800670e:	9608      	strle	r6, [sp, #32]
 8006710:	e7e1      	b.n	80066d6 <_strtod_l+0x216>
 8006712:	280f      	cmp	r0, #15
 8006714:	dceb      	bgt.n	80066ee <_strtod_l+0x22e>
 8006716:	9808      	ldr	r0, [sp, #32]
 8006718:	230a      	movs	r3, #10
 800671a:	fb03 2300 	mla	r3, r3, r0, r2
 800671e:	9308      	str	r3, [sp, #32]
 8006720:	e7e5      	b.n	80066ee <_strtod_l+0x22e>
 8006722:	4629      	mov	r1, r5
 8006724:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006726:	1c50      	adds	r0, r2, #1
 8006728:	9019      	str	r0, [sp, #100]	@ 0x64
 800672a:	7852      	ldrb	r2, [r2, #1]
 800672c:	4618      	mov	r0, r3
 800672e:	460d      	mov	r5, r1
 8006730:	e7b1      	b.n	8006696 <_strtod_l+0x1d6>
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	2301      	movs	r3, #1
 8006738:	e77d      	b.n	8006636 <_strtod_l+0x176>
 800673a:	f04f 0c00 	mov.w	ip, #0
 800673e:	1ca2      	adds	r2, r4, #2
 8006740:	9219      	str	r2, [sp, #100]	@ 0x64
 8006742:	78a2      	ldrb	r2, [r4, #2]
 8006744:	e785      	b.n	8006652 <_strtod_l+0x192>
 8006746:	f04f 0c01 	mov.w	ip, #1
 800674a:	e7f8      	b.n	800673e <_strtod_l+0x27e>
 800674c:	08009478 	.word	0x08009478
 8006750:	08009460 	.word	0x08009460
 8006754:	7ff00000 	.word	0x7ff00000
 8006758:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800675a:	1c51      	adds	r1, r2, #1
 800675c:	9119      	str	r1, [sp, #100]	@ 0x64
 800675e:	7852      	ldrb	r2, [r2, #1]
 8006760:	2a30      	cmp	r2, #48	@ 0x30
 8006762:	d0f9      	beq.n	8006758 <_strtod_l+0x298>
 8006764:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006768:	2908      	cmp	r1, #8
 800676a:	f63f af78 	bhi.w	800665e <_strtod_l+0x19e>
 800676e:	3a30      	subs	r2, #48	@ 0x30
 8006770:	920e      	str	r2, [sp, #56]	@ 0x38
 8006772:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006774:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006776:	f04f 080a 	mov.w	r8, #10
 800677a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800677c:	1c56      	adds	r6, r2, #1
 800677e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006780:	7852      	ldrb	r2, [r2, #1]
 8006782:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006786:	f1be 0f09 	cmp.w	lr, #9
 800678a:	d939      	bls.n	8006800 <_strtod_l+0x340>
 800678c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800678e:	1a76      	subs	r6, r6, r1
 8006790:	2e08      	cmp	r6, #8
 8006792:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006796:	dc03      	bgt.n	80067a0 <_strtod_l+0x2e0>
 8006798:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800679a:	4588      	cmp	r8, r1
 800679c:	bfa8      	it	ge
 800679e:	4688      	movge	r8, r1
 80067a0:	f1bc 0f00 	cmp.w	ip, #0
 80067a4:	d001      	beq.n	80067aa <_strtod_l+0x2ea>
 80067a6:	f1c8 0800 	rsb	r8, r8, #0
 80067aa:	2d00      	cmp	r5, #0
 80067ac:	d14e      	bne.n	800684c <_strtod_l+0x38c>
 80067ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067b0:	4308      	orrs	r0, r1
 80067b2:	f47f aebe 	bne.w	8006532 <_strtod_l+0x72>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f47f aed6 	bne.w	8006568 <_strtod_l+0xa8>
 80067bc:	2a69      	cmp	r2, #105	@ 0x69
 80067be:	d028      	beq.n	8006812 <_strtod_l+0x352>
 80067c0:	dc25      	bgt.n	800680e <_strtod_l+0x34e>
 80067c2:	2a49      	cmp	r2, #73	@ 0x49
 80067c4:	d025      	beq.n	8006812 <_strtod_l+0x352>
 80067c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80067c8:	f47f aece 	bne.w	8006568 <_strtod_l+0xa8>
 80067cc:	499b      	ldr	r1, [pc, #620]	@ (8006a3c <_strtod_l+0x57c>)
 80067ce:	a819      	add	r0, sp, #100	@ 0x64
 80067d0:	f001 fbc6 	bl	8007f60 <__match>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f43f aec7 	beq.w	8006568 <_strtod_l+0xa8>
 80067da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b28      	cmp	r3, #40	@ 0x28
 80067e0:	d12e      	bne.n	8006840 <_strtod_l+0x380>
 80067e2:	4997      	ldr	r1, [pc, #604]	@ (8006a40 <_strtod_l+0x580>)
 80067e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80067e6:	a819      	add	r0, sp, #100	@ 0x64
 80067e8:	f001 fbce 	bl	8007f88 <__hexnan>
 80067ec:	2805      	cmp	r0, #5
 80067ee:	d127      	bne.n	8006840 <_strtod_l+0x380>
 80067f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80067f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80067f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80067fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80067fe:	e698      	b.n	8006532 <_strtod_l+0x72>
 8006800:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006802:	fb08 2101 	mla	r1, r8, r1, r2
 8006806:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800680a:	920e      	str	r2, [sp, #56]	@ 0x38
 800680c:	e7b5      	b.n	800677a <_strtod_l+0x2ba>
 800680e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006810:	e7da      	b.n	80067c8 <_strtod_l+0x308>
 8006812:	498c      	ldr	r1, [pc, #560]	@ (8006a44 <_strtod_l+0x584>)
 8006814:	a819      	add	r0, sp, #100	@ 0x64
 8006816:	f001 fba3 	bl	8007f60 <__match>
 800681a:	2800      	cmp	r0, #0
 800681c:	f43f aea4 	beq.w	8006568 <_strtod_l+0xa8>
 8006820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006822:	4989      	ldr	r1, [pc, #548]	@ (8006a48 <_strtod_l+0x588>)
 8006824:	3b01      	subs	r3, #1
 8006826:	a819      	add	r0, sp, #100	@ 0x64
 8006828:	9319      	str	r3, [sp, #100]	@ 0x64
 800682a:	f001 fb99 	bl	8007f60 <__match>
 800682e:	b910      	cbnz	r0, 8006836 <_strtod_l+0x376>
 8006830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006832:	3301      	adds	r3, #1
 8006834:	9319      	str	r3, [sp, #100]	@ 0x64
 8006836:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006a58 <_strtod_l+0x598>
 800683a:	f04f 0a00 	mov.w	sl, #0
 800683e:	e678      	b.n	8006532 <_strtod_l+0x72>
 8006840:	4882      	ldr	r0, [pc, #520]	@ (8006a4c <_strtod_l+0x58c>)
 8006842:	f001 f8c9 	bl	80079d8 <nan>
 8006846:	ec5b ab10 	vmov	sl, fp, d0
 800684a:	e672      	b.n	8006532 <_strtod_l+0x72>
 800684c:	eba8 0309 	sub.w	r3, r8, r9
 8006850:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006852:	9309      	str	r3, [sp, #36]	@ 0x24
 8006854:	2f00      	cmp	r7, #0
 8006856:	bf08      	it	eq
 8006858:	462f      	moveq	r7, r5
 800685a:	2d10      	cmp	r5, #16
 800685c:	462c      	mov	r4, r5
 800685e:	bfa8      	it	ge
 8006860:	2410      	movge	r4, #16
 8006862:	f7f9 fe6f 	bl	8000544 <__aeabi_ui2d>
 8006866:	2d09      	cmp	r5, #9
 8006868:	4682      	mov	sl, r0
 800686a:	468b      	mov	fp, r1
 800686c:	dc13      	bgt.n	8006896 <_strtod_l+0x3d6>
 800686e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	f43f ae5e 	beq.w	8006532 <_strtod_l+0x72>
 8006876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006878:	dd78      	ble.n	800696c <_strtod_l+0x4ac>
 800687a:	2b16      	cmp	r3, #22
 800687c:	dc5f      	bgt.n	800693e <_strtod_l+0x47e>
 800687e:	4974      	ldr	r1, [pc, #464]	@ (8006a50 <_strtod_l+0x590>)
 8006880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006888:	4652      	mov	r2, sl
 800688a:	465b      	mov	r3, fp
 800688c:	f7f9 fed4 	bl	8000638 <__aeabi_dmul>
 8006890:	4682      	mov	sl, r0
 8006892:	468b      	mov	fp, r1
 8006894:	e64d      	b.n	8006532 <_strtod_l+0x72>
 8006896:	4b6e      	ldr	r3, [pc, #440]	@ (8006a50 <_strtod_l+0x590>)
 8006898:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800689c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80068a0:	f7f9 feca 	bl	8000638 <__aeabi_dmul>
 80068a4:	4682      	mov	sl, r0
 80068a6:	9808      	ldr	r0, [sp, #32]
 80068a8:	468b      	mov	fp, r1
 80068aa:	f7f9 fe4b 	bl	8000544 <__aeabi_ui2d>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4650      	mov	r0, sl
 80068b4:	4659      	mov	r1, fp
 80068b6:	f7f9 fd09 	bl	80002cc <__adddf3>
 80068ba:	2d0f      	cmp	r5, #15
 80068bc:	4682      	mov	sl, r0
 80068be:	468b      	mov	fp, r1
 80068c0:	ddd5      	ble.n	800686e <_strtod_l+0x3ae>
 80068c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c4:	1b2c      	subs	r4, r5, r4
 80068c6:	441c      	add	r4, r3
 80068c8:	2c00      	cmp	r4, #0
 80068ca:	f340 8096 	ble.w	80069fa <_strtod_l+0x53a>
 80068ce:	f014 030f 	ands.w	r3, r4, #15
 80068d2:	d00a      	beq.n	80068ea <_strtod_l+0x42a>
 80068d4:	495e      	ldr	r1, [pc, #376]	@ (8006a50 <_strtod_l+0x590>)
 80068d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068da:	4652      	mov	r2, sl
 80068dc:	465b      	mov	r3, fp
 80068de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068e2:	f7f9 fea9 	bl	8000638 <__aeabi_dmul>
 80068e6:	4682      	mov	sl, r0
 80068e8:	468b      	mov	fp, r1
 80068ea:	f034 040f 	bics.w	r4, r4, #15
 80068ee:	d073      	beq.n	80069d8 <_strtod_l+0x518>
 80068f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80068f4:	dd48      	ble.n	8006988 <_strtod_l+0x4c8>
 80068f6:	2400      	movs	r4, #0
 80068f8:	46a0      	mov	r8, r4
 80068fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80068fc:	46a1      	mov	r9, r4
 80068fe:	9a05      	ldr	r2, [sp, #20]
 8006900:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006a58 <_strtod_l+0x598>
 8006904:	2322      	movs	r3, #34	@ 0x22
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	f04f 0a00 	mov.w	sl, #0
 800690c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	f43f ae0f 	beq.w	8006532 <_strtod_l+0x72>
 8006914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006916:	9805      	ldr	r0, [sp, #20]
 8006918:	f7ff f942 	bl	8005ba0 <_Bfree>
 800691c:	9805      	ldr	r0, [sp, #20]
 800691e:	4649      	mov	r1, r9
 8006920:	f7ff f93e 	bl	8005ba0 <_Bfree>
 8006924:	9805      	ldr	r0, [sp, #20]
 8006926:	4641      	mov	r1, r8
 8006928:	f7ff f93a 	bl	8005ba0 <_Bfree>
 800692c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800692e:	9805      	ldr	r0, [sp, #20]
 8006930:	f7ff f936 	bl	8005ba0 <_Bfree>
 8006934:	9805      	ldr	r0, [sp, #20]
 8006936:	4621      	mov	r1, r4
 8006938:	f7ff f932 	bl	8005ba0 <_Bfree>
 800693c:	e5f9      	b.n	8006532 <_strtod_l+0x72>
 800693e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006940:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006944:	4293      	cmp	r3, r2
 8006946:	dbbc      	blt.n	80068c2 <_strtod_l+0x402>
 8006948:	4c41      	ldr	r4, [pc, #260]	@ (8006a50 <_strtod_l+0x590>)
 800694a:	f1c5 050f 	rsb	r5, r5, #15
 800694e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800695a:	f7f9 fe6d 	bl	8000638 <__aeabi_dmul>
 800695e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006960:	1b5d      	subs	r5, r3, r5
 8006962:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006966:	e9d4 2300 	ldrd	r2, r3, [r4]
 800696a:	e78f      	b.n	800688c <_strtod_l+0x3cc>
 800696c:	3316      	adds	r3, #22
 800696e:	dba8      	blt.n	80068c2 <_strtod_l+0x402>
 8006970:	4b37      	ldr	r3, [pc, #220]	@ (8006a50 <_strtod_l+0x590>)
 8006972:	eba9 0808 	sub.w	r8, r9, r8
 8006976:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800697a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800697e:	4650      	mov	r0, sl
 8006980:	4659      	mov	r1, fp
 8006982:	f7f9 ff83 	bl	800088c <__aeabi_ddiv>
 8006986:	e783      	b.n	8006890 <_strtod_l+0x3d0>
 8006988:	4b32      	ldr	r3, [pc, #200]	@ (8006a54 <_strtod_l+0x594>)
 800698a:	9308      	str	r3, [sp, #32]
 800698c:	2300      	movs	r3, #0
 800698e:	1124      	asrs	r4, r4, #4
 8006990:	4650      	mov	r0, sl
 8006992:	4659      	mov	r1, fp
 8006994:	461e      	mov	r6, r3
 8006996:	2c01      	cmp	r4, #1
 8006998:	dc21      	bgt.n	80069de <_strtod_l+0x51e>
 800699a:	b10b      	cbz	r3, 80069a0 <_strtod_l+0x4e0>
 800699c:	4682      	mov	sl, r0
 800699e:	468b      	mov	fp, r1
 80069a0:	492c      	ldr	r1, [pc, #176]	@ (8006a54 <_strtod_l+0x594>)
 80069a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80069a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b2:	f7f9 fe41 	bl	8000638 <__aeabi_dmul>
 80069b6:	4b28      	ldr	r3, [pc, #160]	@ (8006a58 <_strtod_l+0x598>)
 80069b8:	460a      	mov	r2, r1
 80069ba:	400b      	ands	r3, r1
 80069bc:	4927      	ldr	r1, [pc, #156]	@ (8006a5c <_strtod_l+0x59c>)
 80069be:	428b      	cmp	r3, r1
 80069c0:	4682      	mov	sl, r0
 80069c2:	d898      	bhi.n	80068f6 <_strtod_l+0x436>
 80069c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80069c8:	428b      	cmp	r3, r1
 80069ca:	bf86      	itte	hi
 80069cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006a60 <_strtod_l+0x5a0>
 80069d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80069d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80069d8:	2300      	movs	r3, #0
 80069da:	9308      	str	r3, [sp, #32]
 80069dc:	e07a      	b.n	8006ad4 <_strtod_l+0x614>
 80069de:	07e2      	lsls	r2, r4, #31
 80069e0:	d505      	bpl.n	80069ee <_strtod_l+0x52e>
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fe26 	bl	8000638 <__aeabi_dmul>
 80069ec:	2301      	movs	r3, #1
 80069ee:	9a08      	ldr	r2, [sp, #32]
 80069f0:	3208      	adds	r2, #8
 80069f2:	3601      	adds	r6, #1
 80069f4:	1064      	asrs	r4, r4, #1
 80069f6:	9208      	str	r2, [sp, #32]
 80069f8:	e7cd      	b.n	8006996 <_strtod_l+0x4d6>
 80069fa:	d0ed      	beq.n	80069d8 <_strtod_l+0x518>
 80069fc:	4264      	negs	r4, r4
 80069fe:	f014 020f 	ands.w	r2, r4, #15
 8006a02:	d00a      	beq.n	8006a1a <_strtod_l+0x55a>
 8006a04:	4b12      	ldr	r3, [pc, #72]	@ (8006a50 <_strtod_l+0x590>)
 8006a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 ff3b 	bl	800088c <__aeabi_ddiv>
 8006a16:	4682      	mov	sl, r0
 8006a18:	468b      	mov	fp, r1
 8006a1a:	1124      	asrs	r4, r4, #4
 8006a1c:	d0dc      	beq.n	80069d8 <_strtod_l+0x518>
 8006a1e:	2c1f      	cmp	r4, #31
 8006a20:	dd20      	ble.n	8006a64 <_strtod_l+0x5a4>
 8006a22:	2400      	movs	r4, #0
 8006a24:	46a0      	mov	r8, r4
 8006a26:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a28:	46a1      	mov	r9, r4
 8006a2a:	9a05      	ldr	r2, [sp, #20]
 8006a2c:	2322      	movs	r3, #34	@ 0x22
 8006a2e:	f04f 0a00 	mov.w	sl, #0
 8006a32:	f04f 0b00 	mov.w	fp, #0
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e768      	b.n	800690c <_strtod_l+0x44c>
 8006a3a:	bf00      	nop
 8006a3c:	0800924d 	.word	0x0800924d
 8006a40:	08009464 	.word	0x08009464
 8006a44:	08009245 	.word	0x08009245
 8006a48:	0800927c 	.word	0x0800927c
 8006a4c:	0800960d 	.word	0x0800960d
 8006a50:	08009398 	.word	0x08009398
 8006a54:	08009370 	.word	0x08009370
 8006a58:	7ff00000 	.word	0x7ff00000
 8006a5c:	7ca00000 	.word	0x7ca00000
 8006a60:	7fefffff 	.word	0x7fefffff
 8006a64:	f014 0310 	ands.w	r3, r4, #16
 8006a68:	bf18      	it	ne
 8006a6a:	236a      	movne	r3, #106	@ 0x6a
 8006a6c:	4ea9      	ldr	r6, [pc, #676]	@ (8006d14 <_strtod_l+0x854>)
 8006a6e:	9308      	str	r3, [sp, #32]
 8006a70:	4650      	mov	r0, sl
 8006a72:	4659      	mov	r1, fp
 8006a74:	2300      	movs	r3, #0
 8006a76:	07e2      	lsls	r2, r4, #31
 8006a78:	d504      	bpl.n	8006a84 <_strtod_l+0x5c4>
 8006a7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a7e:	f7f9 fddb 	bl	8000638 <__aeabi_dmul>
 8006a82:	2301      	movs	r3, #1
 8006a84:	1064      	asrs	r4, r4, #1
 8006a86:	f106 0608 	add.w	r6, r6, #8
 8006a8a:	d1f4      	bne.n	8006a76 <_strtod_l+0x5b6>
 8006a8c:	b10b      	cbz	r3, 8006a92 <_strtod_l+0x5d2>
 8006a8e:	4682      	mov	sl, r0
 8006a90:	468b      	mov	fp, r1
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	b1b3      	cbz	r3, 8006ac4 <_strtod_l+0x604>
 8006a96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	dd0f      	ble.n	8006ac4 <_strtod_l+0x604>
 8006aa4:	2b1f      	cmp	r3, #31
 8006aa6:	dd55      	ble.n	8006b54 <_strtod_l+0x694>
 8006aa8:	2b34      	cmp	r3, #52	@ 0x34
 8006aaa:	bfde      	ittt	le
 8006aac:	f04f 33ff 	movle.w	r3, #4294967295
 8006ab0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006ab4:	4093      	lslle	r3, r2
 8006ab6:	f04f 0a00 	mov.w	sl, #0
 8006aba:	bfcc      	ite	gt
 8006abc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006ac0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4650      	mov	r0, sl
 8006aca:	4659      	mov	r1, fp
 8006acc:	f7fa f81c 	bl	8000b08 <__aeabi_dcmpeq>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d1a6      	bne.n	8006a22 <_strtod_l+0x562>
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006ada:	9805      	ldr	r0, [sp, #20]
 8006adc:	462b      	mov	r3, r5
 8006ade:	463a      	mov	r2, r7
 8006ae0:	f7ff f8c6 	bl	8005c70 <__s2b>
 8006ae4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f43f af05 	beq.w	80068f6 <_strtod_l+0x436>
 8006aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	eba9 0308 	sub.w	r3, r9, r8
 8006af4:	bfa8      	it	ge
 8006af6:	2300      	movge	r3, #0
 8006af8:	9312      	str	r3, [sp, #72]	@ 0x48
 8006afa:	2400      	movs	r4, #0
 8006afc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b00:	9316      	str	r3, [sp, #88]	@ 0x58
 8006b02:	46a0      	mov	r8, r4
 8006b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b06:	9805      	ldr	r0, [sp, #20]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	f7ff f809 	bl	8005b20 <_Balloc>
 8006b0e:	4681      	mov	r9, r0
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f43f aef4 	beq.w	80068fe <_strtod_l+0x43e>
 8006b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	3202      	adds	r2, #2
 8006b1c:	f103 010c 	add.w	r1, r3, #12
 8006b20:	0092      	lsls	r2, r2, #2
 8006b22:	300c      	adds	r0, #12
 8006b24:	f000 ff48 	bl	80079b8 <memcpy>
 8006b28:	ec4b ab10 	vmov	d0, sl, fp
 8006b2c:	9805      	ldr	r0, [sp, #20]
 8006b2e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006b30:	a91b      	add	r1, sp, #108	@ 0x6c
 8006b32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006b36:	f7ff fbd7 	bl	80062e8 <__d2b>
 8006b3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	f43f aede 	beq.w	80068fe <_strtod_l+0x43e>
 8006b42:	9805      	ldr	r0, [sp, #20]
 8006b44:	2101      	movs	r1, #1
 8006b46:	f7ff f929 	bl	8005d9c <__i2b>
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	b948      	cbnz	r0, 8006b62 <_strtod_l+0x6a2>
 8006b4e:	f04f 0800 	mov.w	r8, #0
 8006b52:	e6d4      	b.n	80068fe <_strtod_l+0x43e>
 8006b54:	f04f 32ff 	mov.w	r2, #4294967295
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	ea03 0a0a 	and.w	sl, r3, sl
 8006b60:	e7b0      	b.n	8006ac4 <_strtod_l+0x604>
 8006b62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006b64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	bfab      	itete	ge
 8006b6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006b6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006b6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006b70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006b72:	bfac      	ite	ge
 8006b74:	18ef      	addge	r7, r5, r3
 8006b76:	1b5e      	sublt	r6, r3, r5
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	1aed      	subs	r5, r5, r3
 8006b7c:	4415      	add	r5, r2
 8006b7e:	4b66      	ldr	r3, [pc, #408]	@ (8006d18 <_strtod_l+0x858>)
 8006b80:	3d01      	subs	r5, #1
 8006b82:	429d      	cmp	r5, r3
 8006b84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006b88:	da50      	bge.n	8006c2c <_strtod_l+0x76c>
 8006b8a:	1b5b      	subs	r3, r3, r5
 8006b8c:	2b1f      	cmp	r3, #31
 8006b8e:	eba2 0203 	sub.w	r2, r2, r3
 8006b92:	f04f 0101 	mov.w	r1, #1
 8006b96:	dc3d      	bgt.n	8006c14 <_strtod_l+0x754>
 8006b98:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ba2:	18bd      	adds	r5, r7, r2
 8006ba4:	9b08      	ldr	r3, [sp, #32]
 8006ba6:	42af      	cmp	r7, r5
 8006ba8:	4416      	add	r6, r2
 8006baa:	441e      	add	r6, r3
 8006bac:	463b      	mov	r3, r7
 8006bae:	bfa8      	it	ge
 8006bb0:	462b      	movge	r3, r5
 8006bb2:	42b3      	cmp	r3, r6
 8006bb4:	bfa8      	it	ge
 8006bb6:	4633      	movge	r3, r6
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bfc2      	ittt	gt
 8006bbc:	1aed      	subgt	r5, r5, r3
 8006bbe:	1af6      	subgt	r6, r6, r3
 8006bc0:	1aff      	subgt	r7, r7, r3
 8006bc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd16      	ble.n	8006bf6 <_strtod_l+0x736>
 8006bc8:	4641      	mov	r1, r8
 8006bca:	9805      	ldr	r0, [sp, #20]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f7ff f9a5 	bl	8005f1c <__pow5mult>
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d0ba      	beq.n	8006b4e <_strtod_l+0x68e>
 8006bd8:	4601      	mov	r1, r0
 8006bda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bdc:	9805      	ldr	r0, [sp, #20]
 8006bde:	f7ff f8f3 	bl	8005dc8 <__multiply>
 8006be2:	900e      	str	r0, [sp, #56]	@ 0x38
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f43f ae8a 	beq.w	80068fe <_strtod_l+0x43e>
 8006bea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bec:	9805      	ldr	r0, [sp, #20]
 8006bee:	f7fe ffd7 	bl	8005ba0 <_Bfree>
 8006bf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	dc1d      	bgt.n	8006c36 <_strtod_l+0x776>
 8006bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dd23      	ble.n	8006c48 <_strtod_l+0x788>
 8006c00:	4649      	mov	r1, r9
 8006c02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006c04:	9805      	ldr	r0, [sp, #20]
 8006c06:	f7ff f989 	bl	8005f1c <__pow5mult>
 8006c0a:	4681      	mov	r9, r0
 8006c0c:	b9e0      	cbnz	r0, 8006c48 <_strtod_l+0x788>
 8006c0e:	f04f 0900 	mov.w	r9, #0
 8006c12:	e674      	b.n	80068fe <_strtod_l+0x43e>
 8006c14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006c18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006c1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006c20:	35e2      	adds	r5, #226	@ 0xe2
 8006c22:	fa01 f305 	lsl.w	r3, r1, r5
 8006c26:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006c2a:	e7ba      	b.n	8006ba2 <_strtod_l+0x6e2>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c30:	2301      	movs	r3, #1
 8006c32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c34:	e7b5      	b.n	8006ba2 <_strtod_l+0x6e2>
 8006c36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c38:	9805      	ldr	r0, [sp, #20]
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	f7ff f9c8 	bl	8005fd0 <__lshift>
 8006c40:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d1d9      	bne.n	8006bfa <_strtod_l+0x73a>
 8006c46:	e65a      	b.n	80068fe <_strtod_l+0x43e>
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	dd07      	ble.n	8006c5c <_strtod_l+0x79c>
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	9805      	ldr	r0, [sp, #20]
 8006c50:	4632      	mov	r2, r6
 8006c52:	f7ff f9bd 	bl	8005fd0 <__lshift>
 8006c56:	4681      	mov	r9, r0
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d0d8      	beq.n	8006c0e <_strtod_l+0x74e>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	dd08      	ble.n	8006c72 <_strtod_l+0x7b2>
 8006c60:	4641      	mov	r1, r8
 8006c62:	9805      	ldr	r0, [sp, #20]
 8006c64:	463a      	mov	r2, r7
 8006c66:	f7ff f9b3 	bl	8005fd0 <__lshift>
 8006c6a:	4680      	mov	r8, r0
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	f43f ae46 	beq.w	80068fe <_strtod_l+0x43e>
 8006c72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c74:	9805      	ldr	r0, [sp, #20]
 8006c76:	464a      	mov	r2, r9
 8006c78:	f7ff fa32 	bl	80060e0 <__mdiff>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f ae3d 	beq.w	80068fe <_strtod_l+0x43e>
 8006c84:	68c3      	ldr	r3, [r0, #12]
 8006c86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60c3      	str	r3, [r0, #12]
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	f7ff fa0b 	bl	80060a8 <__mcmp>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	da46      	bge.n	8006d24 <_strtod_l+0x864>
 8006c96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c98:	ea53 030a 	orrs.w	r3, r3, sl
 8006c9c:	d16c      	bne.n	8006d78 <_strtod_l+0x8b8>
 8006c9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d168      	bne.n	8006d78 <_strtod_l+0x8b8>
 8006ca6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006caa:	0d1b      	lsrs	r3, r3, #20
 8006cac:	051b      	lsls	r3, r3, #20
 8006cae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006cb2:	d961      	bls.n	8006d78 <_strtod_l+0x8b8>
 8006cb4:	6963      	ldr	r3, [r4, #20]
 8006cb6:	b913      	cbnz	r3, 8006cbe <_strtod_l+0x7fe>
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	dd5c      	ble.n	8006d78 <_strtod_l+0x8b8>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	9805      	ldr	r0, [sp, #20]
 8006cc4:	f7ff f984 	bl	8005fd0 <__lshift>
 8006cc8:	4641      	mov	r1, r8
 8006cca:	4604      	mov	r4, r0
 8006ccc:	f7ff f9ec 	bl	80060a8 <__mcmp>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	dd51      	ble.n	8006d78 <_strtod_l+0x8b8>
 8006cd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006cd8:	9a08      	ldr	r2, [sp, #32]
 8006cda:	0d1b      	lsrs	r3, r3, #20
 8006cdc:	051b      	lsls	r3, r3, #20
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d06b      	beq.n	8006dba <_strtod_l+0x8fa>
 8006ce2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ce6:	d868      	bhi.n	8006dba <_strtod_l+0x8fa>
 8006ce8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006cec:	f67f ae9d 	bls.w	8006a2a <_strtod_l+0x56a>
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <_strtod_l+0x85c>)
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f7f9 fc9e 	bl	8000638 <__aeabi_dmul>
 8006cfc:	4b08      	ldr	r3, [pc, #32]	@ (8006d20 <_strtod_l+0x860>)
 8006cfe:	400b      	ands	r3, r1
 8006d00:	4682      	mov	sl, r0
 8006d02:	468b      	mov	fp, r1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f47f ae05 	bne.w	8006914 <_strtod_l+0x454>
 8006d0a:	9a05      	ldr	r2, [sp, #20]
 8006d0c:	2322      	movs	r3, #34	@ 0x22
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	e600      	b.n	8006914 <_strtod_l+0x454>
 8006d12:	bf00      	nop
 8006d14:	08009490 	.word	0x08009490
 8006d18:	fffffc02 	.word	0xfffffc02
 8006d1c:	39500000 	.word	0x39500000
 8006d20:	7ff00000 	.word	0x7ff00000
 8006d24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006d28:	d165      	bne.n	8006df6 <_strtod_l+0x936>
 8006d2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d30:	b35a      	cbz	r2, 8006d8a <_strtod_l+0x8ca>
 8006d32:	4a9f      	ldr	r2, [pc, #636]	@ (8006fb0 <_strtod_l+0xaf0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d12b      	bne.n	8006d90 <_strtod_l+0x8d0>
 8006d38:	9b08      	ldr	r3, [sp, #32]
 8006d3a:	4651      	mov	r1, sl
 8006d3c:	b303      	cbz	r3, 8006d80 <_strtod_l+0x8c0>
 8006d3e:	4b9d      	ldr	r3, [pc, #628]	@ (8006fb4 <_strtod_l+0xaf4>)
 8006d40:	465a      	mov	r2, fp
 8006d42:	4013      	ands	r3, r2
 8006d44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	d81b      	bhi.n	8006d86 <_strtod_l+0x8c6>
 8006d4e:	0d1b      	lsrs	r3, r3, #20
 8006d50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d119      	bne.n	8006d90 <_strtod_l+0x8d0>
 8006d5c:	4b96      	ldr	r3, [pc, #600]	@ (8006fb8 <_strtod_l+0xaf8>)
 8006d5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d102      	bne.n	8006d6a <_strtod_l+0x8aa>
 8006d64:	3101      	adds	r1, #1
 8006d66:	f43f adca 	beq.w	80068fe <_strtod_l+0x43e>
 8006d6a:	4b92      	ldr	r3, [pc, #584]	@ (8006fb4 <_strtod_l+0xaf4>)
 8006d6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d6e:	401a      	ands	r2, r3
 8006d70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006d74:	f04f 0a00 	mov.w	sl, #0
 8006d78:	9b08      	ldr	r3, [sp, #32]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1b8      	bne.n	8006cf0 <_strtod_l+0x830>
 8006d7e:	e5c9      	b.n	8006914 <_strtod_l+0x454>
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
 8006d84:	e7e8      	b.n	8006d58 <_strtod_l+0x898>
 8006d86:	4613      	mov	r3, r2
 8006d88:	e7e6      	b.n	8006d58 <_strtod_l+0x898>
 8006d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8006d8e:	d0a1      	beq.n	8006cd4 <_strtod_l+0x814>
 8006d90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d92:	b1db      	cbz	r3, 8006dcc <_strtod_l+0x90c>
 8006d94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d96:	4213      	tst	r3, r2
 8006d98:	d0ee      	beq.n	8006d78 <_strtod_l+0x8b8>
 8006d9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d9c:	9a08      	ldr	r2, [sp, #32]
 8006d9e:	4650      	mov	r0, sl
 8006da0:	4659      	mov	r1, fp
 8006da2:	b1bb      	cbz	r3, 8006dd4 <_strtod_l+0x914>
 8006da4:	f7ff fb6e 	bl	8006484 <sulp>
 8006da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dac:	ec53 2b10 	vmov	r2, r3, d0
 8006db0:	f7f9 fa8c 	bl	80002cc <__adddf3>
 8006db4:	4682      	mov	sl, r0
 8006db6:	468b      	mov	fp, r1
 8006db8:	e7de      	b.n	8006d78 <_strtod_l+0x8b8>
 8006dba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006dbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006dc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006dc6:	f04f 3aff 	mov.w	sl, #4294967295
 8006dca:	e7d5      	b.n	8006d78 <_strtod_l+0x8b8>
 8006dcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dce:	ea13 0f0a 	tst.w	r3, sl
 8006dd2:	e7e1      	b.n	8006d98 <_strtod_l+0x8d8>
 8006dd4:	f7ff fb56 	bl	8006484 <sulp>
 8006dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ddc:	ec53 2b10 	vmov	r2, r3, d0
 8006de0:	f7f9 fa72 	bl	80002c8 <__aeabi_dsub>
 8006de4:	2200      	movs	r2, #0
 8006de6:	2300      	movs	r3, #0
 8006de8:	4682      	mov	sl, r0
 8006dea:	468b      	mov	fp, r1
 8006dec:	f7f9 fe8c 	bl	8000b08 <__aeabi_dcmpeq>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d0c1      	beq.n	8006d78 <_strtod_l+0x8b8>
 8006df4:	e619      	b.n	8006a2a <_strtod_l+0x56a>
 8006df6:	4641      	mov	r1, r8
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f7ff facd 	bl	8006398 <__ratio>
 8006dfe:	ec57 6b10 	vmov	r6, r7, d0
 8006e02:	2200      	movs	r2, #0
 8006e04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	f7f9 fe90 	bl	8000b30 <__aeabi_dcmple>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d06f      	beq.n	8006ef4 <_strtod_l+0xa34>
 8006e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d17a      	bne.n	8006f10 <_strtod_l+0xa50>
 8006e1a:	f1ba 0f00 	cmp.w	sl, #0
 8006e1e:	d158      	bne.n	8006ed2 <_strtod_l+0xa12>
 8006e20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d15a      	bne.n	8006ee0 <_strtod_l+0xa20>
 8006e2a:	4b64      	ldr	r3, [pc, #400]	@ (8006fbc <_strtod_l+0xafc>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4630      	mov	r0, r6
 8006e30:	4639      	mov	r1, r7
 8006e32:	f7f9 fe73 	bl	8000b1c <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d159      	bne.n	8006eee <_strtod_l+0xa2e>
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	4b60      	ldr	r3, [pc, #384]	@ (8006fc0 <_strtod_l+0xb00>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f7f9 fbf9 	bl	8000638 <__aeabi_dmul>
 8006e46:	4606      	mov	r6, r0
 8006e48:	460f      	mov	r7, r1
 8006e4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006e4e:	9606      	str	r6, [sp, #24]
 8006e50:	9307      	str	r3, [sp, #28]
 8006e52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e56:	4d57      	ldr	r5, [pc, #348]	@ (8006fb4 <_strtod_l+0xaf4>)
 8006e58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e5e:	401d      	ands	r5, r3
 8006e60:	4b58      	ldr	r3, [pc, #352]	@ (8006fc4 <_strtod_l+0xb04>)
 8006e62:	429d      	cmp	r5, r3
 8006e64:	f040 80b2 	bne.w	8006fcc <_strtod_l+0xb0c>
 8006e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006e6e:	ec4b ab10 	vmov	d0, sl, fp
 8006e72:	f7ff f9c9 	bl	8006208 <__ulp>
 8006e76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e7a:	ec51 0b10 	vmov	r0, r1, d0
 8006e7e:	f7f9 fbdb 	bl	8000638 <__aeabi_dmul>
 8006e82:	4652      	mov	r2, sl
 8006e84:	465b      	mov	r3, fp
 8006e86:	f7f9 fa21 	bl	80002cc <__adddf3>
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4949      	ldr	r1, [pc, #292]	@ (8006fb4 <_strtod_l+0xaf4>)
 8006e8e:	4a4e      	ldr	r2, [pc, #312]	@ (8006fc8 <_strtod_l+0xb08>)
 8006e90:	4019      	ands	r1, r3
 8006e92:	4291      	cmp	r1, r2
 8006e94:	4682      	mov	sl, r0
 8006e96:	d942      	bls.n	8006f1e <_strtod_l+0xa5e>
 8006e98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e9a:	4b47      	ldr	r3, [pc, #284]	@ (8006fb8 <_strtod_l+0xaf8>)
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d103      	bne.n	8006ea8 <_strtod_l+0x9e8>
 8006ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	f43f ad2b 	beq.w	80068fe <_strtod_l+0x43e>
 8006ea8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006fb8 <_strtod_l+0xaf8>
 8006eac:	f04f 3aff 	mov.w	sl, #4294967295
 8006eb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eb2:	9805      	ldr	r0, [sp, #20]
 8006eb4:	f7fe fe74 	bl	8005ba0 <_Bfree>
 8006eb8:	9805      	ldr	r0, [sp, #20]
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7fe fe70 	bl	8005ba0 <_Bfree>
 8006ec0:	9805      	ldr	r0, [sp, #20]
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	f7fe fe6c 	bl	8005ba0 <_Bfree>
 8006ec8:	9805      	ldr	r0, [sp, #20]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	f7fe fe68 	bl	8005ba0 <_Bfree>
 8006ed0:	e618      	b.n	8006b04 <_strtod_l+0x644>
 8006ed2:	f1ba 0f01 	cmp.w	sl, #1
 8006ed6:	d103      	bne.n	8006ee0 <_strtod_l+0xa20>
 8006ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f43f ada5 	beq.w	8006a2a <_strtod_l+0x56a>
 8006ee0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006f90 <_strtod_l+0xad0>
 8006ee4:	4f35      	ldr	r7, [pc, #212]	@ (8006fbc <_strtod_l+0xafc>)
 8006ee6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006eea:	2600      	movs	r6, #0
 8006eec:	e7b1      	b.n	8006e52 <_strtod_l+0x992>
 8006eee:	4f34      	ldr	r7, [pc, #208]	@ (8006fc0 <_strtod_l+0xb00>)
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	e7aa      	b.n	8006e4a <_strtod_l+0x98a>
 8006ef4:	4b32      	ldr	r3, [pc, #200]	@ (8006fc0 <_strtod_l+0xb00>)
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	2200      	movs	r2, #0
 8006efc:	f7f9 fb9c 	bl	8000638 <__aeabi_dmul>
 8006f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f02:	4606      	mov	r6, r0
 8006f04:	460f      	mov	r7, r1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d09f      	beq.n	8006e4a <_strtod_l+0x98a>
 8006f0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006f0e:	e7a0      	b.n	8006e52 <_strtod_l+0x992>
 8006f10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006f98 <_strtod_l+0xad8>
 8006f14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f18:	ec57 6b17 	vmov	r6, r7, d7
 8006f1c:	e799      	b.n	8006e52 <_strtod_l+0x992>
 8006f1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006f22:	9b08      	ldr	r3, [sp, #32]
 8006f24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1c1      	bne.n	8006eb0 <_strtod_l+0x9f0>
 8006f2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f30:	0d1b      	lsrs	r3, r3, #20
 8006f32:	051b      	lsls	r3, r3, #20
 8006f34:	429d      	cmp	r5, r3
 8006f36:	d1bb      	bne.n	8006eb0 <_strtod_l+0x9f0>
 8006f38:	4630      	mov	r0, r6
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	f7f9 fedc 	bl	8000cf8 <__aeabi_d2lz>
 8006f40:	f7f9 fb4c 	bl	80005dc <__aeabi_l2d>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	f7f9 f9bc 	bl	80002c8 <__aeabi_dsub>
 8006f50:	460b      	mov	r3, r1
 8006f52:	4602      	mov	r2, r0
 8006f54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006f58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f5e:	ea46 060a 	orr.w	r6, r6, sl
 8006f62:	431e      	orrs	r6, r3
 8006f64:	d06f      	beq.n	8007046 <_strtod_l+0xb86>
 8006f66:	a30e      	add	r3, pc, #56	@ (adr r3, 8006fa0 <_strtod_l+0xae0>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7f9 fdd6 	bl	8000b1c <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f47f accf 	bne.w	8006914 <_strtod_l+0x454>
 8006f76:	a30c      	add	r3, pc, #48	@ (adr r3, 8006fa8 <_strtod_l+0xae8>)
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f80:	f7f9 fdea 	bl	8000b58 <__aeabi_dcmpgt>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d093      	beq.n	8006eb0 <_strtod_l+0x9f0>
 8006f88:	e4c4      	b.n	8006914 <_strtod_l+0x454>
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w
 8006f90:	00000000 	.word	0x00000000
 8006f94:	bff00000 	.word	0xbff00000
 8006f98:	00000000 	.word	0x00000000
 8006f9c:	3ff00000 	.word	0x3ff00000
 8006fa0:	94a03595 	.word	0x94a03595
 8006fa4:	3fdfffff 	.word	0x3fdfffff
 8006fa8:	35afe535 	.word	0x35afe535
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	000fffff 	.word	0x000fffff
 8006fb4:	7ff00000 	.word	0x7ff00000
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	3fe00000 	.word	0x3fe00000
 8006fc4:	7fe00000 	.word	0x7fe00000
 8006fc8:	7c9fffff 	.word	0x7c9fffff
 8006fcc:	9b08      	ldr	r3, [sp, #32]
 8006fce:	b323      	cbz	r3, 800701a <_strtod_l+0xb5a>
 8006fd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006fd4:	d821      	bhi.n	800701a <_strtod_l+0xb5a>
 8006fd6:	a328      	add	r3, pc, #160	@ (adr r3, 8007078 <_strtod_l+0xbb8>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	4630      	mov	r0, r6
 8006fde:	4639      	mov	r1, r7
 8006fe0:	f7f9 fda6 	bl	8000b30 <__aeabi_dcmple>
 8006fe4:	b1a0      	cbz	r0, 8007010 <_strtod_l+0xb50>
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7f9 fdfd 	bl	8000be8 <__aeabi_d2uiz>
 8006fee:	2801      	cmp	r0, #1
 8006ff0:	bf38      	it	cc
 8006ff2:	2001      	movcc	r0, #1
 8006ff4:	f7f9 faa6 	bl	8000544 <__aeabi_ui2d>
 8006ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	460f      	mov	r7, r1
 8006ffe:	b9fb      	cbnz	r3, 8007040 <_strtod_l+0xb80>
 8007000:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007004:	9014      	str	r0, [sp, #80]	@ 0x50
 8007006:	9315      	str	r3, [sp, #84]	@ 0x54
 8007008:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800700c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007010:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007012:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007016:	1b5b      	subs	r3, r3, r5
 8007018:	9311      	str	r3, [sp, #68]	@ 0x44
 800701a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800701e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007022:	f7ff f8f1 	bl	8006208 <__ulp>
 8007026:	4650      	mov	r0, sl
 8007028:	ec53 2b10 	vmov	r2, r3, d0
 800702c:	4659      	mov	r1, fp
 800702e:	f7f9 fb03 	bl	8000638 <__aeabi_dmul>
 8007032:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007036:	f7f9 f949 	bl	80002cc <__adddf3>
 800703a:	4682      	mov	sl, r0
 800703c:	468b      	mov	fp, r1
 800703e:	e770      	b.n	8006f22 <_strtod_l+0xa62>
 8007040:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007044:	e7e0      	b.n	8007008 <_strtod_l+0xb48>
 8007046:	a30e      	add	r3, pc, #56	@ (adr r3, 8007080 <_strtod_l+0xbc0>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 fd66 	bl	8000b1c <__aeabi_dcmplt>
 8007050:	e798      	b.n	8006f84 <_strtod_l+0xac4>
 8007052:	2300      	movs	r3, #0
 8007054:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007056:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	f7ff ba6d 	b.w	800653a <_strtod_l+0x7a>
 8007060:	2a65      	cmp	r2, #101	@ 0x65
 8007062:	f43f ab66 	beq.w	8006732 <_strtod_l+0x272>
 8007066:	2a45      	cmp	r2, #69	@ 0x45
 8007068:	f43f ab63 	beq.w	8006732 <_strtod_l+0x272>
 800706c:	2301      	movs	r3, #1
 800706e:	f7ff bb9e 	b.w	80067ae <_strtod_l+0x2ee>
 8007072:	bf00      	nop
 8007074:	f3af 8000 	nop.w
 8007078:	ffc00000 	.word	0xffc00000
 800707c:	41dfffff 	.word	0x41dfffff
 8007080:	94a03595 	.word	0x94a03595
 8007084:	3fcfffff 	.word	0x3fcfffff

08007088 <_strtod_r>:
 8007088:	4b01      	ldr	r3, [pc, #4]	@ (8007090 <_strtod_r+0x8>)
 800708a:	f7ff ba19 	b.w	80064c0 <_strtod_l>
 800708e:	bf00      	nop
 8007090:	20000068 	.word	0x20000068

08007094 <_strtol_l.constprop.0>:
 8007094:	2b24      	cmp	r3, #36	@ 0x24
 8007096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709a:	4686      	mov	lr, r0
 800709c:	4690      	mov	r8, r2
 800709e:	d801      	bhi.n	80070a4 <_strtol_l.constprop.0+0x10>
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d106      	bne.n	80070b2 <_strtol_l.constprop.0+0x1e>
 80070a4:	f7fd fdbc 	bl	8004c20 <__errno>
 80070a8:	2316      	movs	r3, #22
 80070aa:	6003      	str	r3, [r0, #0]
 80070ac:	2000      	movs	r0, #0
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b2:	4834      	ldr	r0, [pc, #208]	@ (8007184 <_strtol_l.constprop.0+0xf0>)
 80070b4:	460d      	mov	r5, r1
 80070b6:	462a      	mov	r2, r5
 80070b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070bc:	5d06      	ldrb	r6, [r0, r4]
 80070be:	f016 0608 	ands.w	r6, r6, #8
 80070c2:	d1f8      	bne.n	80070b6 <_strtol_l.constprop.0+0x22>
 80070c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80070c6:	d12d      	bne.n	8007124 <_strtol_l.constprop.0+0x90>
 80070c8:	782c      	ldrb	r4, [r5, #0]
 80070ca:	2601      	movs	r6, #1
 80070cc:	1c95      	adds	r5, r2, #2
 80070ce:	f033 0210 	bics.w	r2, r3, #16
 80070d2:	d109      	bne.n	80070e8 <_strtol_l.constprop.0+0x54>
 80070d4:	2c30      	cmp	r4, #48	@ 0x30
 80070d6:	d12a      	bne.n	800712e <_strtol_l.constprop.0+0x9a>
 80070d8:	782a      	ldrb	r2, [r5, #0]
 80070da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070de:	2a58      	cmp	r2, #88	@ 0x58
 80070e0:	d125      	bne.n	800712e <_strtol_l.constprop.0+0x9a>
 80070e2:	786c      	ldrb	r4, [r5, #1]
 80070e4:	2310      	movs	r3, #16
 80070e6:	3502      	adds	r5, #2
 80070e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80070ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070f0:	2200      	movs	r2, #0
 80070f2:	fbbc f9f3 	udiv	r9, ip, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80070fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007100:	2f09      	cmp	r7, #9
 8007102:	d81b      	bhi.n	800713c <_strtol_l.constprop.0+0xa8>
 8007104:	463c      	mov	r4, r7
 8007106:	42a3      	cmp	r3, r4
 8007108:	dd27      	ble.n	800715a <_strtol_l.constprop.0+0xc6>
 800710a:	1c57      	adds	r7, r2, #1
 800710c:	d007      	beq.n	800711e <_strtol_l.constprop.0+0x8a>
 800710e:	4581      	cmp	r9, r0
 8007110:	d320      	bcc.n	8007154 <_strtol_l.constprop.0+0xc0>
 8007112:	d101      	bne.n	8007118 <_strtol_l.constprop.0+0x84>
 8007114:	45a2      	cmp	sl, r4
 8007116:	db1d      	blt.n	8007154 <_strtol_l.constprop.0+0xc0>
 8007118:	fb00 4003 	mla	r0, r0, r3, r4
 800711c:	2201      	movs	r2, #1
 800711e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007122:	e7eb      	b.n	80070fc <_strtol_l.constprop.0+0x68>
 8007124:	2c2b      	cmp	r4, #43	@ 0x2b
 8007126:	bf04      	itt	eq
 8007128:	782c      	ldrbeq	r4, [r5, #0]
 800712a:	1c95      	addeq	r5, r2, #2
 800712c:	e7cf      	b.n	80070ce <_strtol_l.constprop.0+0x3a>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1da      	bne.n	80070e8 <_strtol_l.constprop.0+0x54>
 8007132:	2c30      	cmp	r4, #48	@ 0x30
 8007134:	bf0c      	ite	eq
 8007136:	2308      	moveq	r3, #8
 8007138:	230a      	movne	r3, #10
 800713a:	e7d5      	b.n	80070e8 <_strtol_l.constprop.0+0x54>
 800713c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007140:	2f19      	cmp	r7, #25
 8007142:	d801      	bhi.n	8007148 <_strtol_l.constprop.0+0xb4>
 8007144:	3c37      	subs	r4, #55	@ 0x37
 8007146:	e7de      	b.n	8007106 <_strtol_l.constprop.0+0x72>
 8007148:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800714c:	2f19      	cmp	r7, #25
 800714e:	d804      	bhi.n	800715a <_strtol_l.constprop.0+0xc6>
 8007150:	3c57      	subs	r4, #87	@ 0x57
 8007152:	e7d8      	b.n	8007106 <_strtol_l.constprop.0+0x72>
 8007154:	f04f 32ff 	mov.w	r2, #4294967295
 8007158:	e7e1      	b.n	800711e <_strtol_l.constprop.0+0x8a>
 800715a:	1c53      	adds	r3, r2, #1
 800715c:	d108      	bne.n	8007170 <_strtol_l.constprop.0+0xdc>
 800715e:	2322      	movs	r3, #34	@ 0x22
 8007160:	f8ce 3000 	str.w	r3, [lr]
 8007164:	4660      	mov	r0, ip
 8007166:	f1b8 0f00 	cmp.w	r8, #0
 800716a:	d0a0      	beq.n	80070ae <_strtol_l.constprop.0+0x1a>
 800716c:	1e69      	subs	r1, r5, #1
 800716e:	e006      	b.n	800717e <_strtol_l.constprop.0+0xea>
 8007170:	b106      	cbz	r6, 8007174 <_strtol_l.constprop.0+0xe0>
 8007172:	4240      	negs	r0, r0
 8007174:	f1b8 0f00 	cmp.w	r8, #0
 8007178:	d099      	beq.n	80070ae <_strtol_l.constprop.0+0x1a>
 800717a:	2a00      	cmp	r2, #0
 800717c:	d1f6      	bne.n	800716c <_strtol_l.constprop.0+0xd8>
 800717e:	f8c8 1000 	str.w	r1, [r8]
 8007182:	e794      	b.n	80070ae <_strtol_l.constprop.0+0x1a>
 8007184:	080094b9 	.word	0x080094b9

08007188 <_strtol_r>:
 8007188:	f7ff bf84 	b.w	8007094 <_strtol_l.constprop.0>

0800718c <__ssputs_r>:
 800718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	688e      	ldr	r6, [r1, #8]
 8007192:	461f      	mov	r7, r3
 8007194:	42be      	cmp	r6, r7
 8007196:	680b      	ldr	r3, [r1, #0]
 8007198:	4682      	mov	sl, r0
 800719a:	460c      	mov	r4, r1
 800719c:	4690      	mov	r8, r2
 800719e:	d82d      	bhi.n	80071fc <__ssputs_r+0x70>
 80071a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071a8:	d026      	beq.n	80071f8 <__ssputs_r+0x6c>
 80071aa:	6965      	ldr	r5, [r4, #20]
 80071ac:	6909      	ldr	r1, [r1, #16]
 80071ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071b2:	eba3 0901 	sub.w	r9, r3, r1
 80071b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071ba:	1c7b      	adds	r3, r7, #1
 80071bc:	444b      	add	r3, r9
 80071be:	106d      	asrs	r5, r5, #1
 80071c0:	429d      	cmp	r5, r3
 80071c2:	bf38      	it	cc
 80071c4:	461d      	movcc	r5, r3
 80071c6:	0553      	lsls	r3, r2, #21
 80071c8:	d527      	bpl.n	800721a <__ssputs_r+0x8e>
 80071ca:	4629      	mov	r1, r5
 80071cc:	f7fe fc1c 	bl	8005a08 <_malloc_r>
 80071d0:	4606      	mov	r6, r0
 80071d2:	b360      	cbz	r0, 800722e <__ssputs_r+0xa2>
 80071d4:	6921      	ldr	r1, [r4, #16]
 80071d6:	464a      	mov	r2, r9
 80071d8:	f000 fbee 	bl	80079b8 <memcpy>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	6126      	str	r6, [r4, #16]
 80071ea:	6165      	str	r5, [r4, #20]
 80071ec:	444e      	add	r6, r9
 80071ee:	eba5 0509 	sub.w	r5, r5, r9
 80071f2:	6026      	str	r6, [r4, #0]
 80071f4:	60a5      	str	r5, [r4, #8]
 80071f6:	463e      	mov	r6, r7
 80071f8:	42be      	cmp	r6, r7
 80071fa:	d900      	bls.n	80071fe <__ssputs_r+0x72>
 80071fc:	463e      	mov	r6, r7
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	4632      	mov	r2, r6
 8007202:	4641      	mov	r1, r8
 8007204:	f000 fb9c 	bl	8007940 <memmove>
 8007208:	68a3      	ldr	r3, [r4, #8]
 800720a:	1b9b      	subs	r3, r3, r6
 800720c:	60a3      	str	r3, [r4, #8]
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	4433      	add	r3, r6
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	2000      	movs	r0, #0
 8007216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721a:	462a      	mov	r2, r5
 800721c:	f000 ff61 	bl	80080e2 <_realloc_r>
 8007220:	4606      	mov	r6, r0
 8007222:	2800      	cmp	r0, #0
 8007224:	d1e0      	bne.n	80071e8 <__ssputs_r+0x5c>
 8007226:	6921      	ldr	r1, [r4, #16]
 8007228:	4650      	mov	r0, sl
 800722a:	f7fe fb79 	bl	8005920 <_free_r>
 800722e:	230c      	movs	r3, #12
 8007230:	f8ca 3000 	str.w	r3, [sl]
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	e7e9      	b.n	8007216 <__ssputs_r+0x8a>
	...

08007244 <_svfiprintf_r>:
 8007244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	4698      	mov	r8, r3
 800724a:	898b      	ldrh	r3, [r1, #12]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	b09d      	sub	sp, #116	@ 0x74
 8007250:	4607      	mov	r7, r0
 8007252:	460d      	mov	r5, r1
 8007254:	4614      	mov	r4, r2
 8007256:	d510      	bpl.n	800727a <_svfiprintf_r+0x36>
 8007258:	690b      	ldr	r3, [r1, #16]
 800725a:	b973      	cbnz	r3, 800727a <_svfiprintf_r+0x36>
 800725c:	2140      	movs	r1, #64	@ 0x40
 800725e:	f7fe fbd3 	bl	8005a08 <_malloc_r>
 8007262:	6028      	str	r0, [r5, #0]
 8007264:	6128      	str	r0, [r5, #16]
 8007266:	b930      	cbnz	r0, 8007276 <_svfiprintf_r+0x32>
 8007268:	230c      	movs	r3, #12
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	b01d      	add	sp, #116	@ 0x74
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	2340      	movs	r3, #64	@ 0x40
 8007278:	616b      	str	r3, [r5, #20]
 800727a:	2300      	movs	r3, #0
 800727c:	9309      	str	r3, [sp, #36]	@ 0x24
 800727e:	2320      	movs	r3, #32
 8007280:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007284:	f8cd 800c 	str.w	r8, [sp, #12]
 8007288:	2330      	movs	r3, #48	@ 0x30
 800728a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007428 <_svfiprintf_r+0x1e4>
 800728e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007292:	f04f 0901 	mov.w	r9, #1
 8007296:	4623      	mov	r3, r4
 8007298:	469a      	mov	sl, r3
 800729a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800729e:	b10a      	cbz	r2, 80072a4 <_svfiprintf_r+0x60>
 80072a0:	2a25      	cmp	r2, #37	@ 0x25
 80072a2:	d1f9      	bne.n	8007298 <_svfiprintf_r+0x54>
 80072a4:	ebba 0b04 	subs.w	fp, sl, r4
 80072a8:	d00b      	beq.n	80072c2 <_svfiprintf_r+0x7e>
 80072aa:	465b      	mov	r3, fp
 80072ac:	4622      	mov	r2, r4
 80072ae:	4629      	mov	r1, r5
 80072b0:	4638      	mov	r0, r7
 80072b2:	f7ff ff6b 	bl	800718c <__ssputs_r>
 80072b6:	3001      	adds	r0, #1
 80072b8:	f000 80a7 	beq.w	800740a <_svfiprintf_r+0x1c6>
 80072bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072be:	445a      	add	r2, fp
 80072c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80072c2:	f89a 3000 	ldrb.w	r3, [sl]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 809f 	beq.w	800740a <_svfiprintf_r+0x1c6>
 80072cc:	2300      	movs	r3, #0
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d6:	f10a 0a01 	add.w	sl, sl, #1
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	9307      	str	r3, [sp, #28]
 80072de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80072e4:	4654      	mov	r4, sl
 80072e6:	2205      	movs	r2, #5
 80072e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ec:	484e      	ldr	r0, [pc, #312]	@ (8007428 <_svfiprintf_r+0x1e4>)
 80072ee:	f7f8 ff8f 	bl	8000210 <memchr>
 80072f2:	9a04      	ldr	r2, [sp, #16]
 80072f4:	b9d8      	cbnz	r0, 800732e <_svfiprintf_r+0xea>
 80072f6:	06d0      	lsls	r0, r2, #27
 80072f8:	bf44      	itt	mi
 80072fa:	2320      	movmi	r3, #32
 80072fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007300:	0711      	lsls	r1, r2, #28
 8007302:	bf44      	itt	mi
 8007304:	232b      	movmi	r3, #43	@ 0x2b
 8007306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800730a:	f89a 3000 	ldrb.w	r3, [sl]
 800730e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007310:	d015      	beq.n	800733e <_svfiprintf_r+0xfa>
 8007312:	9a07      	ldr	r2, [sp, #28]
 8007314:	4654      	mov	r4, sl
 8007316:	2000      	movs	r0, #0
 8007318:	f04f 0c0a 	mov.w	ip, #10
 800731c:	4621      	mov	r1, r4
 800731e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007322:	3b30      	subs	r3, #48	@ 0x30
 8007324:	2b09      	cmp	r3, #9
 8007326:	d94b      	bls.n	80073c0 <_svfiprintf_r+0x17c>
 8007328:	b1b0      	cbz	r0, 8007358 <_svfiprintf_r+0x114>
 800732a:	9207      	str	r2, [sp, #28]
 800732c:	e014      	b.n	8007358 <_svfiprintf_r+0x114>
 800732e:	eba0 0308 	sub.w	r3, r0, r8
 8007332:	fa09 f303 	lsl.w	r3, r9, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	46a2      	mov	sl, r4
 800733c:	e7d2      	b.n	80072e4 <_svfiprintf_r+0xa0>
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	9103      	str	r1, [sp, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfbb      	ittet	lt
 800734a:	425b      	neglt	r3, r3
 800734c:	f042 0202 	orrlt.w	r2, r2, #2
 8007350:	9307      	strge	r3, [sp, #28]
 8007352:	9307      	strlt	r3, [sp, #28]
 8007354:	bfb8      	it	lt
 8007356:	9204      	strlt	r2, [sp, #16]
 8007358:	7823      	ldrb	r3, [r4, #0]
 800735a:	2b2e      	cmp	r3, #46	@ 0x2e
 800735c:	d10a      	bne.n	8007374 <_svfiprintf_r+0x130>
 800735e:	7863      	ldrb	r3, [r4, #1]
 8007360:	2b2a      	cmp	r3, #42	@ 0x2a
 8007362:	d132      	bne.n	80073ca <_svfiprintf_r+0x186>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	1d1a      	adds	r2, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	9203      	str	r2, [sp, #12]
 800736c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007370:	3402      	adds	r4, #2
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007438 <_svfiprintf_r+0x1f4>
 8007378:	7821      	ldrb	r1, [r4, #0]
 800737a:	2203      	movs	r2, #3
 800737c:	4650      	mov	r0, sl
 800737e:	f7f8 ff47 	bl	8000210 <memchr>
 8007382:	b138      	cbz	r0, 8007394 <_svfiprintf_r+0x150>
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	eba0 000a 	sub.w	r0, r0, sl
 800738a:	2240      	movs	r2, #64	@ 0x40
 800738c:	4082      	lsls	r2, r0
 800738e:	4313      	orrs	r3, r2
 8007390:	3401      	adds	r4, #1
 8007392:	9304      	str	r3, [sp, #16]
 8007394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007398:	4824      	ldr	r0, [pc, #144]	@ (800742c <_svfiprintf_r+0x1e8>)
 800739a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800739e:	2206      	movs	r2, #6
 80073a0:	f7f8 ff36 	bl	8000210 <memchr>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d036      	beq.n	8007416 <_svfiprintf_r+0x1d2>
 80073a8:	4b21      	ldr	r3, [pc, #132]	@ (8007430 <_svfiprintf_r+0x1ec>)
 80073aa:	bb1b      	cbnz	r3, 80073f4 <_svfiprintf_r+0x1b0>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	3307      	adds	r3, #7
 80073b0:	f023 0307 	bic.w	r3, r3, #7
 80073b4:	3308      	adds	r3, #8
 80073b6:	9303      	str	r3, [sp, #12]
 80073b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ba:	4433      	add	r3, r6
 80073bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073be:	e76a      	b.n	8007296 <_svfiprintf_r+0x52>
 80073c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c4:	460c      	mov	r4, r1
 80073c6:	2001      	movs	r0, #1
 80073c8:	e7a8      	b.n	800731c <_svfiprintf_r+0xd8>
 80073ca:	2300      	movs	r3, #0
 80073cc:	3401      	adds	r4, #1
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f04f 0c0a 	mov.w	ip, #10
 80073d6:	4620      	mov	r0, r4
 80073d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073dc:	3a30      	subs	r2, #48	@ 0x30
 80073de:	2a09      	cmp	r2, #9
 80073e0:	d903      	bls.n	80073ea <_svfiprintf_r+0x1a6>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0c6      	beq.n	8007374 <_svfiprintf_r+0x130>
 80073e6:	9105      	str	r1, [sp, #20]
 80073e8:	e7c4      	b.n	8007374 <_svfiprintf_r+0x130>
 80073ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ee:	4604      	mov	r4, r0
 80073f0:	2301      	movs	r3, #1
 80073f2:	e7f0      	b.n	80073d6 <_svfiprintf_r+0x192>
 80073f4:	ab03      	add	r3, sp, #12
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	462a      	mov	r2, r5
 80073fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007434 <_svfiprintf_r+0x1f0>)
 80073fc:	a904      	add	r1, sp, #16
 80073fe:	4638      	mov	r0, r7
 8007400:	f7fc fcb8 	bl	8003d74 <_printf_float>
 8007404:	1c42      	adds	r2, r0, #1
 8007406:	4606      	mov	r6, r0
 8007408:	d1d6      	bne.n	80073b8 <_svfiprintf_r+0x174>
 800740a:	89ab      	ldrh	r3, [r5, #12]
 800740c:	065b      	lsls	r3, r3, #25
 800740e:	f53f af2d 	bmi.w	800726c <_svfiprintf_r+0x28>
 8007412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007414:	e72c      	b.n	8007270 <_svfiprintf_r+0x2c>
 8007416:	ab03      	add	r3, sp, #12
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	462a      	mov	r2, r5
 800741c:	4b05      	ldr	r3, [pc, #20]	@ (8007434 <_svfiprintf_r+0x1f0>)
 800741e:	a904      	add	r1, sp, #16
 8007420:	4638      	mov	r0, r7
 8007422:	f7fc ff3f 	bl	80042a4 <_printf_i>
 8007426:	e7ed      	b.n	8007404 <_svfiprintf_r+0x1c0>
 8007428:	080095b9 	.word	0x080095b9
 800742c:	080095c3 	.word	0x080095c3
 8007430:	08003d75 	.word	0x08003d75
 8007434:	0800718d 	.word	0x0800718d
 8007438:	080095bf 	.word	0x080095bf

0800743c <__sfputc_r>:
 800743c:	6893      	ldr	r3, [r2, #8]
 800743e:	3b01      	subs	r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	b410      	push	{r4}
 8007444:	6093      	str	r3, [r2, #8]
 8007446:	da08      	bge.n	800745a <__sfputc_r+0x1e>
 8007448:	6994      	ldr	r4, [r2, #24]
 800744a:	42a3      	cmp	r3, r4
 800744c:	db01      	blt.n	8007452 <__sfputc_r+0x16>
 800744e:	290a      	cmp	r1, #10
 8007450:	d103      	bne.n	800745a <__sfputc_r+0x1e>
 8007452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007456:	f000 b9df 	b.w	8007818 <__swbuf_r>
 800745a:	6813      	ldr	r3, [r2, #0]
 800745c:	1c58      	adds	r0, r3, #1
 800745e:	6010      	str	r0, [r2, #0]
 8007460:	7019      	strb	r1, [r3, #0]
 8007462:	4608      	mov	r0, r1
 8007464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007468:	4770      	bx	lr

0800746a <__sfputs_r>:
 800746a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746c:	4606      	mov	r6, r0
 800746e:	460f      	mov	r7, r1
 8007470:	4614      	mov	r4, r2
 8007472:	18d5      	adds	r5, r2, r3
 8007474:	42ac      	cmp	r4, r5
 8007476:	d101      	bne.n	800747c <__sfputs_r+0x12>
 8007478:	2000      	movs	r0, #0
 800747a:	e007      	b.n	800748c <__sfputs_r+0x22>
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	463a      	mov	r2, r7
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ffda 	bl	800743c <__sfputc_r>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d1f3      	bne.n	8007474 <__sfputs_r+0xa>
 800748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007490 <_vfiprintf_r>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	460d      	mov	r5, r1
 8007496:	b09d      	sub	sp, #116	@ 0x74
 8007498:	4614      	mov	r4, r2
 800749a:	4698      	mov	r8, r3
 800749c:	4606      	mov	r6, r0
 800749e:	b118      	cbz	r0, 80074a8 <_vfiprintf_r+0x18>
 80074a0:	6a03      	ldr	r3, [r0, #32]
 80074a2:	b90b      	cbnz	r3, 80074a8 <_vfiprintf_r+0x18>
 80074a4:	f7fd fabe 	bl	8004a24 <__sinit>
 80074a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074aa:	07d9      	lsls	r1, r3, #31
 80074ac:	d405      	bmi.n	80074ba <_vfiprintf_r+0x2a>
 80074ae:	89ab      	ldrh	r3, [r5, #12]
 80074b0:	059a      	lsls	r2, r3, #22
 80074b2:	d402      	bmi.n	80074ba <_vfiprintf_r+0x2a>
 80074b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074b6:	f7fd fbde 	bl	8004c76 <__retarget_lock_acquire_recursive>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	071b      	lsls	r3, r3, #28
 80074be:	d501      	bpl.n	80074c4 <_vfiprintf_r+0x34>
 80074c0:	692b      	ldr	r3, [r5, #16]
 80074c2:	b99b      	cbnz	r3, 80074ec <_vfiprintf_r+0x5c>
 80074c4:	4629      	mov	r1, r5
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f9e4 	bl	8007894 <__swsetup_r>
 80074cc:	b170      	cbz	r0, 80074ec <_vfiprintf_r+0x5c>
 80074ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074d0:	07dc      	lsls	r4, r3, #31
 80074d2:	d504      	bpl.n	80074de <_vfiprintf_r+0x4e>
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	b01d      	add	sp, #116	@ 0x74
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	0598      	lsls	r0, r3, #22
 80074e2:	d4f7      	bmi.n	80074d4 <_vfiprintf_r+0x44>
 80074e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074e6:	f7fd fbc7 	bl	8004c78 <__retarget_lock_release_recursive>
 80074ea:	e7f3      	b.n	80074d4 <_vfiprintf_r+0x44>
 80074ec:	2300      	movs	r3, #0
 80074ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80074f0:	2320      	movs	r3, #32
 80074f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fa:	2330      	movs	r3, #48	@ 0x30
 80074fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076ac <_vfiprintf_r+0x21c>
 8007500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007504:	f04f 0901 	mov.w	r9, #1
 8007508:	4623      	mov	r3, r4
 800750a:	469a      	mov	sl, r3
 800750c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007510:	b10a      	cbz	r2, 8007516 <_vfiprintf_r+0x86>
 8007512:	2a25      	cmp	r2, #37	@ 0x25
 8007514:	d1f9      	bne.n	800750a <_vfiprintf_r+0x7a>
 8007516:	ebba 0b04 	subs.w	fp, sl, r4
 800751a:	d00b      	beq.n	8007534 <_vfiprintf_r+0xa4>
 800751c:	465b      	mov	r3, fp
 800751e:	4622      	mov	r2, r4
 8007520:	4629      	mov	r1, r5
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff ffa1 	bl	800746a <__sfputs_r>
 8007528:	3001      	adds	r0, #1
 800752a:	f000 80a7 	beq.w	800767c <_vfiprintf_r+0x1ec>
 800752e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007530:	445a      	add	r2, fp
 8007532:	9209      	str	r2, [sp, #36]	@ 0x24
 8007534:	f89a 3000 	ldrb.w	r3, [sl]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 809f 	beq.w	800767c <_vfiprintf_r+0x1ec>
 800753e:	2300      	movs	r3, #0
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007548:	f10a 0a01 	add.w	sl, sl, #1
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007554:	931a      	str	r3, [sp, #104]	@ 0x68
 8007556:	4654      	mov	r4, sl
 8007558:	2205      	movs	r2, #5
 800755a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755e:	4853      	ldr	r0, [pc, #332]	@ (80076ac <_vfiprintf_r+0x21c>)
 8007560:	f7f8 fe56 	bl	8000210 <memchr>
 8007564:	9a04      	ldr	r2, [sp, #16]
 8007566:	b9d8      	cbnz	r0, 80075a0 <_vfiprintf_r+0x110>
 8007568:	06d1      	lsls	r1, r2, #27
 800756a:	bf44      	itt	mi
 800756c:	2320      	movmi	r3, #32
 800756e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007572:	0713      	lsls	r3, r2, #28
 8007574:	bf44      	itt	mi
 8007576:	232b      	movmi	r3, #43	@ 0x2b
 8007578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800757c:	f89a 3000 	ldrb.w	r3, [sl]
 8007580:	2b2a      	cmp	r3, #42	@ 0x2a
 8007582:	d015      	beq.n	80075b0 <_vfiprintf_r+0x120>
 8007584:	9a07      	ldr	r2, [sp, #28]
 8007586:	4654      	mov	r4, sl
 8007588:	2000      	movs	r0, #0
 800758a:	f04f 0c0a 	mov.w	ip, #10
 800758e:	4621      	mov	r1, r4
 8007590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007594:	3b30      	subs	r3, #48	@ 0x30
 8007596:	2b09      	cmp	r3, #9
 8007598:	d94b      	bls.n	8007632 <_vfiprintf_r+0x1a2>
 800759a:	b1b0      	cbz	r0, 80075ca <_vfiprintf_r+0x13a>
 800759c:	9207      	str	r2, [sp, #28]
 800759e:	e014      	b.n	80075ca <_vfiprintf_r+0x13a>
 80075a0:	eba0 0308 	sub.w	r3, r0, r8
 80075a4:	fa09 f303 	lsl.w	r3, r9, r3
 80075a8:	4313      	orrs	r3, r2
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	46a2      	mov	sl, r4
 80075ae:	e7d2      	b.n	8007556 <_vfiprintf_r+0xc6>
 80075b0:	9b03      	ldr	r3, [sp, #12]
 80075b2:	1d19      	adds	r1, r3, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	9103      	str	r1, [sp, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfbb      	ittet	lt
 80075bc:	425b      	neglt	r3, r3
 80075be:	f042 0202 	orrlt.w	r2, r2, #2
 80075c2:	9307      	strge	r3, [sp, #28]
 80075c4:	9307      	strlt	r3, [sp, #28]
 80075c6:	bfb8      	it	lt
 80075c8:	9204      	strlt	r2, [sp, #16]
 80075ca:	7823      	ldrb	r3, [r4, #0]
 80075cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ce:	d10a      	bne.n	80075e6 <_vfiprintf_r+0x156>
 80075d0:	7863      	ldrb	r3, [r4, #1]
 80075d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80075d4:	d132      	bne.n	800763c <_vfiprintf_r+0x1ac>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	1d1a      	adds	r2, r3, #4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	9203      	str	r2, [sp, #12]
 80075de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075e2:	3402      	adds	r4, #2
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076bc <_vfiprintf_r+0x22c>
 80075ea:	7821      	ldrb	r1, [r4, #0]
 80075ec:	2203      	movs	r2, #3
 80075ee:	4650      	mov	r0, sl
 80075f0:	f7f8 fe0e 	bl	8000210 <memchr>
 80075f4:	b138      	cbz	r0, 8007606 <_vfiprintf_r+0x176>
 80075f6:	9b04      	ldr	r3, [sp, #16]
 80075f8:	eba0 000a 	sub.w	r0, r0, sl
 80075fc:	2240      	movs	r2, #64	@ 0x40
 80075fe:	4082      	lsls	r2, r0
 8007600:	4313      	orrs	r3, r2
 8007602:	3401      	adds	r4, #1
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760a:	4829      	ldr	r0, [pc, #164]	@ (80076b0 <_vfiprintf_r+0x220>)
 800760c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007610:	2206      	movs	r2, #6
 8007612:	f7f8 fdfd 	bl	8000210 <memchr>
 8007616:	2800      	cmp	r0, #0
 8007618:	d03f      	beq.n	800769a <_vfiprintf_r+0x20a>
 800761a:	4b26      	ldr	r3, [pc, #152]	@ (80076b4 <_vfiprintf_r+0x224>)
 800761c:	bb1b      	cbnz	r3, 8007666 <_vfiprintf_r+0x1d6>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	3307      	adds	r3, #7
 8007622:	f023 0307 	bic.w	r3, r3, #7
 8007626:	3308      	adds	r3, #8
 8007628:	9303      	str	r3, [sp, #12]
 800762a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762c:	443b      	add	r3, r7
 800762e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007630:	e76a      	b.n	8007508 <_vfiprintf_r+0x78>
 8007632:	fb0c 3202 	mla	r2, ip, r2, r3
 8007636:	460c      	mov	r4, r1
 8007638:	2001      	movs	r0, #1
 800763a:	e7a8      	b.n	800758e <_vfiprintf_r+0xfe>
 800763c:	2300      	movs	r3, #0
 800763e:	3401      	adds	r4, #1
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	4619      	mov	r1, r3
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	4620      	mov	r0, r4
 800764a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764e:	3a30      	subs	r2, #48	@ 0x30
 8007650:	2a09      	cmp	r2, #9
 8007652:	d903      	bls.n	800765c <_vfiprintf_r+0x1cc>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0c6      	beq.n	80075e6 <_vfiprintf_r+0x156>
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	e7c4      	b.n	80075e6 <_vfiprintf_r+0x156>
 800765c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007660:	4604      	mov	r4, r0
 8007662:	2301      	movs	r3, #1
 8007664:	e7f0      	b.n	8007648 <_vfiprintf_r+0x1b8>
 8007666:	ab03      	add	r3, sp, #12
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	462a      	mov	r2, r5
 800766c:	4b12      	ldr	r3, [pc, #72]	@ (80076b8 <_vfiprintf_r+0x228>)
 800766e:	a904      	add	r1, sp, #16
 8007670:	4630      	mov	r0, r6
 8007672:	f7fc fb7f 	bl	8003d74 <_printf_float>
 8007676:	4607      	mov	r7, r0
 8007678:	1c78      	adds	r0, r7, #1
 800767a:	d1d6      	bne.n	800762a <_vfiprintf_r+0x19a>
 800767c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800767e:	07d9      	lsls	r1, r3, #31
 8007680:	d405      	bmi.n	800768e <_vfiprintf_r+0x1fe>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	059a      	lsls	r2, r3, #22
 8007686:	d402      	bmi.n	800768e <_vfiprintf_r+0x1fe>
 8007688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768a:	f7fd faf5 	bl	8004c78 <__retarget_lock_release_recursive>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	065b      	lsls	r3, r3, #25
 8007692:	f53f af1f 	bmi.w	80074d4 <_vfiprintf_r+0x44>
 8007696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007698:	e71e      	b.n	80074d8 <_vfiprintf_r+0x48>
 800769a:	ab03      	add	r3, sp, #12
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	462a      	mov	r2, r5
 80076a0:	4b05      	ldr	r3, [pc, #20]	@ (80076b8 <_vfiprintf_r+0x228>)
 80076a2:	a904      	add	r1, sp, #16
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7fc fdfd 	bl	80042a4 <_printf_i>
 80076aa:	e7e4      	b.n	8007676 <_vfiprintf_r+0x1e6>
 80076ac:	080095b9 	.word	0x080095b9
 80076b0:	080095c3 	.word	0x080095c3
 80076b4:	08003d75 	.word	0x08003d75
 80076b8:	0800746b 	.word	0x0800746b
 80076bc:	080095bf 	.word	0x080095bf

080076c0 <__sflush_r>:
 80076c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c8:	0716      	lsls	r6, r2, #28
 80076ca:	4605      	mov	r5, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	d454      	bmi.n	800777a <__sflush_r+0xba>
 80076d0:	684b      	ldr	r3, [r1, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dc02      	bgt.n	80076dc <__sflush_r+0x1c>
 80076d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	dd48      	ble.n	800776e <__sflush_r+0xae>
 80076dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076de:	2e00      	cmp	r6, #0
 80076e0:	d045      	beq.n	800776e <__sflush_r+0xae>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076e8:	682f      	ldr	r7, [r5, #0]
 80076ea:	6a21      	ldr	r1, [r4, #32]
 80076ec:	602b      	str	r3, [r5, #0]
 80076ee:	d030      	beq.n	8007752 <__sflush_r+0x92>
 80076f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	0759      	lsls	r1, r3, #29
 80076f6:	d505      	bpl.n	8007704 <__sflush_r+0x44>
 80076f8:	6863      	ldr	r3, [r4, #4]
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076fe:	b10b      	cbz	r3, 8007704 <__sflush_r+0x44>
 8007700:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007702:	1ad2      	subs	r2, r2, r3
 8007704:	2300      	movs	r3, #0
 8007706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007708:	6a21      	ldr	r1, [r4, #32]
 800770a:	4628      	mov	r0, r5
 800770c:	47b0      	blx	r6
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	d106      	bne.n	8007722 <__sflush_r+0x62>
 8007714:	6829      	ldr	r1, [r5, #0]
 8007716:	291d      	cmp	r1, #29
 8007718:	d82b      	bhi.n	8007772 <__sflush_r+0xb2>
 800771a:	4a2a      	ldr	r2, [pc, #168]	@ (80077c4 <__sflush_r+0x104>)
 800771c:	410a      	asrs	r2, r1
 800771e:	07d6      	lsls	r6, r2, #31
 8007720:	d427      	bmi.n	8007772 <__sflush_r+0xb2>
 8007722:	2200      	movs	r2, #0
 8007724:	6062      	str	r2, [r4, #4]
 8007726:	04d9      	lsls	r1, r3, #19
 8007728:	6922      	ldr	r2, [r4, #16]
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	d504      	bpl.n	8007738 <__sflush_r+0x78>
 800772e:	1c42      	adds	r2, r0, #1
 8007730:	d101      	bne.n	8007736 <__sflush_r+0x76>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b903      	cbnz	r3, 8007738 <__sflush_r+0x78>
 8007736:	6560      	str	r0, [r4, #84]	@ 0x54
 8007738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800773a:	602f      	str	r7, [r5, #0]
 800773c:	b1b9      	cbz	r1, 800776e <__sflush_r+0xae>
 800773e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007742:	4299      	cmp	r1, r3
 8007744:	d002      	beq.n	800774c <__sflush_r+0x8c>
 8007746:	4628      	mov	r0, r5
 8007748:	f7fe f8ea 	bl	8005920 <_free_r>
 800774c:	2300      	movs	r3, #0
 800774e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007750:	e00d      	b.n	800776e <__sflush_r+0xae>
 8007752:	2301      	movs	r3, #1
 8007754:	4628      	mov	r0, r5
 8007756:	47b0      	blx	r6
 8007758:	4602      	mov	r2, r0
 800775a:	1c50      	adds	r0, r2, #1
 800775c:	d1c9      	bne.n	80076f2 <__sflush_r+0x32>
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0c6      	beq.n	80076f2 <__sflush_r+0x32>
 8007764:	2b1d      	cmp	r3, #29
 8007766:	d001      	beq.n	800776c <__sflush_r+0xac>
 8007768:	2b16      	cmp	r3, #22
 800776a:	d11e      	bne.n	80077aa <__sflush_r+0xea>
 800776c:	602f      	str	r7, [r5, #0]
 800776e:	2000      	movs	r0, #0
 8007770:	e022      	b.n	80077b8 <__sflush_r+0xf8>
 8007772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007776:	b21b      	sxth	r3, r3
 8007778:	e01b      	b.n	80077b2 <__sflush_r+0xf2>
 800777a:	690f      	ldr	r7, [r1, #16]
 800777c:	2f00      	cmp	r7, #0
 800777e:	d0f6      	beq.n	800776e <__sflush_r+0xae>
 8007780:	0793      	lsls	r3, r2, #30
 8007782:	680e      	ldr	r6, [r1, #0]
 8007784:	bf08      	it	eq
 8007786:	694b      	ldreq	r3, [r1, #20]
 8007788:	600f      	str	r7, [r1, #0]
 800778a:	bf18      	it	ne
 800778c:	2300      	movne	r3, #0
 800778e:	eba6 0807 	sub.w	r8, r6, r7
 8007792:	608b      	str	r3, [r1, #8]
 8007794:	f1b8 0f00 	cmp.w	r8, #0
 8007798:	dde9      	ble.n	800776e <__sflush_r+0xae>
 800779a:	6a21      	ldr	r1, [r4, #32]
 800779c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800779e:	4643      	mov	r3, r8
 80077a0:	463a      	mov	r2, r7
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b0      	blx	r6
 80077a6:	2800      	cmp	r0, #0
 80077a8:	dc08      	bgt.n	80077bc <__sflush_r+0xfc>
 80077aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077bc:	4407      	add	r7, r0
 80077be:	eba8 0800 	sub.w	r8, r8, r0
 80077c2:	e7e7      	b.n	8007794 <__sflush_r+0xd4>
 80077c4:	dfbffffe 	.word	0xdfbffffe

080077c8 <_fflush_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	690b      	ldr	r3, [r1, #16]
 80077cc:	4605      	mov	r5, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	b913      	cbnz	r3, 80077d8 <_fflush_r+0x10>
 80077d2:	2500      	movs	r5, #0
 80077d4:	4628      	mov	r0, r5
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	b118      	cbz	r0, 80077e2 <_fflush_r+0x1a>
 80077da:	6a03      	ldr	r3, [r0, #32]
 80077dc:	b90b      	cbnz	r3, 80077e2 <_fflush_r+0x1a>
 80077de:	f7fd f921 	bl	8004a24 <__sinit>
 80077e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0f3      	beq.n	80077d2 <_fflush_r+0xa>
 80077ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077ec:	07d0      	lsls	r0, r2, #31
 80077ee:	d404      	bmi.n	80077fa <_fflush_r+0x32>
 80077f0:	0599      	lsls	r1, r3, #22
 80077f2:	d402      	bmi.n	80077fa <_fflush_r+0x32>
 80077f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077f6:	f7fd fa3e 	bl	8004c76 <__retarget_lock_acquire_recursive>
 80077fa:	4628      	mov	r0, r5
 80077fc:	4621      	mov	r1, r4
 80077fe:	f7ff ff5f 	bl	80076c0 <__sflush_r>
 8007802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007804:	07da      	lsls	r2, r3, #31
 8007806:	4605      	mov	r5, r0
 8007808:	d4e4      	bmi.n	80077d4 <_fflush_r+0xc>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	059b      	lsls	r3, r3, #22
 800780e:	d4e1      	bmi.n	80077d4 <_fflush_r+0xc>
 8007810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007812:	f7fd fa31 	bl	8004c78 <__retarget_lock_release_recursive>
 8007816:	e7dd      	b.n	80077d4 <_fflush_r+0xc>

08007818 <__swbuf_r>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	460e      	mov	r6, r1
 800781c:	4614      	mov	r4, r2
 800781e:	4605      	mov	r5, r0
 8007820:	b118      	cbz	r0, 800782a <__swbuf_r+0x12>
 8007822:	6a03      	ldr	r3, [r0, #32]
 8007824:	b90b      	cbnz	r3, 800782a <__swbuf_r+0x12>
 8007826:	f7fd f8fd 	bl	8004a24 <__sinit>
 800782a:	69a3      	ldr	r3, [r4, #24]
 800782c:	60a3      	str	r3, [r4, #8]
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	071a      	lsls	r2, r3, #28
 8007832:	d501      	bpl.n	8007838 <__swbuf_r+0x20>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	b943      	cbnz	r3, 800784a <__swbuf_r+0x32>
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f82a 	bl	8007894 <__swsetup_r>
 8007840:	b118      	cbz	r0, 800784a <__swbuf_r+0x32>
 8007842:	f04f 37ff 	mov.w	r7, #4294967295
 8007846:	4638      	mov	r0, r7
 8007848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	6922      	ldr	r2, [r4, #16]
 800784e:	1a98      	subs	r0, r3, r2
 8007850:	6963      	ldr	r3, [r4, #20]
 8007852:	b2f6      	uxtb	r6, r6
 8007854:	4283      	cmp	r3, r0
 8007856:	4637      	mov	r7, r6
 8007858:	dc05      	bgt.n	8007866 <__swbuf_r+0x4e>
 800785a:	4621      	mov	r1, r4
 800785c:	4628      	mov	r0, r5
 800785e:	f7ff ffb3 	bl	80077c8 <_fflush_r>
 8007862:	2800      	cmp	r0, #0
 8007864:	d1ed      	bne.n	8007842 <__swbuf_r+0x2a>
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	3b01      	subs	r3, #1
 800786a:	60a3      	str	r3, [r4, #8]
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	6022      	str	r2, [r4, #0]
 8007872:	701e      	strb	r6, [r3, #0]
 8007874:	6962      	ldr	r2, [r4, #20]
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	429a      	cmp	r2, r3
 800787a:	d004      	beq.n	8007886 <__swbuf_r+0x6e>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	07db      	lsls	r3, r3, #31
 8007880:	d5e1      	bpl.n	8007846 <__swbuf_r+0x2e>
 8007882:	2e0a      	cmp	r6, #10
 8007884:	d1df      	bne.n	8007846 <__swbuf_r+0x2e>
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f7ff ff9d 	bl	80077c8 <_fflush_r>
 800788e:	2800      	cmp	r0, #0
 8007890:	d0d9      	beq.n	8007846 <__swbuf_r+0x2e>
 8007892:	e7d6      	b.n	8007842 <__swbuf_r+0x2a>

08007894 <__swsetup_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4b29      	ldr	r3, [pc, #164]	@ (800793c <__swsetup_r+0xa8>)
 8007898:	4605      	mov	r5, r0
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	460c      	mov	r4, r1
 800789e:	b118      	cbz	r0, 80078a8 <__swsetup_r+0x14>
 80078a0:	6a03      	ldr	r3, [r0, #32]
 80078a2:	b90b      	cbnz	r3, 80078a8 <__swsetup_r+0x14>
 80078a4:	f7fd f8be 	bl	8004a24 <__sinit>
 80078a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ac:	0719      	lsls	r1, r3, #28
 80078ae:	d422      	bmi.n	80078f6 <__swsetup_r+0x62>
 80078b0:	06da      	lsls	r2, r3, #27
 80078b2:	d407      	bmi.n	80078c4 <__swsetup_r+0x30>
 80078b4:	2209      	movs	r2, #9
 80078b6:	602a      	str	r2, [r5, #0]
 80078b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	e033      	b.n	800792c <__swsetup_r+0x98>
 80078c4:	0758      	lsls	r0, r3, #29
 80078c6:	d512      	bpl.n	80078ee <__swsetup_r+0x5a>
 80078c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ca:	b141      	cbz	r1, 80078de <__swsetup_r+0x4a>
 80078cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078d0:	4299      	cmp	r1, r3
 80078d2:	d002      	beq.n	80078da <__swsetup_r+0x46>
 80078d4:	4628      	mov	r0, r5
 80078d6:	f7fe f823 	bl	8005920 <_free_r>
 80078da:	2300      	movs	r3, #0
 80078dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	2300      	movs	r3, #0
 80078e8:	6063      	str	r3, [r4, #4]
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f043 0308 	orr.w	r3, r3, #8
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	b94b      	cbnz	r3, 800790e <__swsetup_r+0x7a>
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007904:	d003      	beq.n	800790e <__swsetup_r+0x7a>
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 fc5d 	bl	80081c8 <__smakebuf_r>
 800790e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007912:	f013 0201 	ands.w	r2, r3, #1
 8007916:	d00a      	beq.n	800792e <__swsetup_r+0x9a>
 8007918:	2200      	movs	r2, #0
 800791a:	60a2      	str	r2, [r4, #8]
 800791c:	6962      	ldr	r2, [r4, #20]
 800791e:	4252      	negs	r2, r2
 8007920:	61a2      	str	r2, [r4, #24]
 8007922:	6922      	ldr	r2, [r4, #16]
 8007924:	b942      	cbnz	r2, 8007938 <__swsetup_r+0xa4>
 8007926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800792a:	d1c5      	bne.n	80078b8 <__swsetup_r+0x24>
 800792c:	bd38      	pop	{r3, r4, r5, pc}
 800792e:	0799      	lsls	r1, r3, #30
 8007930:	bf58      	it	pl
 8007932:	6962      	ldrpl	r2, [r4, #20]
 8007934:	60a2      	str	r2, [r4, #8]
 8007936:	e7f4      	b.n	8007922 <__swsetup_r+0x8e>
 8007938:	2000      	movs	r0, #0
 800793a:	e7f7      	b.n	800792c <__swsetup_r+0x98>
 800793c:	20000018 	.word	0x20000018

08007940 <memmove>:
 8007940:	4288      	cmp	r0, r1
 8007942:	b510      	push	{r4, lr}
 8007944:	eb01 0402 	add.w	r4, r1, r2
 8007948:	d902      	bls.n	8007950 <memmove+0x10>
 800794a:	4284      	cmp	r4, r0
 800794c:	4623      	mov	r3, r4
 800794e:	d807      	bhi.n	8007960 <memmove+0x20>
 8007950:	1e43      	subs	r3, r0, #1
 8007952:	42a1      	cmp	r1, r4
 8007954:	d008      	beq.n	8007968 <memmove+0x28>
 8007956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800795a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800795e:	e7f8      	b.n	8007952 <memmove+0x12>
 8007960:	4402      	add	r2, r0
 8007962:	4601      	mov	r1, r0
 8007964:	428a      	cmp	r2, r1
 8007966:	d100      	bne.n	800796a <memmove+0x2a>
 8007968:	bd10      	pop	{r4, pc}
 800796a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007972:	e7f7      	b.n	8007964 <memmove+0x24>

08007974 <strncmp>:
 8007974:	b510      	push	{r4, lr}
 8007976:	b16a      	cbz	r2, 8007994 <strncmp+0x20>
 8007978:	3901      	subs	r1, #1
 800797a:	1884      	adds	r4, r0, r2
 800797c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007980:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007984:	429a      	cmp	r2, r3
 8007986:	d103      	bne.n	8007990 <strncmp+0x1c>
 8007988:	42a0      	cmp	r0, r4
 800798a:	d001      	beq.n	8007990 <strncmp+0x1c>
 800798c:	2a00      	cmp	r2, #0
 800798e:	d1f5      	bne.n	800797c <strncmp+0x8>
 8007990:	1ad0      	subs	r0, r2, r3
 8007992:	bd10      	pop	{r4, pc}
 8007994:	4610      	mov	r0, r2
 8007996:	e7fc      	b.n	8007992 <strncmp+0x1e>

08007998 <_sbrk_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d06      	ldr	r5, [pc, #24]	@ (80079b4 <_sbrk_r+0x1c>)
 800799c:	2300      	movs	r3, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	602b      	str	r3, [r5, #0]
 80079a4:	f7f9 ffdc 	bl	8001960 <_sbrk>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_sbrk_r+0x1a>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_sbrk_r+0x1a>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	200003bc 	.word	0x200003bc

080079b8 <memcpy>:
 80079b8:	440a      	add	r2, r1
 80079ba:	4291      	cmp	r1, r2
 80079bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80079c0:	d100      	bne.n	80079c4 <memcpy+0xc>
 80079c2:	4770      	bx	lr
 80079c4:	b510      	push	{r4, lr}
 80079c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ce:	4291      	cmp	r1, r2
 80079d0:	d1f9      	bne.n	80079c6 <memcpy+0xe>
 80079d2:	bd10      	pop	{r4, pc}
 80079d4:	0000      	movs	r0, r0
	...

080079d8 <nan>:
 80079d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80079e0 <nan+0x8>
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	00000000 	.word	0x00000000
 80079e4:	7ff80000 	.word	0x7ff80000

080079e8 <__assert_func>:
 80079e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ea:	4614      	mov	r4, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <__assert_func+0x2c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4605      	mov	r5, r0
 80079f4:	68d8      	ldr	r0, [r3, #12]
 80079f6:	b954      	cbnz	r4, 8007a0e <__assert_func+0x26>
 80079f8:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <__assert_func+0x30>)
 80079fa:	461c      	mov	r4, r3
 80079fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a00:	9100      	str	r1, [sp, #0]
 8007a02:	462b      	mov	r3, r5
 8007a04:	4905      	ldr	r1, [pc, #20]	@ (8007a1c <__assert_func+0x34>)
 8007a06:	f000 fba7 	bl	8008158 <fiprintf>
 8007a0a:	f000 fc3b 	bl	8008284 <abort>
 8007a0e:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <__assert_func+0x38>)
 8007a10:	e7f4      	b.n	80079fc <__assert_func+0x14>
 8007a12:	bf00      	nop
 8007a14:	20000018 	.word	0x20000018
 8007a18:	0800960d 	.word	0x0800960d
 8007a1c:	080095df 	.word	0x080095df
 8007a20:	080095d2 	.word	0x080095d2

08007a24 <_calloc_r>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	fba1 5402 	umull	r5, r4, r1, r2
 8007a2a:	b93c      	cbnz	r4, 8007a3c <_calloc_r+0x18>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7fd ffeb 	bl	8005a08 <_malloc_r>
 8007a32:	4606      	mov	r6, r0
 8007a34:	b928      	cbnz	r0, 8007a42 <_calloc_r+0x1e>
 8007a36:	2600      	movs	r6, #0
 8007a38:	4630      	mov	r0, r6
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	220c      	movs	r2, #12
 8007a3e:	6002      	str	r2, [r0, #0]
 8007a40:	e7f9      	b.n	8007a36 <_calloc_r+0x12>
 8007a42:	462a      	mov	r2, r5
 8007a44:	4621      	mov	r1, r4
 8007a46:	f7fd f898 	bl	8004b7a <memset>
 8007a4a:	e7f5      	b.n	8007a38 <_calloc_r+0x14>

08007a4c <rshift>:
 8007a4c:	6903      	ldr	r3, [r0, #16]
 8007a4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a5a:	f100 0414 	add.w	r4, r0, #20
 8007a5e:	dd45      	ble.n	8007aec <rshift+0xa0>
 8007a60:	f011 011f 	ands.w	r1, r1, #31
 8007a64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a6c:	d10c      	bne.n	8007a88 <rshift+0x3c>
 8007a6e:	f100 0710 	add.w	r7, r0, #16
 8007a72:	4629      	mov	r1, r5
 8007a74:	42b1      	cmp	r1, r6
 8007a76:	d334      	bcc.n	8007ae2 <rshift+0x96>
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	1eea      	subs	r2, r5, #3
 8007a7e:	4296      	cmp	r6, r2
 8007a80:	bf38      	it	cc
 8007a82:	2300      	movcc	r3, #0
 8007a84:	4423      	add	r3, r4
 8007a86:	e015      	b.n	8007ab4 <rshift+0x68>
 8007a88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a8c:	f1c1 0820 	rsb	r8, r1, #32
 8007a90:	40cf      	lsrs	r7, r1
 8007a92:	f105 0e04 	add.w	lr, r5, #4
 8007a96:	46a1      	mov	r9, r4
 8007a98:	4576      	cmp	r6, lr
 8007a9a:	46f4      	mov	ip, lr
 8007a9c:	d815      	bhi.n	8007aca <rshift+0x7e>
 8007a9e:	1a9a      	subs	r2, r3, r2
 8007aa0:	0092      	lsls	r2, r2, #2
 8007aa2:	3a04      	subs	r2, #4
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	42ae      	cmp	r6, r5
 8007aa8:	bf38      	it	cc
 8007aaa:	2200      	movcc	r2, #0
 8007aac:	18a3      	adds	r3, r4, r2
 8007aae:	50a7      	str	r7, [r4, r2]
 8007ab0:	b107      	cbz	r7, 8007ab4 <rshift+0x68>
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	1b1a      	subs	r2, r3, r4
 8007ab6:	42a3      	cmp	r3, r4
 8007ab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007abc:	bf08      	it	eq
 8007abe:	2300      	moveq	r3, #0
 8007ac0:	6102      	str	r2, [r0, #16]
 8007ac2:	bf08      	it	eq
 8007ac4:	6143      	streq	r3, [r0, #20]
 8007ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aca:	f8dc c000 	ldr.w	ip, [ip]
 8007ace:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ad2:	ea4c 0707 	orr.w	r7, ip, r7
 8007ad6:	f849 7b04 	str.w	r7, [r9], #4
 8007ada:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ade:	40cf      	lsrs	r7, r1
 8007ae0:	e7da      	b.n	8007a98 <rshift+0x4c>
 8007ae2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ae6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007aea:	e7c3      	b.n	8007a74 <rshift+0x28>
 8007aec:	4623      	mov	r3, r4
 8007aee:	e7e1      	b.n	8007ab4 <rshift+0x68>

08007af0 <__hexdig_fun>:
 8007af0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	d802      	bhi.n	8007afe <__hexdig_fun+0xe>
 8007af8:	3820      	subs	r0, #32
 8007afa:	b2c0      	uxtb	r0, r0
 8007afc:	4770      	bx	lr
 8007afe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	d801      	bhi.n	8007b0a <__hexdig_fun+0x1a>
 8007b06:	3847      	subs	r0, #71	@ 0x47
 8007b08:	e7f7      	b.n	8007afa <__hexdig_fun+0xa>
 8007b0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d801      	bhi.n	8007b16 <__hexdig_fun+0x26>
 8007b12:	3827      	subs	r0, #39	@ 0x27
 8007b14:	e7f1      	b.n	8007afa <__hexdig_fun+0xa>
 8007b16:	2000      	movs	r0, #0
 8007b18:	4770      	bx	lr
	...

08007b1c <__gethex>:
 8007b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	b085      	sub	sp, #20
 8007b22:	468a      	mov	sl, r1
 8007b24:	9302      	str	r3, [sp, #8]
 8007b26:	680b      	ldr	r3, [r1, #0]
 8007b28:	9001      	str	r0, [sp, #4]
 8007b2a:	4690      	mov	r8, r2
 8007b2c:	1c9c      	adds	r4, r3, #2
 8007b2e:	46a1      	mov	r9, r4
 8007b30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b34:	2830      	cmp	r0, #48	@ 0x30
 8007b36:	d0fa      	beq.n	8007b2e <__gethex+0x12>
 8007b38:	eba9 0303 	sub.w	r3, r9, r3
 8007b3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007b40:	f7ff ffd6 	bl	8007af0 <__hexdig_fun>
 8007b44:	4605      	mov	r5, r0
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d168      	bne.n	8007c1c <__gethex+0x100>
 8007b4a:	49a0      	ldr	r1, [pc, #640]	@ (8007dcc <__gethex+0x2b0>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	4648      	mov	r0, r9
 8007b50:	f7ff ff10 	bl	8007974 <strncmp>
 8007b54:	4607      	mov	r7, r0
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d167      	bne.n	8007c2a <__gethex+0x10e>
 8007b5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007b5e:	4626      	mov	r6, r4
 8007b60:	f7ff ffc6 	bl	8007af0 <__hexdig_fun>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d062      	beq.n	8007c2e <__gethex+0x112>
 8007b68:	4623      	mov	r3, r4
 8007b6a:	7818      	ldrb	r0, [r3, #0]
 8007b6c:	2830      	cmp	r0, #48	@ 0x30
 8007b6e:	4699      	mov	r9, r3
 8007b70:	f103 0301 	add.w	r3, r3, #1
 8007b74:	d0f9      	beq.n	8007b6a <__gethex+0x4e>
 8007b76:	f7ff ffbb 	bl	8007af0 <__hexdig_fun>
 8007b7a:	fab0 f580 	clz	r5, r0
 8007b7e:	096d      	lsrs	r5, r5, #5
 8007b80:	f04f 0b01 	mov.w	fp, #1
 8007b84:	464a      	mov	r2, r9
 8007b86:	4616      	mov	r6, r2
 8007b88:	3201      	adds	r2, #1
 8007b8a:	7830      	ldrb	r0, [r6, #0]
 8007b8c:	f7ff ffb0 	bl	8007af0 <__hexdig_fun>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d1f8      	bne.n	8007b86 <__gethex+0x6a>
 8007b94:	498d      	ldr	r1, [pc, #564]	@ (8007dcc <__gethex+0x2b0>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff feeb 	bl	8007974 <strncmp>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d13f      	bne.n	8007c22 <__gethex+0x106>
 8007ba2:	b944      	cbnz	r4, 8007bb6 <__gethex+0x9a>
 8007ba4:	1c74      	adds	r4, r6, #1
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	4616      	mov	r6, r2
 8007baa:	3201      	adds	r2, #1
 8007bac:	7830      	ldrb	r0, [r6, #0]
 8007bae:	f7ff ff9f 	bl	8007af0 <__hexdig_fun>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d1f8      	bne.n	8007ba8 <__gethex+0x8c>
 8007bb6:	1ba4      	subs	r4, r4, r6
 8007bb8:	00a7      	lsls	r7, r4, #2
 8007bba:	7833      	ldrb	r3, [r6, #0]
 8007bbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007bc0:	2b50      	cmp	r3, #80	@ 0x50
 8007bc2:	d13e      	bne.n	8007c42 <__gethex+0x126>
 8007bc4:	7873      	ldrb	r3, [r6, #1]
 8007bc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007bc8:	d033      	beq.n	8007c32 <__gethex+0x116>
 8007bca:	2b2d      	cmp	r3, #45	@ 0x2d
 8007bcc:	d034      	beq.n	8007c38 <__gethex+0x11c>
 8007bce:	1c71      	adds	r1, r6, #1
 8007bd0:	2400      	movs	r4, #0
 8007bd2:	7808      	ldrb	r0, [r1, #0]
 8007bd4:	f7ff ff8c 	bl	8007af0 <__hexdig_fun>
 8007bd8:	1e43      	subs	r3, r0, #1
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b18      	cmp	r3, #24
 8007bde:	d830      	bhi.n	8007c42 <__gethex+0x126>
 8007be0:	f1a0 0210 	sub.w	r2, r0, #16
 8007be4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007be8:	f7ff ff82 	bl	8007af0 <__hexdig_fun>
 8007bec:	f100 3cff 	add.w	ip, r0, #4294967295
 8007bf0:	fa5f fc8c 	uxtb.w	ip, ip
 8007bf4:	f1bc 0f18 	cmp.w	ip, #24
 8007bf8:	f04f 030a 	mov.w	r3, #10
 8007bfc:	d91e      	bls.n	8007c3c <__gethex+0x120>
 8007bfe:	b104      	cbz	r4, 8007c02 <__gethex+0xe6>
 8007c00:	4252      	negs	r2, r2
 8007c02:	4417      	add	r7, r2
 8007c04:	f8ca 1000 	str.w	r1, [sl]
 8007c08:	b1ed      	cbz	r5, 8007c46 <__gethex+0x12a>
 8007c0a:	f1bb 0f00 	cmp.w	fp, #0
 8007c0e:	bf0c      	ite	eq
 8007c10:	2506      	moveq	r5, #6
 8007c12:	2500      	movne	r5, #0
 8007c14:	4628      	mov	r0, r5
 8007c16:	b005      	add	sp, #20
 8007c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	462c      	mov	r4, r5
 8007c20:	e7b0      	b.n	8007b84 <__gethex+0x68>
 8007c22:	2c00      	cmp	r4, #0
 8007c24:	d1c7      	bne.n	8007bb6 <__gethex+0x9a>
 8007c26:	4627      	mov	r7, r4
 8007c28:	e7c7      	b.n	8007bba <__gethex+0x9e>
 8007c2a:	464e      	mov	r6, r9
 8007c2c:	462f      	mov	r7, r5
 8007c2e:	2501      	movs	r5, #1
 8007c30:	e7c3      	b.n	8007bba <__gethex+0x9e>
 8007c32:	2400      	movs	r4, #0
 8007c34:	1cb1      	adds	r1, r6, #2
 8007c36:	e7cc      	b.n	8007bd2 <__gethex+0xb6>
 8007c38:	2401      	movs	r4, #1
 8007c3a:	e7fb      	b.n	8007c34 <__gethex+0x118>
 8007c3c:	fb03 0002 	mla	r0, r3, r2, r0
 8007c40:	e7ce      	b.n	8007be0 <__gethex+0xc4>
 8007c42:	4631      	mov	r1, r6
 8007c44:	e7de      	b.n	8007c04 <__gethex+0xe8>
 8007c46:	eba6 0309 	sub.w	r3, r6, r9
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	2b07      	cmp	r3, #7
 8007c50:	dc0a      	bgt.n	8007c68 <__gethex+0x14c>
 8007c52:	9801      	ldr	r0, [sp, #4]
 8007c54:	f7fd ff64 	bl	8005b20 <_Balloc>
 8007c58:	4604      	mov	r4, r0
 8007c5a:	b940      	cbnz	r0, 8007c6e <__gethex+0x152>
 8007c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8007dd0 <__gethex+0x2b4>)
 8007c5e:	4602      	mov	r2, r0
 8007c60:	21e4      	movs	r1, #228	@ 0xe4
 8007c62:	485c      	ldr	r0, [pc, #368]	@ (8007dd4 <__gethex+0x2b8>)
 8007c64:	f7ff fec0 	bl	80079e8 <__assert_func>
 8007c68:	3101      	adds	r1, #1
 8007c6a:	105b      	asrs	r3, r3, #1
 8007c6c:	e7ef      	b.n	8007c4e <__gethex+0x132>
 8007c6e:	f100 0a14 	add.w	sl, r0, #20
 8007c72:	2300      	movs	r3, #0
 8007c74:	4655      	mov	r5, sl
 8007c76:	469b      	mov	fp, r3
 8007c78:	45b1      	cmp	r9, r6
 8007c7a:	d337      	bcc.n	8007cec <__gethex+0x1d0>
 8007c7c:	f845 bb04 	str.w	fp, [r5], #4
 8007c80:	eba5 050a 	sub.w	r5, r5, sl
 8007c84:	10ad      	asrs	r5, r5, #2
 8007c86:	6125      	str	r5, [r4, #16]
 8007c88:	4658      	mov	r0, fp
 8007c8a:	f7fe f83b 	bl	8005d04 <__hi0bits>
 8007c8e:	016d      	lsls	r5, r5, #5
 8007c90:	f8d8 6000 	ldr.w	r6, [r8]
 8007c94:	1a2d      	subs	r5, r5, r0
 8007c96:	42b5      	cmp	r5, r6
 8007c98:	dd54      	ble.n	8007d44 <__gethex+0x228>
 8007c9a:	1bad      	subs	r5, r5, r6
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7fe fbcf 	bl	8006442 <__any_on>
 8007ca4:	4681      	mov	r9, r0
 8007ca6:	b178      	cbz	r0, 8007cc8 <__gethex+0x1ac>
 8007ca8:	1e6b      	subs	r3, r5, #1
 8007caa:	1159      	asrs	r1, r3, #5
 8007cac:	f003 021f 	and.w	r2, r3, #31
 8007cb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007cb4:	f04f 0901 	mov.w	r9, #1
 8007cb8:	fa09 f202 	lsl.w	r2, r9, r2
 8007cbc:	420a      	tst	r2, r1
 8007cbe:	d003      	beq.n	8007cc8 <__gethex+0x1ac>
 8007cc0:	454b      	cmp	r3, r9
 8007cc2:	dc36      	bgt.n	8007d32 <__gethex+0x216>
 8007cc4:	f04f 0902 	mov.w	r9, #2
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f7ff febe 	bl	8007a4c <rshift>
 8007cd0:	442f      	add	r7, r5
 8007cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cd6:	42bb      	cmp	r3, r7
 8007cd8:	da42      	bge.n	8007d60 <__gethex+0x244>
 8007cda:	9801      	ldr	r0, [sp, #4]
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f7fd ff5f 	bl	8005ba0 <_Bfree>
 8007ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	25a3      	movs	r5, #163	@ 0xa3
 8007cea:	e793      	b.n	8007c14 <__gethex+0xf8>
 8007cec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007cf0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007cf2:	d012      	beq.n	8007d1a <__gethex+0x1fe>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d104      	bne.n	8007d02 <__gethex+0x1e6>
 8007cf8:	f845 bb04 	str.w	fp, [r5], #4
 8007cfc:	f04f 0b00 	mov.w	fp, #0
 8007d00:	465b      	mov	r3, fp
 8007d02:	7830      	ldrb	r0, [r6, #0]
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	f7ff fef3 	bl	8007af0 <__hexdig_fun>
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	f000 000f 	and.w	r0, r0, #15
 8007d10:	4098      	lsls	r0, r3
 8007d12:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d16:	3304      	adds	r3, #4
 8007d18:	e7ae      	b.n	8007c78 <__gethex+0x15c>
 8007d1a:	45b1      	cmp	r9, r6
 8007d1c:	d8ea      	bhi.n	8007cf4 <__gethex+0x1d8>
 8007d1e:	492b      	ldr	r1, [pc, #172]	@ (8007dcc <__gethex+0x2b0>)
 8007d20:	9303      	str	r3, [sp, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7ff fe25 	bl	8007974 <strncmp>
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1e1      	bne.n	8007cf4 <__gethex+0x1d8>
 8007d30:	e7a2      	b.n	8007c78 <__gethex+0x15c>
 8007d32:	1ea9      	subs	r1, r5, #2
 8007d34:	4620      	mov	r0, r4
 8007d36:	f7fe fb84 	bl	8006442 <__any_on>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d0c2      	beq.n	8007cc4 <__gethex+0x1a8>
 8007d3e:	f04f 0903 	mov.w	r9, #3
 8007d42:	e7c1      	b.n	8007cc8 <__gethex+0x1ac>
 8007d44:	da09      	bge.n	8007d5a <__gethex+0x23e>
 8007d46:	1b75      	subs	r5, r6, r5
 8007d48:	4621      	mov	r1, r4
 8007d4a:	9801      	ldr	r0, [sp, #4]
 8007d4c:	462a      	mov	r2, r5
 8007d4e:	f7fe f93f 	bl	8005fd0 <__lshift>
 8007d52:	1b7f      	subs	r7, r7, r5
 8007d54:	4604      	mov	r4, r0
 8007d56:	f100 0a14 	add.w	sl, r0, #20
 8007d5a:	f04f 0900 	mov.w	r9, #0
 8007d5e:	e7b8      	b.n	8007cd2 <__gethex+0x1b6>
 8007d60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d64:	42bd      	cmp	r5, r7
 8007d66:	dd6f      	ble.n	8007e48 <__gethex+0x32c>
 8007d68:	1bed      	subs	r5, r5, r7
 8007d6a:	42ae      	cmp	r6, r5
 8007d6c:	dc34      	bgt.n	8007dd8 <__gethex+0x2bc>
 8007d6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d022      	beq.n	8007dbc <__gethex+0x2a0>
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d024      	beq.n	8007dc4 <__gethex+0x2a8>
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d115      	bne.n	8007daa <__gethex+0x28e>
 8007d7e:	42ae      	cmp	r6, r5
 8007d80:	d113      	bne.n	8007daa <__gethex+0x28e>
 8007d82:	2e01      	cmp	r6, #1
 8007d84:	d10b      	bne.n	8007d9e <__gethex+0x282>
 8007d86:	9a02      	ldr	r2, [sp, #8]
 8007d88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	6123      	str	r3, [r4, #16]
 8007d92:	f8ca 3000 	str.w	r3, [sl]
 8007d96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d98:	2562      	movs	r5, #98	@ 0x62
 8007d9a:	601c      	str	r4, [r3, #0]
 8007d9c:	e73a      	b.n	8007c14 <__gethex+0xf8>
 8007d9e:	1e71      	subs	r1, r6, #1
 8007da0:	4620      	mov	r0, r4
 8007da2:	f7fe fb4e 	bl	8006442 <__any_on>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d1ed      	bne.n	8007d86 <__gethex+0x26a>
 8007daa:	9801      	ldr	r0, [sp, #4]
 8007dac:	4621      	mov	r1, r4
 8007dae:	f7fd fef7 	bl	8005ba0 <_Bfree>
 8007db2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007db4:	2300      	movs	r3, #0
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	2550      	movs	r5, #80	@ 0x50
 8007dba:	e72b      	b.n	8007c14 <__gethex+0xf8>
 8007dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1f3      	bne.n	8007daa <__gethex+0x28e>
 8007dc2:	e7e0      	b.n	8007d86 <__gethex+0x26a>
 8007dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1dd      	bne.n	8007d86 <__gethex+0x26a>
 8007dca:	e7ee      	b.n	8007daa <__gethex+0x28e>
 8007dcc:	08009460 	.word	0x08009460
 8007dd0:	080092f5 	.word	0x080092f5
 8007dd4:	0800960e 	.word	0x0800960e
 8007dd8:	1e6f      	subs	r7, r5, #1
 8007dda:	f1b9 0f00 	cmp.w	r9, #0
 8007dde:	d130      	bne.n	8007e42 <__gethex+0x326>
 8007de0:	b127      	cbz	r7, 8007dec <__gethex+0x2d0>
 8007de2:	4639      	mov	r1, r7
 8007de4:	4620      	mov	r0, r4
 8007de6:	f7fe fb2c 	bl	8006442 <__any_on>
 8007dea:	4681      	mov	r9, r0
 8007dec:	117a      	asrs	r2, r7, #5
 8007dee:	2301      	movs	r3, #1
 8007df0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007df4:	f007 071f 	and.w	r7, r7, #31
 8007df8:	40bb      	lsls	r3, r7
 8007dfa:	4213      	tst	r3, r2
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	bf18      	it	ne
 8007e02:	f049 0902 	orrne.w	r9, r9, #2
 8007e06:	f7ff fe21 	bl	8007a4c <rshift>
 8007e0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e0e:	1b76      	subs	r6, r6, r5
 8007e10:	2502      	movs	r5, #2
 8007e12:	f1b9 0f00 	cmp.w	r9, #0
 8007e16:	d047      	beq.n	8007ea8 <__gethex+0x38c>
 8007e18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d015      	beq.n	8007e4c <__gethex+0x330>
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d017      	beq.n	8007e54 <__gethex+0x338>
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d109      	bne.n	8007e3c <__gethex+0x320>
 8007e28:	f019 0f02 	tst.w	r9, #2
 8007e2c:	d006      	beq.n	8007e3c <__gethex+0x320>
 8007e2e:	f8da 3000 	ldr.w	r3, [sl]
 8007e32:	ea49 0903 	orr.w	r9, r9, r3
 8007e36:	f019 0f01 	tst.w	r9, #1
 8007e3a:	d10e      	bne.n	8007e5a <__gethex+0x33e>
 8007e3c:	f045 0510 	orr.w	r5, r5, #16
 8007e40:	e032      	b.n	8007ea8 <__gethex+0x38c>
 8007e42:	f04f 0901 	mov.w	r9, #1
 8007e46:	e7d1      	b.n	8007dec <__gethex+0x2d0>
 8007e48:	2501      	movs	r5, #1
 8007e4a:	e7e2      	b.n	8007e12 <__gethex+0x2f6>
 8007e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e4e:	f1c3 0301 	rsb	r3, r3, #1
 8007e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <__gethex+0x320>
 8007e5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e5e:	f104 0314 	add.w	r3, r4, #20
 8007e62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e6a:	f04f 0c00 	mov.w	ip, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e78:	d01b      	beq.n	8007eb2 <__gethex+0x396>
 8007e7a:	3201      	adds	r2, #1
 8007e7c:	6002      	str	r2, [r0, #0]
 8007e7e:	2d02      	cmp	r5, #2
 8007e80:	f104 0314 	add.w	r3, r4, #20
 8007e84:	d13c      	bne.n	8007f00 <__gethex+0x3e4>
 8007e86:	f8d8 2000 	ldr.w	r2, [r8]
 8007e8a:	3a01      	subs	r2, #1
 8007e8c:	42b2      	cmp	r2, r6
 8007e8e:	d109      	bne.n	8007ea4 <__gethex+0x388>
 8007e90:	1171      	asrs	r1, r6, #5
 8007e92:	2201      	movs	r2, #1
 8007e94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e98:	f006 061f 	and.w	r6, r6, #31
 8007e9c:	fa02 f606 	lsl.w	r6, r2, r6
 8007ea0:	421e      	tst	r6, r3
 8007ea2:	d13a      	bne.n	8007f1a <__gethex+0x3fe>
 8007ea4:	f045 0520 	orr.w	r5, r5, #32
 8007ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eaa:	601c      	str	r4, [r3, #0]
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	601f      	str	r7, [r3, #0]
 8007eb0:	e6b0      	b.n	8007c14 <__gethex+0xf8>
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8007eb8:	d8d9      	bhi.n	8007e6e <__gethex+0x352>
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	459b      	cmp	fp, r3
 8007ebe:	db17      	blt.n	8007ef0 <__gethex+0x3d4>
 8007ec0:	6861      	ldr	r1, [r4, #4]
 8007ec2:	9801      	ldr	r0, [sp, #4]
 8007ec4:	3101      	adds	r1, #1
 8007ec6:	f7fd fe2b 	bl	8005b20 <_Balloc>
 8007eca:	4681      	mov	r9, r0
 8007ecc:	b918      	cbnz	r0, 8007ed6 <__gethex+0x3ba>
 8007ece:	4b1a      	ldr	r3, [pc, #104]	@ (8007f38 <__gethex+0x41c>)
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	2184      	movs	r1, #132	@ 0x84
 8007ed4:	e6c5      	b.n	8007c62 <__gethex+0x146>
 8007ed6:	6922      	ldr	r2, [r4, #16]
 8007ed8:	3202      	adds	r2, #2
 8007eda:	f104 010c 	add.w	r1, r4, #12
 8007ede:	0092      	lsls	r2, r2, #2
 8007ee0:	300c      	adds	r0, #12
 8007ee2:	f7ff fd69 	bl	80079b8 <memcpy>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	9801      	ldr	r0, [sp, #4]
 8007eea:	f7fd fe59 	bl	8005ba0 <_Bfree>
 8007eee:	464c      	mov	r4, r9
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ef8:	6122      	str	r2, [r4, #16]
 8007efa:	2201      	movs	r2, #1
 8007efc:	615a      	str	r2, [r3, #20]
 8007efe:	e7be      	b.n	8007e7e <__gethex+0x362>
 8007f00:	6922      	ldr	r2, [r4, #16]
 8007f02:	455a      	cmp	r2, fp
 8007f04:	dd0b      	ble.n	8007f1e <__gethex+0x402>
 8007f06:	2101      	movs	r1, #1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f7ff fd9f 	bl	8007a4c <rshift>
 8007f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f12:	3701      	adds	r7, #1
 8007f14:	42bb      	cmp	r3, r7
 8007f16:	f6ff aee0 	blt.w	8007cda <__gethex+0x1be>
 8007f1a:	2501      	movs	r5, #1
 8007f1c:	e7c2      	b.n	8007ea4 <__gethex+0x388>
 8007f1e:	f016 061f 	ands.w	r6, r6, #31
 8007f22:	d0fa      	beq.n	8007f1a <__gethex+0x3fe>
 8007f24:	4453      	add	r3, sl
 8007f26:	f1c6 0620 	rsb	r6, r6, #32
 8007f2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007f2e:	f7fd fee9 	bl	8005d04 <__hi0bits>
 8007f32:	42b0      	cmp	r0, r6
 8007f34:	dbe7      	blt.n	8007f06 <__gethex+0x3ea>
 8007f36:	e7f0      	b.n	8007f1a <__gethex+0x3fe>
 8007f38:	080092f5 	.word	0x080092f5

08007f3c <L_shift>:
 8007f3c:	f1c2 0208 	rsb	r2, r2, #8
 8007f40:	0092      	lsls	r2, r2, #2
 8007f42:	b570      	push	{r4, r5, r6, lr}
 8007f44:	f1c2 0620 	rsb	r6, r2, #32
 8007f48:	6843      	ldr	r3, [r0, #4]
 8007f4a:	6804      	ldr	r4, [r0, #0]
 8007f4c:	fa03 f506 	lsl.w	r5, r3, r6
 8007f50:	432c      	orrs	r4, r5
 8007f52:	40d3      	lsrs	r3, r2
 8007f54:	6004      	str	r4, [r0, #0]
 8007f56:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f5a:	4288      	cmp	r0, r1
 8007f5c:	d3f4      	bcc.n	8007f48 <L_shift+0xc>
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}

08007f60 <__match>:
 8007f60:	b530      	push	{r4, r5, lr}
 8007f62:	6803      	ldr	r3, [r0, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f6a:	b914      	cbnz	r4, 8007f72 <__match+0x12>
 8007f6c:	6003      	str	r3, [r0, #0]
 8007f6e:	2001      	movs	r0, #1
 8007f70:	bd30      	pop	{r4, r5, pc}
 8007f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007f7a:	2d19      	cmp	r5, #25
 8007f7c:	bf98      	it	ls
 8007f7e:	3220      	addls	r2, #32
 8007f80:	42a2      	cmp	r2, r4
 8007f82:	d0f0      	beq.n	8007f66 <__match+0x6>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7f3      	b.n	8007f70 <__match+0x10>

08007f88 <__hexnan>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	680b      	ldr	r3, [r1, #0]
 8007f8e:	6801      	ldr	r1, [r0, #0]
 8007f90:	115e      	asrs	r6, r3, #5
 8007f92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f96:	f013 031f 	ands.w	r3, r3, #31
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	bf18      	it	ne
 8007f9e:	3604      	addne	r6, #4
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	1f37      	subs	r7, r6, #4
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	4690      	mov	r8, r2
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fae:	46b9      	mov	r9, r7
 8007fb0:	463c      	mov	r4, r7
 8007fb2:	9502      	str	r5, [sp, #8]
 8007fb4:	46ab      	mov	fp, r5
 8007fb6:	784a      	ldrb	r2, [r1, #1]
 8007fb8:	1c4b      	adds	r3, r1, #1
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	b342      	cbz	r2, 8008010 <__hexnan+0x88>
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	9105      	str	r1, [sp, #20]
 8007fc2:	9204      	str	r2, [sp, #16]
 8007fc4:	f7ff fd94 	bl	8007af0 <__hexdig_fun>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d151      	bne.n	8008070 <__hexnan+0xe8>
 8007fcc:	9a04      	ldr	r2, [sp, #16]
 8007fce:	9905      	ldr	r1, [sp, #20]
 8007fd0:	2a20      	cmp	r2, #32
 8007fd2:	d818      	bhi.n	8008006 <__hexnan+0x7e>
 8007fd4:	9b02      	ldr	r3, [sp, #8]
 8007fd6:	459b      	cmp	fp, r3
 8007fd8:	dd13      	ble.n	8008002 <__hexnan+0x7a>
 8007fda:	454c      	cmp	r4, r9
 8007fdc:	d206      	bcs.n	8007fec <__hexnan+0x64>
 8007fde:	2d07      	cmp	r5, #7
 8007fe0:	dc04      	bgt.n	8007fec <__hexnan+0x64>
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff ffa8 	bl	8007f3c <L_shift>
 8007fec:	4544      	cmp	r4, r8
 8007fee:	d952      	bls.n	8008096 <__hexnan+0x10e>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f1a4 0904 	sub.w	r9, r4, #4
 8007ff6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ffa:	f8cd b008 	str.w	fp, [sp, #8]
 8007ffe:	464c      	mov	r4, r9
 8008000:	461d      	mov	r5, r3
 8008002:	9903      	ldr	r1, [sp, #12]
 8008004:	e7d7      	b.n	8007fb6 <__hexnan+0x2e>
 8008006:	2a29      	cmp	r2, #41	@ 0x29
 8008008:	d157      	bne.n	80080ba <__hexnan+0x132>
 800800a:	3102      	adds	r1, #2
 800800c:	f8ca 1000 	str.w	r1, [sl]
 8008010:	f1bb 0f00 	cmp.w	fp, #0
 8008014:	d051      	beq.n	80080ba <__hexnan+0x132>
 8008016:	454c      	cmp	r4, r9
 8008018:	d206      	bcs.n	8008028 <__hexnan+0xa0>
 800801a:	2d07      	cmp	r5, #7
 800801c:	dc04      	bgt.n	8008028 <__hexnan+0xa0>
 800801e:	462a      	mov	r2, r5
 8008020:	4649      	mov	r1, r9
 8008022:	4620      	mov	r0, r4
 8008024:	f7ff ff8a 	bl	8007f3c <L_shift>
 8008028:	4544      	cmp	r4, r8
 800802a:	d936      	bls.n	800809a <__hexnan+0x112>
 800802c:	f1a8 0204 	sub.w	r2, r8, #4
 8008030:	4623      	mov	r3, r4
 8008032:	f853 1b04 	ldr.w	r1, [r3], #4
 8008036:	f842 1f04 	str.w	r1, [r2, #4]!
 800803a:	429f      	cmp	r7, r3
 800803c:	d2f9      	bcs.n	8008032 <__hexnan+0xaa>
 800803e:	1b3b      	subs	r3, r7, r4
 8008040:	f023 0303 	bic.w	r3, r3, #3
 8008044:	3304      	adds	r3, #4
 8008046:	3401      	adds	r4, #1
 8008048:	3e03      	subs	r6, #3
 800804a:	42b4      	cmp	r4, r6
 800804c:	bf88      	it	hi
 800804e:	2304      	movhi	r3, #4
 8008050:	4443      	add	r3, r8
 8008052:	2200      	movs	r2, #0
 8008054:	f843 2b04 	str.w	r2, [r3], #4
 8008058:	429f      	cmp	r7, r3
 800805a:	d2fb      	bcs.n	8008054 <__hexnan+0xcc>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	b91b      	cbnz	r3, 8008068 <__hexnan+0xe0>
 8008060:	4547      	cmp	r7, r8
 8008062:	d128      	bne.n	80080b6 <__hexnan+0x12e>
 8008064:	2301      	movs	r3, #1
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	2005      	movs	r0, #5
 800806a:	b007      	add	sp, #28
 800806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008070:	3501      	adds	r5, #1
 8008072:	2d08      	cmp	r5, #8
 8008074:	f10b 0b01 	add.w	fp, fp, #1
 8008078:	dd06      	ble.n	8008088 <__hexnan+0x100>
 800807a:	4544      	cmp	r4, r8
 800807c:	d9c1      	bls.n	8008002 <__hexnan+0x7a>
 800807e:	2300      	movs	r3, #0
 8008080:	f844 3c04 	str.w	r3, [r4, #-4]
 8008084:	2501      	movs	r5, #1
 8008086:	3c04      	subs	r4, #4
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	f000 000f 	and.w	r0, r0, #15
 800808e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008092:	6020      	str	r0, [r4, #0]
 8008094:	e7b5      	b.n	8008002 <__hexnan+0x7a>
 8008096:	2508      	movs	r5, #8
 8008098:	e7b3      	b.n	8008002 <__hexnan+0x7a>
 800809a:	9b01      	ldr	r3, [sp, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0dd      	beq.n	800805c <__hexnan+0xd4>
 80080a0:	f1c3 0320 	rsb	r3, r3, #32
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	40da      	lsrs	r2, r3
 80080aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080ae:	4013      	ands	r3, r2
 80080b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80080b4:	e7d2      	b.n	800805c <__hexnan+0xd4>
 80080b6:	3f04      	subs	r7, #4
 80080b8:	e7d0      	b.n	800805c <__hexnan+0xd4>
 80080ba:	2004      	movs	r0, #4
 80080bc:	e7d5      	b.n	800806a <__hexnan+0xe2>

080080be <__ascii_mbtowc>:
 80080be:	b082      	sub	sp, #8
 80080c0:	b901      	cbnz	r1, 80080c4 <__ascii_mbtowc+0x6>
 80080c2:	a901      	add	r1, sp, #4
 80080c4:	b142      	cbz	r2, 80080d8 <__ascii_mbtowc+0x1a>
 80080c6:	b14b      	cbz	r3, 80080dc <__ascii_mbtowc+0x1e>
 80080c8:	7813      	ldrb	r3, [r2, #0]
 80080ca:	600b      	str	r3, [r1, #0]
 80080cc:	7812      	ldrb	r2, [r2, #0]
 80080ce:	1e10      	subs	r0, r2, #0
 80080d0:	bf18      	it	ne
 80080d2:	2001      	movne	r0, #1
 80080d4:	b002      	add	sp, #8
 80080d6:	4770      	bx	lr
 80080d8:	4610      	mov	r0, r2
 80080da:	e7fb      	b.n	80080d4 <__ascii_mbtowc+0x16>
 80080dc:	f06f 0001 	mvn.w	r0, #1
 80080e0:	e7f8      	b.n	80080d4 <__ascii_mbtowc+0x16>

080080e2 <_realloc_r>:
 80080e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e6:	4680      	mov	r8, r0
 80080e8:	4615      	mov	r5, r2
 80080ea:	460c      	mov	r4, r1
 80080ec:	b921      	cbnz	r1, 80080f8 <_realloc_r+0x16>
 80080ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f2:	4611      	mov	r1, r2
 80080f4:	f7fd bc88 	b.w	8005a08 <_malloc_r>
 80080f8:	b92a      	cbnz	r2, 8008106 <_realloc_r+0x24>
 80080fa:	f7fd fc11 	bl	8005920 <_free_r>
 80080fe:	2400      	movs	r4, #0
 8008100:	4620      	mov	r0, r4
 8008102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008106:	f000 f8c4 	bl	8008292 <_malloc_usable_size_r>
 800810a:	4285      	cmp	r5, r0
 800810c:	4606      	mov	r6, r0
 800810e:	d802      	bhi.n	8008116 <_realloc_r+0x34>
 8008110:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008114:	d8f4      	bhi.n	8008100 <_realloc_r+0x1e>
 8008116:	4629      	mov	r1, r5
 8008118:	4640      	mov	r0, r8
 800811a:	f7fd fc75 	bl	8005a08 <_malloc_r>
 800811e:	4607      	mov	r7, r0
 8008120:	2800      	cmp	r0, #0
 8008122:	d0ec      	beq.n	80080fe <_realloc_r+0x1c>
 8008124:	42b5      	cmp	r5, r6
 8008126:	462a      	mov	r2, r5
 8008128:	4621      	mov	r1, r4
 800812a:	bf28      	it	cs
 800812c:	4632      	movcs	r2, r6
 800812e:	f7ff fc43 	bl	80079b8 <memcpy>
 8008132:	4621      	mov	r1, r4
 8008134:	4640      	mov	r0, r8
 8008136:	f7fd fbf3 	bl	8005920 <_free_r>
 800813a:	463c      	mov	r4, r7
 800813c:	e7e0      	b.n	8008100 <_realloc_r+0x1e>

0800813e <__ascii_wctomb>:
 800813e:	4603      	mov	r3, r0
 8008140:	4608      	mov	r0, r1
 8008142:	b141      	cbz	r1, 8008156 <__ascii_wctomb+0x18>
 8008144:	2aff      	cmp	r2, #255	@ 0xff
 8008146:	d904      	bls.n	8008152 <__ascii_wctomb+0x14>
 8008148:	228a      	movs	r2, #138	@ 0x8a
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	4770      	bx	lr
 8008152:	700a      	strb	r2, [r1, #0]
 8008154:	2001      	movs	r0, #1
 8008156:	4770      	bx	lr

08008158 <fiprintf>:
 8008158:	b40e      	push	{r1, r2, r3}
 800815a:	b503      	push	{r0, r1, lr}
 800815c:	4601      	mov	r1, r0
 800815e:	ab03      	add	r3, sp, #12
 8008160:	4805      	ldr	r0, [pc, #20]	@ (8008178 <fiprintf+0x20>)
 8008162:	f853 2b04 	ldr.w	r2, [r3], #4
 8008166:	6800      	ldr	r0, [r0, #0]
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	f7ff f991 	bl	8007490 <_vfiprintf_r>
 800816e:	b002      	add	sp, #8
 8008170:	f85d eb04 	ldr.w	lr, [sp], #4
 8008174:	b003      	add	sp, #12
 8008176:	4770      	bx	lr
 8008178:	20000018 	.word	0x20000018

0800817c <__swhatbuf_r>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	460c      	mov	r4, r1
 8008180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008184:	2900      	cmp	r1, #0
 8008186:	b096      	sub	sp, #88	@ 0x58
 8008188:	4615      	mov	r5, r2
 800818a:	461e      	mov	r6, r3
 800818c:	da0d      	bge.n	80081aa <__swhatbuf_r+0x2e>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008194:	f04f 0100 	mov.w	r1, #0
 8008198:	bf14      	ite	ne
 800819a:	2340      	movne	r3, #64	@ 0x40
 800819c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081a0:	2000      	movs	r0, #0
 80081a2:	6031      	str	r1, [r6, #0]
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	b016      	add	sp, #88	@ 0x58
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
 80081aa:	466a      	mov	r2, sp
 80081ac:	f000 f848 	bl	8008240 <_fstat_r>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	dbec      	blt.n	800818e <__swhatbuf_r+0x12>
 80081b4:	9901      	ldr	r1, [sp, #4]
 80081b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081be:	4259      	negs	r1, r3
 80081c0:	4159      	adcs	r1, r3
 80081c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081c6:	e7eb      	b.n	80081a0 <__swhatbuf_r+0x24>

080081c8 <__smakebuf_r>:
 80081c8:	898b      	ldrh	r3, [r1, #12]
 80081ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081cc:	079d      	lsls	r5, r3, #30
 80081ce:	4606      	mov	r6, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	d507      	bpl.n	80081e4 <__smakebuf_r+0x1c>
 80081d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	6123      	str	r3, [r4, #16]
 80081dc:	2301      	movs	r3, #1
 80081de:	6163      	str	r3, [r4, #20]
 80081e0:	b003      	add	sp, #12
 80081e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e4:	ab01      	add	r3, sp, #4
 80081e6:	466a      	mov	r2, sp
 80081e8:	f7ff ffc8 	bl	800817c <__swhatbuf_r>
 80081ec:	9f00      	ldr	r7, [sp, #0]
 80081ee:	4605      	mov	r5, r0
 80081f0:	4639      	mov	r1, r7
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7fd fc08 	bl	8005a08 <_malloc_r>
 80081f8:	b948      	cbnz	r0, 800820e <__smakebuf_r+0x46>
 80081fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fe:	059a      	lsls	r2, r3, #22
 8008200:	d4ee      	bmi.n	80081e0 <__smakebuf_r+0x18>
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	f043 0302 	orr.w	r3, r3, #2
 800820a:	81a3      	strh	r3, [r4, #12]
 800820c:	e7e2      	b.n	80081d4 <__smakebuf_r+0xc>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	6020      	str	r0, [r4, #0]
 8008212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008216:	81a3      	strh	r3, [r4, #12]
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800821e:	b15b      	cbz	r3, 8008238 <__smakebuf_r+0x70>
 8008220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008224:	4630      	mov	r0, r6
 8008226:	f000 f81d 	bl	8008264 <_isatty_r>
 800822a:	b128      	cbz	r0, 8008238 <__smakebuf_r+0x70>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f023 0303 	bic.w	r3, r3, #3
 8008232:	f043 0301 	orr.w	r3, r3, #1
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	431d      	orrs	r5, r3
 800823c:	81a5      	strh	r5, [r4, #12]
 800823e:	e7cf      	b.n	80081e0 <__smakebuf_r+0x18>

08008240 <_fstat_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d07      	ldr	r5, [pc, #28]	@ (8008260 <_fstat_r+0x20>)
 8008244:	2300      	movs	r3, #0
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	f7f9 fb5e 	bl	800190e <_fstat>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	d102      	bne.n	800825c <_fstat_r+0x1c>
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	b103      	cbz	r3, 800825c <_fstat_r+0x1c>
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	bd38      	pop	{r3, r4, r5, pc}
 800825e:	bf00      	nop
 8008260:	200003bc 	.word	0x200003bc

08008264 <_isatty_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d06      	ldr	r5, [pc, #24]	@ (8008280 <_isatty_r+0x1c>)
 8008268:	2300      	movs	r3, #0
 800826a:	4604      	mov	r4, r0
 800826c:	4608      	mov	r0, r1
 800826e:	602b      	str	r3, [r5, #0]
 8008270:	f7f9 fb5d 	bl	800192e <_isatty>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_isatty_r+0x1a>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_isatty_r+0x1a>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	200003bc 	.word	0x200003bc

08008284 <abort>:
 8008284:	b508      	push	{r3, lr}
 8008286:	2006      	movs	r0, #6
 8008288:	f000 f834 	bl	80082f4 <raise>
 800828c:	2001      	movs	r0, #1
 800828e:	f7f9 faee 	bl	800186e <_exit>

08008292 <_malloc_usable_size_r>:
 8008292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008296:	1f18      	subs	r0, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	bfbc      	itt	lt
 800829c:	580b      	ldrlt	r3, [r1, r0]
 800829e:	18c0      	addlt	r0, r0, r3
 80082a0:	4770      	bx	lr

080082a2 <_raise_r>:
 80082a2:	291f      	cmp	r1, #31
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4605      	mov	r5, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	d904      	bls.n	80082b6 <_raise_r+0x14>
 80082ac:	2316      	movs	r3, #22
 80082ae:	6003      	str	r3, [r0, #0]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	bd38      	pop	{r3, r4, r5, pc}
 80082b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082b8:	b112      	cbz	r2, 80082c0 <_raise_r+0x1e>
 80082ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082be:	b94b      	cbnz	r3, 80082d4 <_raise_r+0x32>
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f831 	bl	8008328 <_getpid_r>
 80082c6:	4622      	mov	r2, r4
 80082c8:	4601      	mov	r1, r0
 80082ca:	4628      	mov	r0, r5
 80082cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d0:	f000 b818 	b.w	8008304 <_kill_r>
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d00a      	beq.n	80082ee <_raise_r+0x4c>
 80082d8:	1c59      	adds	r1, r3, #1
 80082da:	d103      	bne.n	80082e4 <_raise_r+0x42>
 80082dc:	2316      	movs	r3, #22
 80082de:	6003      	str	r3, [r0, #0]
 80082e0:	2001      	movs	r0, #1
 80082e2:	e7e7      	b.n	80082b4 <_raise_r+0x12>
 80082e4:	2100      	movs	r1, #0
 80082e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082ea:	4620      	mov	r0, r4
 80082ec:	4798      	blx	r3
 80082ee:	2000      	movs	r0, #0
 80082f0:	e7e0      	b.n	80082b4 <_raise_r+0x12>
	...

080082f4 <raise>:
 80082f4:	4b02      	ldr	r3, [pc, #8]	@ (8008300 <raise+0xc>)
 80082f6:	4601      	mov	r1, r0
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	f7ff bfd2 	b.w	80082a2 <_raise_r>
 80082fe:	bf00      	nop
 8008300:	20000018 	.word	0x20000018

08008304 <_kill_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d07      	ldr	r5, [pc, #28]	@ (8008324 <_kill_r+0x20>)
 8008308:	2300      	movs	r3, #0
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	602b      	str	r3, [r5, #0]
 8008312:	f7f9 fa9c 	bl	800184e <_kill>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d102      	bne.n	8008320 <_kill_r+0x1c>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	b103      	cbz	r3, 8008320 <_kill_r+0x1c>
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	bd38      	pop	{r3, r4, r5, pc}
 8008322:	bf00      	nop
 8008324:	200003bc 	.word	0x200003bc

08008328 <_getpid_r>:
 8008328:	f7f9 ba89 	b.w	800183e <_getpid>

0800832c <pow>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	ed2d 8b02 	vpush	{d8}
 8008332:	eeb0 8a40 	vmov.f32	s16, s0
 8008336:	eef0 8a60 	vmov.f32	s17, s1
 800833a:	ec55 4b11 	vmov	r4, r5, d1
 800833e:	f000 f873 	bl	8008428 <__ieee754_pow>
 8008342:	4622      	mov	r2, r4
 8008344:	462b      	mov	r3, r5
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	ec57 6b10 	vmov	r6, r7, d0
 800834e:	f7f8 fc0d 	bl	8000b6c <__aeabi_dcmpun>
 8008352:	2800      	cmp	r0, #0
 8008354:	d13b      	bne.n	80083ce <pow+0xa2>
 8008356:	ec51 0b18 	vmov	r0, r1, d8
 800835a:	2200      	movs	r2, #0
 800835c:	2300      	movs	r3, #0
 800835e:	f7f8 fbd3 	bl	8000b08 <__aeabi_dcmpeq>
 8008362:	b1b8      	cbz	r0, 8008394 <pow+0x68>
 8008364:	2200      	movs	r2, #0
 8008366:	2300      	movs	r3, #0
 8008368:	4620      	mov	r0, r4
 800836a:	4629      	mov	r1, r5
 800836c:	f7f8 fbcc 	bl	8000b08 <__aeabi_dcmpeq>
 8008370:	2800      	cmp	r0, #0
 8008372:	d146      	bne.n	8008402 <pow+0xd6>
 8008374:	ec45 4b10 	vmov	d0, r4, r5
 8008378:	f000 f848 	bl	800840c <finite>
 800837c:	b338      	cbz	r0, 80083ce <pow+0xa2>
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	4620      	mov	r0, r4
 8008384:	4629      	mov	r1, r5
 8008386:	f7f8 fbc9 	bl	8000b1c <__aeabi_dcmplt>
 800838a:	b300      	cbz	r0, 80083ce <pow+0xa2>
 800838c:	f7fc fc48 	bl	8004c20 <__errno>
 8008390:	2322      	movs	r3, #34	@ 0x22
 8008392:	e01b      	b.n	80083cc <pow+0xa0>
 8008394:	ec47 6b10 	vmov	d0, r6, r7
 8008398:	f000 f838 	bl	800840c <finite>
 800839c:	b9e0      	cbnz	r0, 80083d8 <pow+0xac>
 800839e:	eeb0 0a48 	vmov.f32	s0, s16
 80083a2:	eef0 0a68 	vmov.f32	s1, s17
 80083a6:	f000 f831 	bl	800840c <finite>
 80083aa:	b1a8      	cbz	r0, 80083d8 <pow+0xac>
 80083ac:	ec45 4b10 	vmov	d0, r4, r5
 80083b0:	f000 f82c 	bl	800840c <finite>
 80083b4:	b180      	cbz	r0, 80083d8 <pow+0xac>
 80083b6:	4632      	mov	r2, r6
 80083b8:	463b      	mov	r3, r7
 80083ba:	4630      	mov	r0, r6
 80083bc:	4639      	mov	r1, r7
 80083be:	f7f8 fbd5 	bl	8000b6c <__aeabi_dcmpun>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d0e2      	beq.n	800838c <pow+0x60>
 80083c6:	f7fc fc2b 	bl	8004c20 <__errno>
 80083ca:	2321      	movs	r3, #33	@ 0x21
 80083cc:	6003      	str	r3, [r0, #0]
 80083ce:	ecbd 8b02 	vpop	{d8}
 80083d2:	ec47 6b10 	vmov	d0, r6, r7
 80083d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 fb92 	bl	8000b08 <__aeabi_dcmpeq>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0f2      	beq.n	80083ce <pow+0xa2>
 80083e8:	eeb0 0a48 	vmov.f32	s0, s16
 80083ec:	eef0 0a68 	vmov.f32	s1, s17
 80083f0:	f000 f80c 	bl	800840c <finite>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d0ea      	beq.n	80083ce <pow+0xa2>
 80083f8:	ec45 4b10 	vmov	d0, r4, r5
 80083fc:	f000 f806 	bl	800840c <finite>
 8008400:	e7c3      	b.n	800838a <pow+0x5e>
 8008402:	4f01      	ldr	r7, [pc, #4]	@ (8008408 <pow+0xdc>)
 8008404:	2600      	movs	r6, #0
 8008406:	e7e2      	b.n	80083ce <pow+0xa2>
 8008408:	3ff00000 	.word	0x3ff00000

0800840c <finite>:
 800840c:	b082      	sub	sp, #8
 800840e:	ed8d 0b00 	vstr	d0, [sp]
 8008412:	9801      	ldr	r0, [sp, #4]
 8008414:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008418:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800841c:	0fc0      	lsrs	r0, r0, #31
 800841e:	b002      	add	sp, #8
 8008420:	4770      	bx	lr
 8008422:	0000      	movs	r0, r0
 8008424:	0000      	movs	r0, r0
	...

08008428 <__ieee754_pow>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	b091      	sub	sp, #68	@ 0x44
 800842e:	ed8d 1b00 	vstr	d1, [sp]
 8008432:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008436:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800843a:	ea5a 0001 	orrs.w	r0, sl, r1
 800843e:	ec57 6b10 	vmov	r6, r7, d0
 8008442:	d113      	bne.n	800846c <__ieee754_pow+0x44>
 8008444:	19b3      	adds	r3, r6, r6
 8008446:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800844a:	4152      	adcs	r2, r2
 800844c:	4298      	cmp	r0, r3
 800844e:	4b98      	ldr	r3, [pc, #608]	@ (80086b0 <__ieee754_pow+0x288>)
 8008450:	4193      	sbcs	r3, r2
 8008452:	f080 84ea 	bcs.w	8008e2a <__ieee754_pow+0xa02>
 8008456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f7 ff35 	bl	80002cc <__adddf3>
 8008462:	ec41 0b10 	vmov	d0, r0, r1
 8008466:	b011      	add	sp, #68	@ 0x44
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	4a91      	ldr	r2, [pc, #580]	@ (80086b4 <__ieee754_pow+0x28c>)
 800846e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008472:	4590      	cmp	r8, r2
 8008474:	463d      	mov	r5, r7
 8008476:	4633      	mov	r3, r6
 8008478:	d806      	bhi.n	8008488 <__ieee754_pow+0x60>
 800847a:	d101      	bne.n	8008480 <__ieee754_pow+0x58>
 800847c:	2e00      	cmp	r6, #0
 800847e:	d1ea      	bne.n	8008456 <__ieee754_pow+0x2e>
 8008480:	4592      	cmp	sl, r2
 8008482:	d801      	bhi.n	8008488 <__ieee754_pow+0x60>
 8008484:	d10e      	bne.n	80084a4 <__ieee754_pow+0x7c>
 8008486:	b169      	cbz	r1, 80084a4 <__ieee754_pow+0x7c>
 8008488:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800848c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008490:	431d      	orrs	r5, r3
 8008492:	d1e0      	bne.n	8008456 <__ieee754_pow+0x2e>
 8008494:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008498:	18db      	adds	r3, r3, r3
 800849a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800849e:	4152      	adcs	r2, r2
 80084a0:	429d      	cmp	r5, r3
 80084a2:	e7d4      	b.n	800844e <__ieee754_pow+0x26>
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	46c3      	mov	fp, r8
 80084a8:	da3a      	bge.n	8008520 <__ieee754_pow+0xf8>
 80084aa:	4a83      	ldr	r2, [pc, #524]	@ (80086b8 <__ieee754_pow+0x290>)
 80084ac:	4592      	cmp	sl, r2
 80084ae:	d84d      	bhi.n	800854c <__ieee754_pow+0x124>
 80084b0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80084b4:	4592      	cmp	sl, r2
 80084b6:	f240 84c7 	bls.w	8008e48 <__ieee754_pow+0xa20>
 80084ba:	ea4f 522a 	mov.w	r2, sl, asr #20
 80084be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80084c2:	2a14      	cmp	r2, #20
 80084c4:	dd0f      	ble.n	80084e6 <__ieee754_pow+0xbe>
 80084c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80084ca:	fa21 f402 	lsr.w	r4, r1, r2
 80084ce:	fa04 f202 	lsl.w	r2, r4, r2
 80084d2:	428a      	cmp	r2, r1
 80084d4:	f040 84b8 	bne.w	8008e48 <__ieee754_pow+0xa20>
 80084d8:	f004 0401 	and.w	r4, r4, #1
 80084dc:	f1c4 0402 	rsb	r4, r4, #2
 80084e0:	2900      	cmp	r1, #0
 80084e2:	d158      	bne.n	8008596 <__ieee754_pow+0x16e>
 80084e4:	e00e      	b.n	8008504 <__ieee754_pow+0xdc>
 80084e6:	2900      	cmp	r1, #0
 80084e8:	d154      	bne.n	8008594 <__ieee754_pow+0x16c>
 80084ea:	f1c2 0214 	rsb	r2, r2, #20
 80084ee:	fa4a f402 	asr.w	r4, sl, r2
 80084f2:	fa04 f202 	lsl.w	r2, r4, r2
 80084f6:	4552      	cmp	r2, sl
 80084f8:	f040 84a3 	bne.w	8008e42 <__ieee754_pow+0xa1a>
 80084fc:	f004 0401 	and.w	r4, r4, #1
 8008500:	f1c4 0402 	rsb	r4, r4, #2
 8008504:	4a6d      	ldr	r2, [pc, #436]	@ (80086bc <__ieee754_pow+0x294>)
 8008506:	4592      	cmp	sl, r2
 8008508:	d12e      	bne.n	8008568 <__ieee754_pow+0x140>
 800850a:	f1b9 0f00 	cmp.w	r9, #0
 800850e:	f280 8494 	bge.w	8008e3a <__ieee754_pow+0xa12>
 8008512:	496a      	ldr	r1, [pc, #424]	@ (80086bc <__ieee754_pow+0x294>)
 8008514:	4632      	mov	r2, r6
 8008516:	463b      	mov	r3, r7
 8008518:	2000      	movs	r0, #0
 800851a:	f7f8 f9b7 	bl	800088c <__aeabi_ddiv>
 800851e:	e7a0      	b.n	8008462 <__ieee754_pow+0x3a>
 8008520:	2400      	movs	r4, #0
 8008522:	bbc1      	cbnz	r1, 8008596 <__ieee754_pow+0x16e>
 8008524:	4a63      	ldr	r2, [pc, #396]	@ (80086b4 <__ieee754_pow+0x28c>)
 8008526:	4592      	cmp	sl, r2
 8008528:	d1ec      	bne.n	8008504 <__ieee754_pow+0xdc>
 800852a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800852e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008532:	431a      	orrs	r2, r3
 8008534:	f000 8479 	beq.w	8008e2a <__ieee754_pow+0xa02>
 8008538:	4b61      	ldr	r3, [pc, #388]	@ (80086c0 <__ieee754_pow+0x298>)
 800853a:	4598      	cmp	r8, r3
 800853c:	d908      	bls.n	8008550 <__ieee754_pow+0x128>
 800853e:	f1b9 0f00 	cmp.w	r9, #0
 8008542:	f2c0 8476 	blt.w	8008e32 <__ieee754_pow+0xa0a>
 8008546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800854a:	e78a      	b.n	8008462 <__ieee754_pow+0x3a>
 800854c:	2402      	movs	r4, #2
 800854e:	e7e8      	b.n	8008522 <__ieee754_pow+0xfa>
 8008550:	f1b9 0f00 	cmp.w	r9, #0
 8008554:	f04f 0000 	mov.w	r0, #0
 8008558:	f04f 0100 	mov.w	r1, #0
 800855c:	da81      	bge.n	8008462 <__ieee754_pow+0x3a>
 800855e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008562:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008566:	e77c      	b.n	8008462 <__ieee754_pow+0x3a>
 8008568:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800856c:	d106      	bne.n	800857c <__ieee754_pow+0x154>
 800856e:	4632      	mov	r2, r6
 8008570:	463b      	mov	r3, r7
 8008572:	4630      	mov	r0, r6
 8008574:	4639      	mov	r1, r7
 8008576:	f7f8 f85f 	bl	8000638 <__aeabi_dmul>
 800857a:	e772      	b.n	8008462 <__ieee754_pow+0x3a>
 800857c:	4a51      	ldr	r2, [pc, #324]	@ (80086c4 <__ieee754_pow+0x29c>)
 800857e:	4591      	cmp	r9, r2
 8008580:	d109      	bne.n	8008596 <__ieee754_pow+0x16e>
 8008582:	2d00      	cmp	r5, #0
 8008584:	db07      	blt.n	8008596 <__ieee754_pow+0x16e>
 8008586:	ec47 6b10 	vmov	d0, r6, r7
 800858a:	b011      	add	sp, #68	@ 0x44
 800858c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	f000 bd52 	b.w	8009038 <__ieee754_sqrt>
 8008594:	2400      	movs	r4, #0
 8008596:	ec47 6b10 	vmov	d0, r6, r7
 800859a:	9302      	str	r3, [sp, #8]
 800859c:	f000 fc88 	bl	8008eb0 <fabs>
 80085a0:	9b02      	ldr	r3, [sp, #8]
 80085a2:	ec51 0b10 	vmov	r0, r1, d0
 80085a6:	bb53      	cbnz	r3, 80085fe <__ieee754_pow+0x1d6>
 80085a8:	4b44      	ldr	r3, [pc, #272]	@ (80086bc <__ieee754_pow+0x294>)
 80085aa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d002      	beq.n	80085b8 <__ieee754_pow+0x190>
 80085b2:	f1b8 0f00 	cmp.w	r8, #0
 80085b6:	d122      	bne.n	80085fe <__ieee754_pow+0x1d6>
 80085b8:	f1b9 0f00 	cmp.w	r9, #0
 80085bc:	da05      	bge.n	80085ca <__ieee754_pow+0x1a2>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	2000      	movs	r0, #0
 80085c4:	493d      	ldr	r1, [pc, #244]	@ (80086bc <__ieee754_pow+0x294>)
 80085c6:	f7f8 f961 	bl	800088c <__aeabi_ddiv>
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	f6bf af49 	bge.w	8008462 <__ieee754_pow+0x3a>
 80085d0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80085d4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80085d8:	ea58 0804 	orrs.w	r8, r8, r4
 80085dc:	d108      	bne.n	80085f0 <__ieee754_pow+0x1c8>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	f7f7 fe6f 	bl	80002c8 <__aeabi_dsub>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	e794      	b.n	800851a <__ieee754_pow+0xf2>
 80085f0:	2c01      	cmp	r4, #1
 80085f2:	f47f af36 	bne.w	8008462 <__ieee754_pow+0x3a>
 80085f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085fa:	4619      	mov	r1, r3
 80085fc:	e731      	b.n	8008462 <__ieee754_pow+0x3a>
 80085fe:	0feb      	lsrs	r3, r5, #31
 8008600:	3b01      	subs	r3, #1
 8008602:	ea53 0204 	orrs.w	r2, r3, r4
 8008606:	d102      	bne.n	800860e <__ieee754_pow+0x1e6>
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	e7e9      	b.n	80085e2 <__ieee754_pow+0x1ba>
 800860e:	3c01      	subs	r4, #1
 8008610:	431c      	orrs	r4, r3
 8008612:	d016      	beq.n	8008642 <__ieee754_pow+0x21a>
 8008614:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80086a0 <__ieee754_pow+0x278>
 8008618:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800861c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008620:	f240 8112 	bls.w	8008848 <__ieee754_pow+0x420>
 8008624:	4b28      	ldr	r3, [pc, #160]	@ (80086c8 <__ieee754_pow+0x2a0>)
 8008626:	459a      	cmp	sl, r3
 8008628:	4b25      	ldr	r3, [pc, #148]	@ (80086c0 <__ieee754_pow+0x298>)
 800862a:	d916      	bls.n	800865a <__ieee754_pow+0x232>
 800862c:	4598      	cmp	r8, r3
 800862e:	d80b      	bhi.n	8008648 <__ieee754_pow+0x220>
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	da0b      	bge.n	800864e <__ieee754_pow+0x226>
 8008636:	2000      	movs	r0, #0
 8008638:	b011      	add	sp, #68	@ 0x44
 800863a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863e:	f000 bcf3 	b.w	8009028 <__math_oflow>
 8008642:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80086a8 <__ieee754_pow+0x280>
 8008646:	e7e7      	b.n	8008618 <__ieee754_pow+0x1f0>
 8008648:	f1b9 0f00 	cmp.w	r9, #0
 800864c:	dcf3      	bgt.n	8008636 <__ieee754_pow+0x20e>
 800864e:	2000      	movs	r0, #0
 8008650:	b011      	add	sp, #68	@ 0x44
 8008652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008656:	f000 bcdf 	b.w	8009018 <__math_uflow>
 800865a:	4598      	cmp	r8, r3
 800865c:	d20c      	bcs.n	8008678 <__ieee754_pow+0x250>
 800865e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	2300      	movs	r3, #0
 8008666:	f7f8 fa59 	bl	8000b1c <__aeabi_dcmplt>
 800866a:	3800      	subs	r0, #0
 800866c:	bf18      	it	ne
 800866e:	2001      	movne	r0, #1
 8008670:	f1b9 0f00 	cmp.w	r9, #0
 8008674:	daec      	bge.n	8008650 <__ieee754_pow+0x228>
 8008676:	e7df      	b.n	8008638 <__ieee754_pow+0x210>
 8008678:	4b10      	ldr	r3, [pc, #64]	@ (80086bc <__ieee754_pow+0x294>)
 800867a:	4598      	cmp	r8, r3
 800867c:	f04f 0200 	mov.w	r2, #0
 8008680:	d924      	bls.n	80086cc <__ieee754_pow+0x2a4>
 8008682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008686:	2300      	movs	r3, #0
 8008688:	f7f8 fa48 	bl	8000b1c <__aeabi_dcmplt>
 800868c:	3800      	subs	r0, #0
 800868e:	bf18      	it	ne
 8008690:	2001      	movne	r0, #1
 8008692:	f1b9 0f00 	cmp.w	r9, #0
 8008696:	dccf      	bgt.n	8008638 <__ieee754_pow+0x210>
 8008698:	e7da      	b.n	8008650 <__ieee754_pow+0x228>
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w
 80086a0:	00000000 	.word	0x00000000
 80086a4:	3ff00000 	.word	0x3ff00000
 80086a8:	00000000 	.word	0x00000000
 80086ac:	bff00000 	.word	0xbff00000
 80086b0:	fff00000 	.word	0xfff00000
 80086b4:	7ff00000 	.word	0x7ff00000
 80086b8:	433fffff 	.word	0x433fffff
 80086bc:	3ff00000 	.word	0x3ff00000
 80086c0:	3fefffff 	.word	0x3fefffff
 80086c4:	3fe00000 	.word	0x3fe00000
 80086c8:	43f00000 	.word	0x43f00000
 80086cc:	4b5a      	ldr	r3, [pc, #360]	@ (8008838 <__ieee754_pow+0x410>)
 80086ce:	f7f7 fdfb 	bl	80002c8 <__aeabi_dsub>
 80086d2:	a351      	add	r3, pc, #324	@ (adr r3, 8008818 <__ieee754_pow+0x3f0>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	4604      	mov	r4, r0
 80086da:	460d      	mov	r5, r1
 80086dc:	f7f7 ffac 	bl	8000638 <__aeabi_dmul>
 80086e0:	a34f      	add	r3, pc, #316	@ (adr r3, 8008820 <__ieee754_pow+0x3f8>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	4606      	mov	r6, r0
 80086e8:	460f      	mov	r7, r1
 80086ea:	4620      	mov	r0, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7f7 ffa3 	bl	8000638 <__aeabi_dmul>
 80086f2:	4b52      	ldr	r3, [pc, #328]	@ (800883c <__ieee754_pow+0x414>)
 80086f4:	4682      	mov	sl, r0
 80086f6:	468b      	mov	fp, r1
 80086f8:	2200      	movs	r2, #0
 80086fa:	4620      	mov	r0, r4
 80086fc:	4629      	mov	r1, r5
 80086fe:	f7f7 ff9b 	bl	8000638 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	a148      	add	r1, pc, #288	@ (adr r1, 8008828 <__ieee754_pow+0x400>)
 8008708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800870c:	f7f7 fddc 	bl	80002c8 <__aeabi_dsub>
 8008710:	4622      	mov	r2, r4
 8008712:	462b      	mov	r3, r5
 8008714:	f7f7 ff90 	bl	8000638 <__aeabi_dmul>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	2000      	movs	r0, #0
 800871e:	4948      	ldr	r1, [pc, #288]	@ (8008840 <__ieee754_pow+0x418>)
 8008720:	f7f7 fdd2 	bl	80002c8 <__aeabi_dsub>
 8008724:	4622      	mov	r2, r4
 8008726:	4680      	mov	r8, r0
 8008728:	4689      	mov	r9, r1
 800872a:	462b      	mov	r3, r5
 800872c:	4620      	mov	r0, r4
 800872e:	4629      	mov	r1, r5
 8008730:	f7f7 ff82 	bl	8000638 <__aeabi_dmul>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f7 ff7c 	bl	8000638 <__aeabi_dmul>
 8008740:	a33b      	add	r3, pc, #236	@ (adr r3, 8008830 <__ieee754_pow+0x408>)
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f7f7 ff77 	bl	8000638 <__aeabi_dmul>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4650      	mov	r0, sl
 8008750:	4659      	mov	r1, fp
 8008752:	f7f7 fdb9 	bl	80002c8 <__aeabi_dsub>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4680      	mov	r8, r0
 800875c:	4689      	mov	r9, r1
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f7 fdb3 	bl	80002cc <__adddf3>
 8008766:	2400      	movs	r4, #0
 8008768:	4632      	mov	r2, r6
 800876a:	463b      	mov	r3, r7
 800876c:	4620      	mov	r0, r4
 800876e:	460d      	mov	r5, r1
 8008770:	f7f7 fdaa 	bl	80002c8 <__aeabi_dsub>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4640      	mov	r0, r8
 800877a:	4649      	mov	r1, r9
 800877c:	f7f7 fda4 	bl	80002c8 <__aeabi_dsub>
 8008780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008784:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008788:	2300      	movs	r3, #0
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008790:	4606      	mov	r6, r0
 8008792:	460f      	mov	r7, r1
 8008794:	4652      	mov	r2, sl
 8008796:	465b      	mov	r3, fp
 8008798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800879c:	f7f7 fd94 	bl	80002c8 <__aeabi_dsub>
 80087a0:	4622      	mov	r2, r4
 80087a2:	462b      	mov	r3, r5
 80087a4:	f7f7 ff48 	bl	8000638 <__aeabi_dmul>
 80087a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ac:	4680      	mov	r8, r0
 80087ae:	4689      	mov	r9, r1
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f7 ff40 	bl	8000638 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f7 fd84 	bl	80002cc <__adddf3>
 80087c4:	4652      	mov	r2, sl
 80087c6:	465b      	mov	r3, fp
 80087c8:	4606      	mov	r6, r0
 80087ca:	460f      	mov	r7, r1
 80087cc:	4620      	mov	r0, r4
 80087ce:	4629      	mov	r1, r5
 80087d0:	f7f7 ff32 	bl	8000638 <__aeabi_dmul>
 80087d4:	460b      	mov	r3, r1
 80087d6:	4602      	mov	r2, r0
 80087d8:	4680      	mov	r8, r0
 80087da:	4689      	mov	r9, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 fd74 	bl	80002cc <__adddf3>
 80087e4:	4b17      	ldr	r3, [pc, #92]	@ (8008844 <__ieee754_pow+0x41c>)
 80087e6:	4299      	cmp	r1, r3
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	468a      	mov	sl, r1
 80087ee:	468b      	mov	fp, r1
 80087f0:	f340 82ef 	ble.w	8008dd2 <__ieee754_pow+0x9aa>
 80087f4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80087f8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80087fc:	4303      	orrs	r3, r0
 80087fe:	f000 81e8 	beq.w	8008bd2 <__ieee754_pow+0x7aa>
 8008802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	2300      	movs	r3, #0
 800880a:	f7f8 f987 	bl	8000b1c <__aeabi_dcmplt>
 800880e:	3800      	subs	r0, #0
 8008810:	bf18      	it	ne
 8008812:	2001      	movne	r0, #1
 8008814:	e710      	b.n	8008638 <__ieee754_pow+0x210>
 8008816:	bf00      	nop
 8008818:	60000000 	.word	0x60000000
 800881c:	3ff71547 	.word	0x3ff71547
 8008820:	f85ddf44 	.word	0xf85ddf44
 8008824:	3e54ae0b 	.word	0x3e54ae0b
 8008828:	55555555 	.word	0x55555555
 800882c:	3fd55555 	.word	0x3fd55555
 8008830:	652b82fe 	.word	0x652b82fe
 8008834:	3ff71547 	.word	0x3ff71547
 8008838:	3ff00000 	.word	0x3ff00000
 800883c:	3fd00000 	.word	0x3fd00000
 8008840:	3fe00000 	.word	0x3fe00000
 8008844:	408fffff 	.word	0x408fffff
 8008848:	4bd5      	ldr	r3, [pc, #852]	@ (8008ba0 <__ieee754_pow+0x778>)
 800884a:	402b      	ands	r3, r5
 800884c:	2200      	movs	r2, #0
 800884e:	b92b      	cbnz	r3, 800885c <__ieee754_pow+0x434>
 8008850:	4bd4      	ldr	r3, [pc, #848]	@ (8008ba4 <__ieee754_pow+0x77c>)
 8008852:	f7f7 fef1 	bl	8000638 <__aeabi_dmul>
 8008856:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800885a:	468b      	mov	fp, r1
 800885c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008860:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008864:	4413      	add	r3, r2
 8008866:	930a      	str	r3, [sp, #40]	@ 0x28
 8008868:	4bcf      	ldr	r3, [pc, #828]	@ (8008ba8 <__ieee754_pow+0x780>)
 800886a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800886e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008872:	459b      	cmp	fp, r3
 8008874:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008878:	dd08      	ble.n	800888c <__ieee754_pow+0x464>
 800887a:	4bcc      	ldr	r3, [pc, #816]	@ (8008bac <__ieee754_pow+0x784>)
 800887c:	459b      	cmp	fp, r3
 800887e:	f340 81a5 	ble.w	8008bcc <__ieee754_pow+0x7a4>
 8008882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008884:	3301      	adds	r3, #1
 8008886:	930a      	str	r3, [sp, #40]	@ 0x28
 8008888:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800888c:	f04f 0a00 	mov.w	sl, #0
 8008890:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008896:	4bc6      	ldr	r3, [pc, #792]	@ (8008bb0 <__ieee754_pow+0x788>)
 8008898:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800889c:	ed93 7b00 	vldr	d7, [r3]
 80088a0:	4629      	mov	r1, r5
 80088a2:	ec53 2b17 	vmov	r2, r3, d7
 80088a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088ae:	f7f7 fd0b 	bl	80002c8 <__aeabi_dsub>
 80088b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088be:	f7f7 fd05 	bl	80002cc <__adddf3>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	2000      	movs	r0, #0
 80088c8:	49ba      	ldr	r1, [pc, #744]	@ (8008bb4 <__ieee754_pow+0x78c>)
 80088ca:	f7f7 ffdf 	bl	800088c <__aeabi_ddiv>
 80088ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f7 fead 	bl	8000638 <__aeabi_dmul>
 80088de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80088e6:	106d      	asrs	r5, r5, #1
 80088e8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80088ec:	f04f 0b00 	mov.w	fp, #0
 80088f0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80088f4:	4661      	mov	r1, ip
 80088f6:	2200      	movs	r2, #0
 80088f8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80088fc:	4658      	mov	r0, fp
 80088fe:	46e1      	mov	r9, ip
 8008900:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008904:	4614      	mov	r4, r2
 8008906:	461d      	mov	r5, r3
 8008908:	f7f7 fe96 	bl	8000638 <__aeabi_dmul>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f7 fcd8 	bl	80002c8 <__aeabi_dsub>
 8008918:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800891c:	4606      	mov	r6, r0
 800891e:	460f      	mov	r7, r1
 8008920:	4620      	mov	r0, r4
 8008922:	4629      	mov	r1, r5
 8008924:	f7f7 fcd0 	bl	80002c8 <__aeabi_dsub>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008930:	f7f7 fcca 	bl	80002c8 <__aeabi_dsub>
 8008934:	465a      	mov	r2, fp
 8008936:	464b      	mov	r3, r9
 8008938:	f7f7 fe7e 	bl	8000638 <__aeabi_dmul>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fcc0 	bl	80002c8 <__aeabi_dsub>
 8008948:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800894c:	f7f7 fe74 	bl	8000638 <__aeabi_dmul>
 8008950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008954:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008958:	4610      	mov	r0, r2
 800895a:	4619      	mov	r1, r3
 800895c:	f7f7 fe6c 	bl	8000638 <__aeabi_dmul>
 8008960:	a37d      	add	r3, pc, #500	@ (adr r3, 8008b58 <__ieee754_pow+0x730>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	4604      	mov	r4, r0
 8008968:	460d      	mov	r5, r1
 800896a:	f7f7 fe65 	bl	8000638 <__aeabi_dmul>
 800896e:	a37c      	add	r3, pc, #496	@ (adr r3, 8008b60 <__ieee754_pow+0x738>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fcaa 	bl	80002cc <__adddf3>
 8008978:	4622      	mov	r2, r4
 800897a:	462b      	mov	r3, r5
 800897c:	f7f7 fe5c 	bl	8000638 <__aeabi_dmul>
 8008980:	a379      	add	r3, pc, #484	@ (adr r3, 8008b68 <__ieee754_pow+0x740>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fca1 	bl	80002cc <__adddf3>
 800898a:	4622      	mov	r2, r4
 800898c:	462b      	mov	r3, r5
 800898e:	f7f7 fe53 	bl	8000638 <__aeabi_dmul>
 8008992:	a377      	add	r3, pc, #476	@ (adr r3, 8008b70 <__ieee754_pow+0x748>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fc98 	bl	80002cc <__adddf3>
 800899c:	4622      	mov	r2, r4
 800899e:	462b      	mov	r3, r5
 80089a0:	f7f7 fe4a 	bl	8000638 <__aeabi_dmul>
 80089a4:	a374      	add	r3, pc, #464	@ (adr r3, 8008b78 <__ieee754_pow+0x750>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fc8f 	bl	80002cc <__adddf3>
 80089ae:	4622      	mov	r2, r4
 80089b0:	462b      	mov	r3, r5
 80089b2:	f7f7 fe41 	bl	8000638 <__aeabi_dmul>
 80089b6:	a372      	add	r3, pc, #456	@ (adr r3, 8008b80 <__ieee754_pow+0x758>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f7f7 fc86 	bl	80002cc <__adddf3>
 80089c0:	4622      	mov	r2, r4
 80089c2:	4606      	mov	r6, r0
 80089c4:	460f      	mov	r7, r1
 80089c6:	462b      	mov	r3, r5
 80089c8:	4620      	mov	r0, r4
 80089ca:	4629      	mov	r1, r5
 80089cc:	f7f7 fe34 	bl	8000638 <__aeabi_dmul>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	f7f7 fe2e 	bl	8000638 <__aeabi_dmul>
 80089dc:	465a      	mov	r2, fp
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	464b      	mov	r3, r9
 80089e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089e8:	f7f7 fc70 	bl	80002cc <__adddf3>
 80089ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089f0:	f7f7 fe22 	bl	8000638 <__aeabi_dmul>
 80089f4:	4622      	mov	r2, r4
 80089f6:	462b      	mov	r3, r5
 80089f8:	f7f7 fc68 	bl	80002cc <__adddf3>
 80089fc:	465a      	mov	r2, fp
 80089fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a02:	464b      	mov	r3, r9
 8008a04:	4658      	mov	r0, fp
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7f7 fe16 	bl	8000638 <__aeabi_dmul>
 8008a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8008bb8 <__ieee754_pow+0x790>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4606      	mov	r6, r0
 8008a12:	460f      	mov	r7, r1
 8008a14:	f7f7 fc5a 	bl	80002cc <__adddf3>
 8008a18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a1c:	f7f7 fc56 	bl	80002cc <__adddf3>
 8008a20:	46d8      	mov	r8, fp
 8008a22:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008a26:	460d      	mov	r5, r1
 8008a28:	465a      	mov	r2, fp
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	4649      	mov	r1, r9
 8008a30:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008a34:	f7f7 fe00 	bl	8000638 <__aeabi_dmul>
 8008a38:	465c      	mov	r4, fp
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	4689      	mov	r9, r1
 8008a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8008bb8 <__ieee754_pow+0x790>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f7 fc3f 	bl	80002c8 <__aeabi_dsub>
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	f7f7 fc3b 	bl	80002c8 <__aeabi_dsub>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a5a:	f7f7 fc35 	bl	80002c8 <__aeabi_dsub>
 8008a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a62:	f7f7 fde9 	bl	8000638 <__aeabi_dmul>
 8008a66:	4622      	mov	r2, r4
 8008a68:	4606      	mov	r6, r0
 8008a6a:	460f      	mov	r7, r1
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a72:	f7f7 fde1 	bl	8000638 <__aeabi_dmul>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f7 fc25 	bl	80002cc <__adddf3>
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f7 fc1d 	bl	80002cc <__adddf3>
 8008a92:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008a96:	a33c      	add	r3, pc, #240	@ (adr r3, 8008b88 <__ieee754_pow+0x760>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	4658      	mov	r0, fp
 8008a9e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	f7f7 fdc8 	bl	8000638 <__aeabi_dmul>
 8008aa8:	465c      	mov	r4, fp
 8008aaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aae:	4642      	mov	r2, r8
 8008ab0:	464b      	mov	r3, r9
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	f7f7 fc07 	bl	80002c8 <__aeabi_dsub>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	f7f7 fc01 	bl	80002c8 <__aeabi_dsub>
 8008ac6:	a332      	add	r3, pc, #200	@ (adr r3, 8008b90 <__ieee754_pow+0x768>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fdb4 	bl	8000638 <__aeabi_dmul>
 8008ad0:	a331      	add	r3, pc, #196	@ (adr r3, 8008b98 <__ieee754_pow+0x770>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fdab 	bl	8000638 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	4639      	mov	r1, r7
 8008aea:	f7f7 fbef 	bl	80002cc <__adddf3>
 8008aee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008af0:	4b32      	ldr	r3, [pc, #200]	@ (8008bbc <__ieee754_pow+0x794>)
 8008af2:	4413      	add	r3, r2
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fbe8 	bl	80002cc <__adddf3>
 8008afc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b02:	f7f7 fd2f 	bl	8000564 <__aeabi_i2d>
 8008b06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b08:	4b2d      	ldr	r3, [pc, #180]	@ (8008bc0 <__ieee754_pow+0x798>)
 8008b0a:	4413      	add	r3, r2
 8008b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b10:	4606      	mov	r6, r0
 8008b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b16:	460f      	mov	r7, r1
 8008b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b1c:	f7f7 fbd6 	bl	80002cc <__adddf3>
 8008b20:	4642      	mov	r2, r8
 8008b22:	464b      	mov	r3, r9
 8008b24:	f7f7 fbd2 	bl	80002cc <__adddf3>
 8008b28:	4632      	mov	r2, r6
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	f7f7 fbce 	bl	80002cc <__adddf3>
 8008b30:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008b34:	4632      	mov	r2, r6
 8008b36:	463b      	mov	r3, r7
 8008b38:	4658      	mov	r0, fp
 8008b3a:	460d      	mov	r5, r1
 8008b3c:	f7f7 fbc4 	bl	80002c8 <__aeabi_dsub>
 8008b40:	4642      	mov	r2, r8
 8008b42:	464b      	mov	r3, r9
 8008b44:	f7f7 fbc0 	bl	80002c8 <__aeabi_dsub>
 8008b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b4c:	f7f7 fbbc 	bl	80002c8 <__aeabi_dsub>
 8008b50:	465c      	mov	r4, fp
 8008b52:	4602      	mov	r2, r0
 8008b54:	e036      	b.n	8008bc4 <__ieee754_pow+0x79c>
 8008b56:	bf00      	nop
 8008b58:	4a454eef 	.word	0x4a454eef
 8008b5c:	3fca7e28 	.word	0x3fca7e28
 8008b60:	93c9db65 	.word	0x93c9db65
 8008b64:	3fcd864a 	.word	0x3fcd864a
 8008b68:	a91d4101 	.word	0xa91d4101
 8008b6c:	3fd17460 	.word	0x3fd17460
 8008b70:	518f264d 	.word	0x518f264d
 8008b74:	3fd55555 	.word	0x3fd55555
 8008b78:	db6fabff 	.word	0xdb6fabff
 8008b7c:	3fdb6db6 	.word	0x3fdb6db6
 8008b80:	33333303 	.word	0x33333303
 8008b84:	3fe33333 	.word	0x3fe33333
 8008b88:	e0000000 	.word	0xe0000000
 8008b8c:	3feec709 	.word	0x3feec709
 8008b90:	dc3a03fd 	.word	0xdc3a03fd
 8008b94:	3feec709 	.word	0x3feec709
 8008b98:	145b01f5 	.word	0x145b01f5
 8008b9c:	be3e2fe0 	.word	0xbe3e2fe0
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	43400000 	.word	0x43400000
 8008ba8:	0003988e 	.word	0x0003988e
 8008bac:	000bb679 	.word	0x000bb679
 8008bb0:	08009690 	.word	0x08009690
 8008bb4:	3ff00000 	.word	0x3ff00000
 8008bb8:	40080000 	.word	0x40080000
 8008bbc:	08009670 	.word	0x08009670
 8008bc0:	08009680 	.word	0x08009680
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bca:	e5d7      	b.n	800877c <__ieee754_pow+0x354>
 8008bcc:	f04f 0a01 	mov.w	sl, #1
 8008bd0:	e65e      	b.n	8008890 <__ieee754_pow+0x468>
 8008bd2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008ea4 <__ieee754_pow+0xa7c>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	4630      	mov	r0, r6
 8008bda:	4639      	mov	r1, r7
 8008bdc:	f7f7 fb76 	bl	80002cc <__adddf3>
 8008be0:	4642      	mov	r2, r8
 8008be2:	e9cd 0100 	strd	r0, r1, [sp]
 8008be6:	464b      	mov	r3, r9
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 fb6c 	bl	80002c8 <__aeabi_dsub>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bf8:	f7f7 ffae 	bl	8000b58 <__aeabi_dcmpgt>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f47f ae00 	bne.w	8008802 <__ieee754_pow+0x3da>
 8008c02:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008c06:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008c0a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008c0e:	fa43 fa0a 	asr.w	sl, r3, sl
 8008c12:	44da      	add	sl, fp
 8008c14:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008c18:	489d      	ldr	r0, [pc, #628]	@ (8008e90 <__ieee754_pow+0xa68>)
 8008c1a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008c1e:	4108      	asrs	r0, r1
 8008c20:	ea00 030a 	and.w	r3, r0, sl
 8008c24:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008c28:	f1c1 0114 	rsb	r1, r1, #20
 8008c2c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008c30:	fa4a fa01 	asr.w	sl, sl, r1
 8008c34:	f1bb 0f00 	cmp.w	fp, #0
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	bfb8      	it	lt
 8008c42:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c46:	f7f7 fb3f 	bl	80002c8 <__aeabi_dsub>
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	4689      	mov	r9, r1
 8008c4e:	4632      	mov	r2, r6
 8008c50:	463b      	mov	r3, r7
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fb39 	bl	80002cc <__adddf3>
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	a37c      	add	r3, pc, #496	@ (adr r3, 8008e50 <__ieee754_pow+0xa28>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	4620      	mov	r0, r4
 8008c64:	460d      	mov	r5, r1
 8008c66:	f7f7 fce7 	bl	8000638 <__aeabi_dmul>
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c70:	464b      	mov	r3, r9
 8008c72:	4620      	mov	r0, r4
 8008c74:	4629      	mov	r1, r5
 8008c76:	f7f7 fb27 	bl	80002c8 <__aeabi_dsub>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4630      	mov	r0, r6
 8008c80:	4639      	mov	r1, r7
 8008c82:	f7f7 fb21 	bl	80002c8 <__aeabi_dsub>
 8008c86:	a374      	add	r3, pc, #464	@ (adr r3, 8008e58 <__ieee754_pow+0xa30>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f7f7 fcd4 	bl	8000638 <__aeabi_dmul>
 8008c90:	a373      	add	r3, pc, #460	@ (adr r3, 8008e60 <__ieee754_pow+0xa38>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	4680      	mov	r8, r0
 8008c98:	4689      	mov	r9, r1
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	f7f7 fccb 	bl	8000638 <__aeabi_dmul>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	4649      	mov	r1, r9
 8008caa:	f7f7 fb0f 	bl	80002cc <__adddf3>
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cba:	f7f7 fb07 	bl	80002cc <__adddf3>
 8008cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	4689      	mov	r9, r1
 8008cc6:	f7f7 faff 	bl	80002c8 <__aeabi_dsub>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4620      	mov	r0, r4
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f7f7 faf9 	bl	80002c8 <__aeabi_dsub>
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	4606      	mov	r6, r0
 8008cda:	460f      	mov	r7, r1
 8008cdc:	464b      	mov	r3, r9
 8008cde:	4640      	mov	r0, r8
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	f7f7 fca9 	bl	8000638 <__aeabi_dmul>
 8008ce6:	a360      	add	r3, pc, #384	@ (adr r3, 8008e68 <__ieee754_pow+0xa40>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	f7f7 fca2 	bl	8000638 <__aeabi_dmul>
 8008cf4:	a35e      	add	r3, pc, #376	@ (adr r3, 8008e70 <__ieee754_pow+0xa48>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fae5 	bl	80002c8 <__aeabi_dsub>
 8008cfe:	4622      	mov	r2, r4
 8008d00:	462b      	mov	r3, r5
 8008d02:	f7f7 fc99 	bl	8000638 <__aeabi_dmul>
 8008d06:	a35c      	add	r3, pc, #368	@ (adr r3, 8008e78 <__ieee754_pow+0xa50>)
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f7f7 fade 	bl	80002cc <__adddf3>
 8008d10:	4622      	mov	r2, r4
 8008d12:	462b      	mov	r3, r5
 8008d14:	f7f7 fc90 	bl	8000638 <__aeabi_dmul>
 8008d18:	a359      	add	r3, pc, #356	@ (adr r3, 8008e80 <__ieee754_pow+0xa58>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f7f7 fad3 	bl	80002c8 <__aeabi_dsub>
 8008d22:	4622      	mov	r2, r4
 8008d24:	462b      	mov	r3, r5
 8008d26:	f7f7 fc87 	bl	8000638 <__aeabi_dmul>
 8008d2a:	a357      	add	r3, pc, #348	@ (adr r3, 8008e88 <__ieee754_pow+0xa60>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 facc 	bl	80002cc <__adddf3>
 8008d34:	4622      	mov	r2, r4
 8008d36:	462b      	mov	r3, r5
 8008d38:	f7f7 fc7e 	bl	8000638 <__aeabi_dmul>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4640      	mov	r0, r8
 8008d42:	4649      	mov	r1, r9
 8008d44:	f7f7 fac0 	bl	80002c8 <__aeabi_dsub>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4640      	mov	r0, r8
 8008d52:	4649      	mov	r1, r9
 8008d54:	f7f7 fc70 	bl	8000638 <__aeabi_dmul>
 8008d58:	2200      	movs	r2, #0
 8008d5a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 faaf 	bl	80002c8 <__aeabi_dsub>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d72:	f7f7 fd8b 	bl	800088c <__aeabi_ddiv>
 8008d76:	4632      	mov	r2, r6
 8008d78:	4604      	mov	r4, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fc59 	bl	8000638 <__aeabi_dmul>
 8008d86:	4632      	mov	r2, r6
 8008d88:	463b      	mov	r3, r7
 8008d8a:	f7f7 fa9f 	bl	80002cc <__adddf3>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7f7 fa97 	bl	80002c8 <__aeabi_dsub>
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	f7f7 fa93 	bl	80002c8 <__aeabi_dsub>
 8008da2:	460b      	mov	r3, r1
 8008da4:	4602      	mov	r2, r0
 8008da6:	493b      	ldr	r1, [pc, #236]	@ (8008e94 <__ieee754_pow+0xa6c>)
 8008da8:	2000      	movs	r0, #0
 8008daa:	f7f7 fa8d 	bl	80002c8 <__aeabi_dsub>
 8008dae:	ec41 0b10 	vmov	d0, r0, r1
 8008db2:	ee10 3a90 	vmov	r3, s1
 8008db6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dbe:	da30      	bge.n	8008e22 <__ieee754_pow+0x9fa>
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	f000 f87d 	bl	8008ec0 <scalbn>
 8008dc6:	ec51 0b10 	vmov	r0, r1, d0
 8008dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dce:	f7ff bbd2 	b.w	8008576 <__ieee754_pow+0x14e>
 8008dd2:	4c31      	ldr	r4, [pc, #196]	@ (8008e98 <__ieee754_pow+0xa70>)
 8008dd4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d91a      	bls.n	8008e12 <__ieee754_pow+0x9ea>
 8008ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8008e9c <__ieee754_pow+0xa74>)
 8008dde:	440b      	add	r3, r1
 8008de0:	4303      	orrs	r3, r0
 8008de2:	d009      	beq.n	8008df8 <__ieee754_pow+0x9d0>
 8008de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de8:	2200      	movs	r2, #0
 8008dea:	2300      	movs	r3, #0
 8008dec:	f7f7 fe96 	bl	8000b1c <__aeabi_dcmplt>
 8008df0:	3800      	subs	r0, #0
 8008df2:	bf18      	it	ne
 8008df4:	2001      	movne	r0, #1
 8008df6:	e42b      	b.n	8008650 <__ieee754_pow+0x228>
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	f7f7 fa64 	bl	80002c8 <__aeabi_dsub>
 8008e00:	4632      	mov	r2, r6
 8008e02:	463b      	mov	r3, r7
 8008e04:	f7f7 fe9e 	bl	8000b44 <__aeabi_dcmpge>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1eb      	bne.n	8008de4 <__ieee754_pow+0x9bc>
 8008e0c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008eac <__ieee754_pow+0xa84>
 8008e10:	e6f7      	b.n	8008c02 <__ieee754_pow+0x7da>
 8008e12:	469a      	mov	sl, r3
 8008e14:	4b22      	ldr	r3, [pc, #136]	@ (8008ea0 <__ieee754_pow+0xa78>)
 8008e16:	459a      	cmp	sl, r3
 8008e18:	f63f aef3 	bhi.w	8008c02 <__ieee754_pow+0x7da>
 8008e1c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008e20:	e715      	b.n	8008c4e <__ieee754_pow+0x826>
 8008e22:	ec51 0b10 	vmov	r0, r1, d0
 8008e26:	4619      	mov	r1, r3
 8008e28:	e7cf      	b.n	8008dca <__ieee754_pow+0x9a2>
 8008e2a:	491a      	ldr	r1, [pc, #104]	@ (8008e94 <__ieee754_pow+0xa6c>)
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	f7ff bb18 	b.w	8008462 <__ieee754_pow+0x3a>
 8008e32:	2000      	movs	r0, #0
 8008e34:	2100      	movs	r1, #0
 8008e36:	f7ff bb14 	b.w	8008462 <__ieee754_pow+0x3a>
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7ff bb10 	b.w	8008462 <__ieee754_pow+0x3a>
 8008e42:	460c      	mov	r4, r1
 8008e44:	f7ff bb5e 	b.w	8008504 <__ieee754_pow+0xdc>
 8008e48:	2400      	movs	r4, #0
 8008e4a:	f7ff bb49 	b.w	80084e0 <__ieee754_pow+0xb8>
 8008e4e:	bf00      	nop
 8008e50:	00000000 	.word	0x00000000
 8008e54:	3fe62e43 	.word	0x3fe62e43
 8008e58:	fefa39ef 	.word	0xfefa39ef
 8008e5c:	3fe62e42 	.word	0x3fe62e42
 8008e60:	0ca86c39 	.word	0x0ca86c39
 8008e64:	be205c61 	.word	0xbe205c61
 8008e68:	72bea4d0 	.word	0x72bea4d0
 8008e6c:	3e663769 	.word	0x3e663769
 8008e70:	c5d26bf1 	.word	0xc5d26bf1
 8008e74:	3ebbbd41 	.word	0x3ebbbd41
 8008e78:	af25de2c 	.word	0xaf25de2c
 8008e7c:	3f11566a 	.word	0x3f11566a
 8008e80:	16bebd93 	.word	0x16bebd93
 8008e84:	3f66c16c 	.word	0x3f66c16c
 8008e88:	5555553e 	.word	0x5555553e
 8008e8c:	3fc55555 	.word	0x3fc55555
 8008e90:	fff00000 	.word	0xfff00000
 8008e94:	3ff00000 	.word	0x3ff00000
 8008e98:	4090cbff 	.word	0x4090cbff
 8008e9c:	3f6f3400 	.word	0x3f6f3400
 8008ea0:	3fe00000 	.word	0x3fe00000
 8008ea4:	652b82fe 	.word	0x652b82fe
 8008ea8:	3c971547 	.word	0x3c971547
 8008eac:	4090cc00 	.word	0x4090cc00

08008eb0 <fabs>:
 8008eb0:	ec51 0b10 	vmov	r0, r1, d0
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008eba:	ec43 2b10 	vmov	d0, r2, r3
 8008ebe:	4770      	bx	lr

08008ec0 <scalbn>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	ec55 4b10 	vmov	r4, r5, d0
 8008ec6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008eca:	4606      	mov	r6, r0
 8008ecc:	462b      	mov	r3, r5
 8008ece:	b991      	cbnz	r1, 8008ef6 <scalbn+0x36>
 8008ed0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008ed4:	4323      	orrs	r3, r4
 8008ed6:	d03d      	beq.n	8008f54 <scalbn+0x94>
 8008ed8:	4b35      	ldr	r3, [pc, #212]	@ (8008fb0 <scalbn+0xf0>)
 8008eda:	4620      	mov	r0, r4
 8008edc:	4629      	mov	r1, r5
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f7f7 fbaa 	bl	8000638 <__aeabi_dmul>
 8008ee4:	4b33      	ldr	r3, [pc, #204]	@ (8008fb4 <scalbn+0xf4>)
 8008ee6:	429e      	cmp	r6, r3
 8008ee8:	4604      	mov	r4, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	da0f      	bge.n	8008f0e <scalbn+0x4e>
 8008eee:	a328      	add	r3, pc, #160	@ (adr r3, 8008f90 <scalbn+0xd0>)
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	e01e      	b.n	8008f34 <scalbn+0x74>
 8008ef6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008efa:	4291      	cmp	r1, r2
 8008efc:	d10b      	bne.n	8008f16 <scalbn+0x56>
 8008efe:	4622      	mov	r2, r4
 8008f00:	4620      	mov	r0, r4
 8008f02:	4629      	mov	r1, r5
 8008f04:	f7f7 f9e2 	bl	80002cc <__adddf3>
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	e022      	b.n	8008f54 <scalbn+0x94>
 8008f0e:	460b      	mov	r3, r1
 8008f10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008f14:	3936      	subs	r1, #54	@ 0x36
 8008f16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008f1a:	4296      	cmp	r6, r2
 8008f1c:	dd0d      	ble.n	8008f3a <scalbn+0x7a>
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	a11d      	add	r1, pc, #116	@ (adr r1, 8008f98 <scalbn+0xd8>)
 8008f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f26:	da02      	bge.n	8008f2e <scalbn+0x6e>
 8008f28:	a11d      	add	r1, pc, #116	@ (adr r1, 8008fa0 <scalbn+0xe0>)
 8008f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8008f98 <scalbn+0xd8>)
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f7f7 fb80 	bl	8000638 <__aeabi_dmul>
 8008f38:	e7e6      	b.n	8008f08 <scalbn+0x48>
 8008f3a:	1872      	adds	r2, r6, r1
 8008f3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008f40:	428a      	cmp	r2, r1
 8008f42:	dcec      	bgt.n	8008f1e <scalbn+0x5e>
 8008f44:	2a00      	cmp	r2, #0
 8008f46:	dd08      	ble.n	8008f5a <scalbn+0x9a>
 8008f48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008f4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008f50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f54:	ec45 4b10 	vmov	d0, r4, r5
 8008f58:	bd70      	pop	{r4, r5, r6, pc}
 8008f5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008f5e:	da08      	bge.n	8008f72 <scalbn+0xb2>
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	a10b      	add	r1, pc, #44	@ (adr r1, 8008f90 <scalbn+0xd0>)
 8008f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f68:	dac1      	bge.n	8008eee <scalbn+0x2e>
 8008f6a:	a10f      	add	r1, pc, #60	@ (adr r1, 8008fa8 <scalbn+0xe8>)
 8008f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f70:	e7bd      	b.n	8008eee <scalbn+0x2e>
 8008f72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008f76:	3236      	adds	r2, #54	@ 0x36
 8008f78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008f7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f80:	4620      	mov	r0, r4
 8008f82:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb8 <scalbn+0xf8>)
 8008f84:	4629      	mov	r1, r5
 8008f86:	2200      	movs	r2, #0
 8008f88:	e7d4      	b.n	8008f34 <scalbn+0x74>
 8008f8a:	bf00      	nop
 8008f8c:	f3af 8000 	nop.w
 8008f90:	c2f8f359 	.word	0xc2f8f359
 8008f94:	01a56e1f 	.word	0x01a56e1f
 8008f98:	8800759c 	.word	0x8800759c
 8008f9c:	7e37e43c 	.word	0x7e37e43c
 8008fa0:	8800759c 	.word	0x8800759c
 8008fa4:	fe37e43c 	.word	0xfe37e43c
 8008fa8:	c2f8f359 	.word	0xc2f8f359
 8008fac:	81a56e1f 	.word	0x81a56e1f
 8008fb0:	43500000 	.word	0x43500000
 8008fb4:	ffff3cb0 	.word	0xffff3cb0
 8008fb8:	3c900000 	.word	0x3c900000

08008fbc <with_errno>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	ed2d 8b02 	vpush	{d8}
 8008fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8008fc6:	eef0 8a60 	vmov.f32	s17, s1
 8008fca:	4604      	mov	r4, r0
 8008fcc:	f7fb fe28 	bl	8004c20 <__errno>
 8008fd0:	eeb0 0a48 	vmov.f32	s0, s16
 8008fd4:	eef0 0a68 	vmov.f32	s1, s17
 8008fd8:	ecbd 8b02 	vpop	{d8}
 8008fdc:	6004      	str	r4, [r0, #0]
 8008fde:	bd10      	pop	{r4, pc}

08008fe0 <xflow>:
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	b507      	push	{r0, r1, r2, lr}
 8008fe4:	ec51 0b10 	vmov	r0, r1, d0
 8008fe8:	b183      	cbz	r3, 800900c <xflow+0x2c>
 8008fea:	4602      	mov	r2, r0
 8008fec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ff0:	e9cd 2300 	strd	r2, r3, [sp]
 8008ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff8:	f7f7 fb1e 	bl	8000638 <__aeabi_dmul>
 8008ffc:	ec41 0b10 	vmov	d0, r0, r1
 8009000:	2022      	movs	r0, #34	@ 0x22
 8009002:	b003      	add	sp, #12
 8009004:	f85d eb04 	ldr.w	lr, [sp], #4
 8009008:	f7ff bfd8 	b.w	8008fbc <with_errno>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	e7ee      	b.n	8008ff0 <xflow+0x10>
 8009012:	0000      	movs	r0, r0
 8009014:	0000      	movs	r0, r0
	...

08009018 <__math_uflow>:
 8009018:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009020 <__math_uflow+0x8>
 800901c:	f7ff bfe0 	b.w	8008fe0 <xflow>
 8009020:	00000000 	.word	0x00000000
 8009024:	10000000 	.word	0x10000000

08009028 <__math_oflow>:
 8009028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009030 <__math_oflow+0x8>
 800902c:	f7ff bfd8 	b.w	8008fe0 <xflow>
 8009030:	00000000 	.word	0x00000000
 8009034:	70000000 	.word	0x70000000

08009038 <__ieee754_sqrt>:
 8009038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	4a68      	ldr	r2, [pc, #416]	@ (80091e0 <__ieee754_sqrt+0x1a8>)
 800903e:	ec55 4b10 	vmov	r4, r5, d0
 8009042:	43aa      	bics	r2, r5
 8009044:	462b      	mov	r3, r5
 8009046:	4621      	mov	r1, r4
 8009048:	d110      	bne.n	800906c <__ieee754_sqrt+0x34>
 800904a:	4622      	mov	r2, r4
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 faf2 	bl	8000638 <__aeabi_dmul>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	f7f7 f936 	bl	80002cc <__adddf3>
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	ec45 4b10 	vmov	d0, r4, r5
 8009068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906c:	2d00      	cmp	r5, #0
 800906e:	dc0e      	bgt.n	800908e <__ieee754_sqrt+0x56>
 8009070:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009074:	4322      	orrs	r2, r4
 8009076:	d0f5      	beq.n	8009064 <__ieee754_sqrt+0x2c>
 8009078:	b19d      	cbz	r5, 80090a2 <__ieee754_sqrt+0x6a>
 800907a:	4622      	mov	r2, r4
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 f922 	bl	80002c8 <__aeabi_dsub>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	f7f7 fc00 	bl	800088c <__aeabi_ddiv>
 800908c:	e7e8      	b.n	8009060 <__ieee754_sqrt+0x28>
 800908e:	152a      	asrs	r2, r5, #20
 8009090:	d115      	bne.n	80090be <__ieee754_sqrt+0x86>
 8009092:	2000      	movs	r0, #0
 8009094:	e009      	b.n	80090aa <__ieee754_sqrt+0x72>
 8009096:	0acb      	lsrs	r3, r1, #11
 8009098:	3a15      	subs	r2, #21
 800909a:	0549      	lsls	r1, r1, #21
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0fa      	beq.n	8009096 <__ieee754_sqrt+0x5e>
 80090a0:	e7f7      	b.n	8009092 <__ieee754_sqrt+0x5a>
 80090a2:	462a      	mov	r2, r5
 80090a4:	e7fa      	b.n	800909c <__ieee754_sqrt+0x64>
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	3001      	adds	r0, #1
 80090aa:	02dc      	lsls	r4, r3, #11
 80090ac:	d5fb      	bpl.n	80090a6 <__ieee754_sqrt+0x6e>
 80090ae:	1e44      	subs	r4, r0, #1
 80090b0:	1b12      	subs	r2, r2, r4
 80090b2:	f1c0 0420 	rsb	r4, r0, #32
 80090b6:	fa21 f404 	lsr.w	r4, r1, r4
 80090ba:	4323      	orrs	r3, r4
 80090bc:	4081      	lsls	r1, r0
 80090be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80090c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090ca:	07d2      	lsls	r2, r2, #31
 80090cc:	bf5c      	itt	pl
 80090ce:	005b      	lslpl	r3, r3, #1
 80090d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80090d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090d8:	bf58      	it	pl
 80090da:	0049      	lslpl	r1, r1, #1
 80090dc:	2600      	movs	r6, #0
 80090de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80090e2:	106d      	asrs	r5, r5, #1
 80090e4:	0049      	lsls	r1, r1, #1
 80090e6:	2016      	movs	r0, #22
 80090e8:	4632      	mov	r2, r6
 80090ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80090ee:	1917      	adds	r7, r2, r4
 80090f0:	429f      	cmp	r7, r3
 80090f2:	bfde      	ittt	le
 80090f4:	193a      	addle	r2, r7, r4
 80090f6:	1bdb      	suble	r3, r3, r7
 80090f8:	1936      	addle	r6, r6, r4
 80090fa:	0fcf      	lsrs	r7, r1, #31
 80090fc:	3801      	subs	r0, #1
 80090fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009102:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009106:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800910a:	d1f0      	bne.n	80090ee <__ieee754_sqrt+0xb6>
 800910c:	4604      	mov	r4, r0
 800910e:	2720      	movs	r7, #32
 8009110:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009114:	429a      	cmp	r2, r3
 8009116:	eb00 0e0c 	add.w	lr, r0, ip
 800911a:	db02      	blt.n	8009122 <__ieee754_sqrt+0xea>
 800911c:	d113      	bne.n	8009146 <__ieee754_sqrt+0x10e>
 800911e:	458e      	cmp	lr, r1
 8009120:	d811      	bhi.n	8009146 <__ieee754_sqrt+0x10e>
 8009122:	f1be 0f00 	cmp.w	lr, #0
 8009126:	eb0e 000c 	add.w	r0, lr, ip
 800912a:	da42      	bge.n	80091b2 <__ieee754_sqrt+0x17a>
 800912c:	2800      	cmp	r0, #0
 800912e:	db40      	blt.n	80091b2 <__ieee754_sqrt+0x17a>
 8009130:	f102 0801 	add.w	r8, r2, #1
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	458e      	cmp	lr, r1
 8009138:	bf88      	it	hi
 800913a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800913e:	eba1 010e 	sub.w	r1, r1, lr
 8009142:	4464      	add	r4, ip
 8009144:	4642      	mov	r2, r8
 8009146:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800914a:	3f01      	subs	r7, #1
 800914c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009150:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009154:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009158:	d1dc      	bne.n	8009114 <__ieee754_sqrt+0xdc>
 800915a:	4319      	orrs	r1, r3
 800915c:	d01b      	beq.n	8009196 <__ieee754_sqrt+0x15e>
 800915e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80091e4 <__ieee754_sqrt+0x1ac>
 8009162:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80091e8 <__ieee754_sqrt+0x1b0>
 8009166:	e9da 0100 	ldrd	r0, r1, [sl]
 800916a:	e9db 2300 	ldrd	r2, r3, [fp]
 800916e:	f7f7 f8ab 	bl	80002c8 <__aeabi_dsub>
 8009172:	e9da 8900 	ldrd	r8, r9, [sl]
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 fcd7 	bl	8000b30 <__aeabi_dcmple>
 8009182:	b140      	cbz	r0, 8009196 <__ieee754_sqrt+0x15e>
 8009184:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009188:	e9da 0100 	ldrd	r0, r1, [sl]
 800918c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009190:	d111      	bne.n	80091b6 <__ieee754_sqrt+0x17e>
 8009192:	3601      	adds	r6, #1
 8009194:	463c      	mov	r4, r7
 8009196:	1072      	asrs	r2, r6, #1
 8009198:	0863      	lsrs	r3, r4, #1
 800919a:	07f1      	lsls	r1, r6, #31
 800919c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80091a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80091a4:	bf48      	it	mi
 80091a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80091aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80091ae:	4618      	mov	r0, r3
 80091b0:	e756      	b.n	8009060 <__ieee754_sqrt+0x28>
 80091b2:	4690      	mov	r8, r2
 80091b4:	e7be      	b.n	8009134 <__ieee754_sqrt+0xfc>
 80091b6:	f7f7 f889 	bl	80002cc <__adddf3>
 80091ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 fca9 	bl	8000b1c <__aeabi_dcmplt>
 80091ca:	b120      	cbz	r0, 80091d6 <__ieee754_sqrt+0x19e>
 80091cc:	1ca0      	adds	r0, r4, #2
 80091ce:	bf08      	it	eq
 80091d0:	3601      	addeq	r6, #1
 80091d2:	3402      	adds	r4, #2
 80091d4:	e7df      	b.n	8009196 <__ieee754_sqrt+0x15e>
 80091d6:	1c63      	adds	r3, r4, #1
 80091d8:	f023 0401 	bic.w	r4, r3, #1
 80091dc:	e7db      	b.n	8009196 <__ieee754_sqrt+0x15e>
 80091de:	bf00      	nop
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	200001e0 	.word	0x200001e0
 80091e8:	200001d8 	.word	0x200001d8

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
